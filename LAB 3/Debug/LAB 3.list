
LAB 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000315c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800328c  0800328c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800328c  0800328c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800328c  0800328c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000002c  080032c0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080032c0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096ea  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7b  00000000  00000000  0002973f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a59  00000000  00000000  0002c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4a3  00000000  00000000  00042ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082562  00000000  00000000  0004e394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d08f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000277c  00000000  00000000  000d094c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003250 	.word	0x08003250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08003250 	.word	0x08003250

0800014c <display7SEGFirstSet>:
#include "main.h"




void display7SEGFirstSet(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( OUT6_GPIO_Port , OUT6_Pin,GPIO_PIN_SET ) ;
 8000154:	2201      	movs	r2, #1
 8000156:	2140      	movs	r1, #64	; 0x40
 8000158:	4898      	ldr	r0, [pc, #608]	; (80003bc <display7SEGFirstSet+0x270>)
 800015a:	f002 f858 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT7_GPIO_Port , OUT7_Pin,GPIO_PIN_SET ) ;
 800015e:	2201      	movs	r2, #1
 8000160:	2180      	movs	r1, #128	; 0x80
 8000162:	4896      	ldr	r0, [pc, #600]	; (80003bc <display7SEGFirstSet+0x270>)
 8000164:	f002 f853 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT8_GPIO_Port , OUT8_Pin,GPIO_PIN_SET ) ;
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016e:	4893      	ldr	r0, [pc, #588]	; (80003bc <display7SEGFirstSet+0x270>)
 8000170:	f002 f84d 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT9_GPIO_Port , OUT9_Pin,GPIO_PIN_SET ) ;
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800017a:	4890      	ldr	r0, [pc, #576]	; (80003bc <display7SEGFirstSet+0x270>)
 800017c:	f002 f847 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT10_GPIO_Port , OUT10_Pin,GPIO_PIN_SET ) ;
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000186:	488d      	ldr	r0, [pc, #564]	; (80003bc <display7SEGFirstSet+0x270>)
 8000188:	f002 f841 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT11_GPIO_Port , OUT11_Pin,GPIO_PIN_SET )  ;
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000192:	488a      	ldr	r0, [pc, #552]	; (80003bc <display7SEGFirstSet+0x270>)
 8000194:	f002 f83b 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT12_GPIO_Port , OUT12_Pin,GPIO_PIN_SET ) ;
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800019e:	4887      	ldr	r0, [pc, #540]	; (80003bc <display7SEGFirstSet+0x270>)
 80001a0:	f002 f835 	bl	800220e <HAL_GPIO_WritePin>

	if(num == 0){
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d11c      	bne.n	80001e4 <display7SEGFirstSet+0x98>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 80001aa:	2140      	movs	r1, #64	; 0x40
 80001ac:	4883      	ldr	r0, [pc, #524]	; (80003bc <display7SEGFirstSet+0x270>)
 80001ae:	f002 f846 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 80001b2:	2180      	movs	r1, #128	; 0x80
 80001b4:	4881      	ldr	r0, [pc, #516]	; (80003bc <display7SEGFirstSet+0x270>)
 80001b6:	f002 f842 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 80001ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001be:	487f      	ldr	r0, [pc, #508]	; (80003bc <display7SEGFirstSet+0x270>)
 80001c0:	f002 f83d 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 80001c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c8:	487c      	ldr	r0, [pc, #496]	; (80003bc <display7SEGFirstSet+0x270>)
 80001ca:	f002 f838 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
 80001ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d2:	487a      	ldr	r0, [pc, #488]	; (80003bc <display7SEGFirstSet+0x270>)
 80001d4:	f002 f833 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 80001d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001dc:	4877      	ldr	r0, [pc, #476]	; (80003bc <display7SEGFirstSet+0x270>)
 80001de:	f002 f82e 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
		//HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
	}
}
 80001e2:	e0e6      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 1){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d109      	bne.n	80001fe <display7SEGFirstSet+0xb2>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	4873      	ldr	r0, [pc, #460]	; (80003bc <display7SEGFirstSet+0x270>)
 80001ee:	f002 f826 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 80001f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f6:	4871      	ldr	r0, [pc, #452]	; (80003bc <display7SEGFirstSet+0x270>)
 80001f8:	f002 f821 	bl	800223e <HAL_GPIO_TogglePin>
}
 80001fc:	e0d9      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 2){
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b02      	cmp	r3, #2
 8000202:	d117      	bne.n	8000234 <display7SEGFirstSet+0xe8>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	486d      	ldr	r0, [pc, #436]	; (80003bc <display7SEGFirstSet+0x270>)
 8000208:	f002 f819 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 800020c:	2180      	movs	r1, #128	; 0x80
 800020e:	486b      	ldr	r0, [pc, #428]	; (80003bc <display7SEGFirstSet+0x270>)
 8000210:	f002 f815 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 8000214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000218:	4868      	ldr	r0, [pc, #416]	; (80003bc <display7SEGFirstSet+0x270>)
 800021a:	f002 f810 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
 800021e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000222:	4866      	ldr	r0, [pc, #408]	; (80003bc <display7SEGFirstSet+0x270>)
 8000224:	f002 f80b 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 8000228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022c:	4863      	ldr	r0, [pc, #396]	; (80003bc <display7SEGFirstSet+0x270>)
 800022e:	f002 f806 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000232:	e0be      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 3){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b03      	cmp	r3, #3
 8000238:	d117      	bne.n	800026a <display7SEGFirstSet+0x11e>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	485f      	ldr	r0, [pc, #380]	; (80003bc <display7SEGFirstSet+0x270>)
 800023e:	f001 fffe 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 8000242:	2180      	movs	r1, #128	; 0x80
 8000244:	485d      	ldr	r0, [pc, #372]	; (80003bc <display7SEGFirstSet+0x270>)
 8000246:	f001 fffa 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 800024a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024e:	485b      	ldr	r0, [pc, #364]	; (80003bc <display7SEGFirstSet+0x270>)
 8000250:	f001 fff5 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 8000254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000258:	4858      	ldr	r0, [pc, #352]	; (80003bc <display7SEGFirstSet+0x270>)
 800025a:	f001 fff0 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 800025e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000262:	4856      	ldr	r0, [pc, #344]	; (80003bc <display7SEGFirstSet+0x270>)
 8000264:	f001 ffeb 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000268:	e0a3      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 4){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d113      	bne.n	8000298 <display7SEGFirstSet+0x14c>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	4852      	ldr	r0, [pc, #328]	; (80003bc <display7SEGFirstSet+0x270>)
 8000274:	f001 ffe3 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 8000278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027c:	484f      	ldr	r0, [pc, #316]	; (80003bc <display7SEGFirstSet+0x270>)
 800027e:	f001 ffde 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 8000282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000286:	484d      	ldr	r0, [pc, #308]	; (80003bc <display7SEGFirstSet+0x270>)
 8000288:	f001 ffd9 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 800028c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000290:	484a      	ldr	r0, [pc, #296]	; (80003bc <display7SEGFirstSet+0x270>)
 8000292:	f001 ffd4 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000296:	e08c      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 5){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b05      	cmp	r3, #5
 800029c:	d118      	bne.n	80002d0 <display7SEGFirstSet+0x184>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 800029e:	2140      	movs	r1, #64	; 0x40
 80002a0:	4846      	ldr	r0, [pc, #280]	; (80003bc <display7SEGFirstSet+0x270>)
 80002a2:	f001 ffcc 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	4844      	ldr	r0, [pc, #272]	; (80003bc <display7SEGFirstSet+0x270>)
 80002ac:	f001 ffc7 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 80002b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b4:	4841      	ldr	r0, [pc, #260]	; (80003bc <display7SEGFirstSet+0x270>)
 80002b6:	f001 ffc2 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 80002ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002be:	483f      	ldr	r0, [pc, #252]	; (80003bc <display7SEGFirstSet+0x270>)
 80002c0:	f001 ffbd 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	483c      	ldr	r0, [pc, #240]	; (80003bc <display7SEGFirstSet+0x270>)
 80002ca:	f001 ffb8 	bl	800223e <HAL_GPIO_TogglePin>
}
 80002ce:	e070      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 6){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b06      	cmp	r3, #6
 80002d4:	d11d      	bne.n	8000312 <display7SEGFirstSet+0x1c6>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 80002d6:	2140      	movs	r1, #64	; 0x40
 80002d8:	4838      	ldr	r0, [pc, #224]	; (80003bc <display7SEGFirstSet+0x270>)
 80002da:	f001 ffb0 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4836      	ldr	r0, [pc, #216]	; (80003bc <display7SEGFirstSet+0x270>)
 80002e4:	f001 ffab 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	4833      	ldr	r0, [pc, #204]	; (80003bc <display7SEGFirstSet+0x270>)
 80002ee:	f001 ffa6 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
 80002f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f6:	4831      	ldr	r0, [pc, #196]	; (80003bc <display7SEGFirstSet+0x270>)
 80002f8:	f001 ffa1 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 80002fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000300:	482e      	ldr	r0, [pc, #184]	; (80003bc <display7SEGFirstSet+0x270>)
 8000302:	f001 ff9c 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 8000306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800030a:	482c      	ldr	r0, [pc, #176]	; (80003bc <display7SEGFirstSet+0x270>)
 800030c:	f001 ff97 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000310:	e04f      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 7){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b07      	cmp	r3, #7
 8000316:	d10d      	bne.n	8000334 <display7SEGFirstSet+0x1e8>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 8000318:	2140      	movs	r1, #64	; 0x40
 800031a:	4828      	ldr	r0, [pc, #160]	; (80003bc <display7SEGFirstSet+0x270>)
 800031c:	f001 ff8f 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 8000320:	2180      	movs	r1, #128	; 0x80
 8000322:	4826      	ldr	r0, [pc, #152]	; (80003bc <display7SEGFirstSet+0x270>)
 8000324:	f001 ff8b 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 8000328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032c:	4823      	ldr	r0, [pc, #140]	; (80003bc <display7SEGFirstSet+0x270>)
 800032e:	f001 ff86 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000332:	e03e      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 8){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b08      	cmp	r3, #8
 8000338:	d121      	bne.n	800037e <display7SEGFirstSet+0x232>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 800033a:	2140      	movs	r1, #64	; 0x40
 800033c:	481f      	ldr	r0, [pc, #124]	; (80003bc <display7SEGFirstSet+0x270>)
 800033e:	f001 ff7e 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	481d      	ldr	r0, [pc, #116]	; (80003bc <display7SEGFirstSet+0x270>)
 8000346:	f001 ff7a 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 800034a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800034e:	481b      	ldr	r0, [pc, #108]	; (80003bc <display7SEGFirstSet+0x270>)
 8000350:	f001 ff75 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 8000354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <display7SEGFirstSet+0x270>)
 800035a:	f001 ff70 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
 800035e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000362:	4816      	ldr	r0, [pc, #88]	; (80003bc <display7SEGFirstSet+0x270>)
 8000364:	f001 ff6b 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 8000368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <display7SEGFirstSet+0x270>)
 800036e:	f001 ff66 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 8000372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <display7SEGFirstSet+0x270>)
 8000378:	f001 ff61 	bl	800223e <HAL_GPIO_TogglePin>
}
 800037c:	e019      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 9){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b09      	cmp	r3, #9
 8000382:	d116      	bne.n	80003b2 <display7SEGFirstSet+0x266>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	480d      	ldr	r0, [pc, #52]	; (80003bc <display7SEGFirstSet+0x270>)
 8000388:	f001 ff59 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	480b      	ldr	r0, [pc, #44]	; (80003bc <display7SEGFirstSet+0x270>)
 8000390:	f001 ff55 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	4808      	ldr	r0, [pc, #32]	; (80003bc <display7SEGFirstSet+0x270>)
 800039a:	f001 ff50 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 800039e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <display7SEGFirstSet+0x270>)
 80003a4:	f001 ff4b 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4803      	ldr	r0, [pc, #12]	; (80003bc <display7SEGFirstSet+0x270>)
 80003ae:	f001 ff46 	bl	800223e <HAL_GPIO_TogglePin>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40010800 	.word	0x40010800

080003c0 <display7SEGSecondSet>:

void display7SEGSecondSet(int num){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( OUT2_3_GPIO_Port , OUT2_3_Pin,GPIO_PIN_SET ) ;
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	488d      	ldr	r0, [pc, #564]	; (8000604 <display7SEGSecondSet+0x244>)
 80003ce:	f001 ff1e 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_4_GPIO_Port , OUT2_4_Pin,GPIO_PIN_SET ) ;
 80003d2:	2201      	movs	r2, #1
 80003d4:	2110      	movs	r1, #16
 80003d6:	488b      	ldr	r0, [pc, #556]	; (8000604 <display7SEGSecondSet+0x244>)
 80003d8:	f001 ff19 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_5_GPIO_Port , OUT2_5_Pin,GPIO_PIN_SET ) ;
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	4888      	ldr	r0, [pc, #544]	; (8000604 <display7SEGSecondSet+0x244>)
 80003e2:	f001 ff14 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_6_GPIO_Port , OUT2_6_Pin,GPIO_PIN_SET ) ;
 80003e6:	2201      	movs	r2, #1
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	4886      	ldr	r0, [pc, #536]	; (8000604 <display7SEGSecondSet+0x244>)
 80003ec:	f001 ff0f 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_7_GPIO_Port , OUT2_7_Pin,GPIO_PIN_SET ) ;
 80003f0:	2201      	movs	r2, #1
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	4883      	ldr	r0, [pc, #524]	; (8000604 <display7SEGSecondSet+0x244>)
 80003f6:	f001 ff0a 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_8_GPIO_Port , OUT2_8_Pin,GPIO_PIN_SET )  ;
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	4880      	ldr	r0, [pc, #512]	; (8000604 <display7SEGSecondSet+0x244>)
 8000402:	f001 ff04 	bl	800220e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_9_GPIO_Port , OUT2_9_Pin,GPIO_PIN_SET ) ;
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040c:	487d      	ldr	r0, [pc, #500]	; (8000604 <display7SEGSecondSet+0x244>)
 800040e:	f001 fefe 	bl	800220e <HAL_GPIO_WritePin>

	if(num == 0){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d119      	bne.n	800044c <display7SEGSecondSet+0x8c>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 8000418:	2108      	movs	r1, #8
 800041a:	487a      	ldr	r0, [pc, #488]	; (8000604 <display7SEGSecondSet+0x244>)
 800041c:	f001 ff0f 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000420:	2110      	movs	r1, #16
 8000422:	4878      	ldr	r0, [pc, #480]	; (8000604 <display7SEGSecondSet+0x244>)
 8000424:	f001 ff0b 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 8000428:	2120      	movs	r1, #32
 800042a:	4876      	ldr	r0, [pc, #472]	; (8000604 <display7SEGSecondSet+0x244>)
 800042c:	f001 ff07 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	4874      	ldr	r0, [pc, #464]	; (8000604 <display7SEGSecondSet+0x244>)
 8000434:	f001 ff03 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	4872      	ldr	r0, [pc, #456]	; (8000604 <display7SEGSecondSet+0x244>)
 800043c:	f001 feff 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 8000440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000444:	486f      	ldr	r0, [pc, #444]	; (8000604 <display7SEGSecondSet+0x244>)
 8000446:	f001 fefa 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
		//HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
	}
}
 800044a:	e0d6      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 1){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d108      	bne.n	8000464 <display7SEGSecondSet+0xa4>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000452:	2110      	movs	r1, #16
 8000454:	486b      	ldr	r0, [pc, #428]	; (8000604 <display7SEGSecondSet+0x244>)
 8000456:	f001 fef2 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 800045a:	2120      	movs	r1, #32
 800045c:	4869      	ldr	r0, [pc, #420]	; (8000604 <display7SEGSecondSet+0x244>)
 800045e:	f001 feee 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000462:	e0ca      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 2){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d115      	bne.n	8000496 <display7SEGSecondSet+0xd6>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800046a:	2108      	movs	r1, #8
 800046c:	4865      	ldr	r0, [pc, #404]	; (8000604 <display7SEGSecondSet+0x244>)
 800046e:	f001 fee6 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000472:	2110      	movs	r1, #16
 8000474:	4863      	ldr	r0, [pc, #396]	; (8000604 <display7SEGSecondSet+0x244>)
 8000476:	f001 fee2 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	4861      	ldr	r0, [pc, #388]	; (8000604 <display7SEGSecondSet+0x244>)
 800047e:	f001 fede 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	485f      	ldr	r0, [pc, #380]	; (8000604 <display7SEGSecondSet+0x244>)
 8000486:	f001 feda 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 800048a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048e:	485d      	ldr	r0, [pc, #372]	; (8000604 <display7SEGSecondSet+0x244>)
 8000490:	f001 fed5 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000494:	e0b1      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 3){
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2b03      	cmp	r3, #3
 800049a:	d115      	bne.n	80004c8 <display7SEGSecondSet+0x108>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800049c:	2108      	movs	r1, #8
 800049e:	4859      	ldr	r0, [pc, #356]	; (8000604 <display7SEGSecondSet+0x244>)
 80004a0:	f001 fecd 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 80004a4:	2110      	movs	r1, #16
 80004a6:	4857      	ldr	r0, [pc, #348]	; (8000604 <display7SEGSecondSet+0x244>)
 80004a8:	f001 fec9 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 80004ac:	2120      	movs	r1, #32
 80004ae:	4855      	ldr	r0, [pc, #340]	; (8000604 <display7SEGSecondSet+0x244>)
 80004b0:	f001 fec5 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 80004b4:	2140      	movs	r1, #64	; 0x40
 80004b6:	4853      	ldr	r0, [pc, #332]	; (8000604 <display7SEGSecondSet+0x244>)
 80004b8:	f001 fec1 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 80004bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c0:	4850      	ldr	r0, [pc, #320]	; (8000604 <display7SEGSecondSet+0x244>)
 80004c2:	f001 febc 	bl	800223e <HAL_GPIO_TogglePin>
}
 80004c6:	e098      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 4){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d112      	bne.n	80004f4 <display7SEGSecondSet+0x134>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 80004ce:	2110      	movs	r1, #16
 80004d0:	484c      	ldr	r0, [pc, #304]	; (8000604 <display7SEGSecondSet+0x244>)
 80004d2:	f001 feb4 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 80004d6:	2120      	movs	r1, #32
 80004d8:	484a      	ldr	r0, [pc, #296]	; (8000604 <display7SEGSecondSet+0x244>)
 80004da:	f001 feb0 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 80004de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e2:	4848      	ldr	r0, [pc, #288]	; (8000604 <display7SEGSecondSet+0x244>)
 80004e4:	f001 feab 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	4845      	ldr	r0, [pc, #276]	; (8000604 <display7SEGSecondSet+0x244>)
 80004ee:	f001 fea6 	bl	800223e <HAL_GPIO_TogglePin>
}
 80004f2:	e082      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 5){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b05      	cmp	r3, #5
 80004f8:	d116      	bne.n	8000528 <display7SEGSecondSet+0x168>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 80004fa:	2108      	movs	r1, #8
 80004fc:	4841      	ldr	r0, [pc, #260]	; (8000604 <display7SEGSecondSet+0x244>)
 80004fe:	f001 fe9e 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 8000502:	2120      	movs	r1, #32
 8000504:	483f      	ldr	r0, [pc, #252]	; (8000604 <display7SEGSecondSet+0x244>)
 8000506:	f001 fe9a 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 800050a:	2140      	movs	r1, #64	; 0x40
 800050c:	483d      	ldr	r0, [pc, #244]	; (8000604 <display7SEGSecondSet+0x244>)
 800050e:	f001 fe96 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	483b      	ldr	r0, [pc, #236]	; (8000604 <display7SEGSecondSet+0x244>)
 8000518:	f001 fe91 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 800051c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000520:	4838      	ldr	r0, [pc, #224]	; (8000604 <display7SEGSecondSet+0x244>)
 8000522:	f001 fe8c 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000526:	e068      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 6){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b06      	cmp	r3, #6
 800052c:	d11a      	bne.n	8000564 <display7SEGSecondSet+0x1a4>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800052e:	2108      	movs	r1, #8
 8000530:	4834      	ldr	r0, [pc, #208]	; (8000604 <display7SEGSecondSet+0x244>)
 8000532:	f001 fe84 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 8000536:	2120      	movs	r1, #32
 8000538:	4832      	ldr	r0, [pc, #200]	; (8000604 <display7SEGSecondSet+0x244>)
 800053a:	f001 fe80 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4830      	ldr	r0, [pc, #192]	; (8000604 <display7SEGSecondSet+0x244>)
 8000542:	f001 fe7c 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	482e      	ldr	r0, [pc, #184]	; (8000604 <display7SEGSecondSet+0x244>)
 800054a:	f001 fe78 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 800054e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000552:	482c      	ldr	r0, [pc, #176]	; (8000604 <display7SEGSecondSet+0x244>)
 8000554:	f001 fe73 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	4829      	ldr	r0, [pc, #164]	; (8000604 <display7SEGSecondSet+0x244>)
 800055e:	f001 fe6e 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000562:	e04a      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 7){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b07      	cmp	r3, #7
 8000568:	d10c      	bne.n	8000584 <display7SEGSecondSet+0x1c4>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800056a:	2108      	movs	r1, #8
 800056c:	4825      	ldr	r0, [pc, #148]	; (8000604 <display7SEGSecondSet+0x244>)
 800056e:	f001 fe66 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000572:	2110      	movs	r1, #16
 8000574:	4823      	ldr	r0, [pc, #140]	; (8000604 <display7SEGSecondSet+0x244>)
 8000576:	f001 fe62 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 800057a:	2120      	movs	r1, #32
 800057c:	4821      	ldr	r0, [pc, #132]	; (8000604 <display7SEGSecondSet+0x244>)
 800057e:	f001 fe5e 	bl	800223e <HAL_GPIO_TogglePin>
}
 8000582:	e03a      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 8){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b08      	cmp	r3, #8
 8000588:	d11e      	bne.n	80005c8 <display7SEGSecondSet+0x208>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800058a:	2108      	movs	r1, #8
 800058c:	481d      	ldr	r0, [pc, #116]	; (8000604 <display7SEGSecondSet+0x244>)
 800058e:	f001 fe56 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000592:	2110      	movs	r1, #16
 8000594:	481b      	ldr	r0, [pc, #108]	; (8000604 <display7SEGSecondSet+0x244>)
 8000596:	f001 fe52 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 800059a:	2120      	movs	r1, #32
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <display7SEGSecondSet+0x244>)
 800059e:	f001 fe4e 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	4817      	ldr	r0, [pc, #92]	; (8000604 <display7SEGSecondSet+0x244>)
 80005a6:	f001 fe4a 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <display7SEGSecondSet+0x244>)
 80005ae:	f001 fe46 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 80005b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <display7SEGSecondSet+0x244>)
 80005b8:	f001 fe41 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 80005bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <display7SEGSecondSet+0x244>)
 80005c2:	f001 fe3c 	bl	800223e <HAL_GPIO_TogglePin>
}
 80005c6:	e018      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 9){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	d115      	bne.n	80005fa <display7SEGSecondSet+0x23a>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 80005ce:	2108      	movs	r1, #8
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <display7SEGSecondSet+0x244>)
 80005d2:	f001 fe34 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 80005d6:	2110      	movs	r1, #16
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <display7SEGSecondSet+0x244>)
 80005da:	f001 fe30 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 80005de:	2120      	movs	r1, #32
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <display7SEGSecondSet+0x244>)
 80005e2:	f001 fe2c 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <display7SEGSecondSet+0x244>)
 80005ec:	f001 fe27 	bl	800223e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <display7SEGSecondSet+0x244>)
 80005f6:	f001 fe22 	bl	800223e <HAL_GPIO_TogglePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010c00 	.word	0x40010c00

08000608 <update7SEGFirstSet>:

void update7SEGFirstSet ( int index,int first,int second) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
switch ( index ) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <update7SEGFirstSet+0x1a>
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d004      	beq.n	800062a <update7SEGFirstSet+0x22>
	case 1:
// Display the second 7 SEG with led_buffer [1]
		display7SEGFirstSet(second);
		break ;
	default :
		break ;
 8000620:	e007      	b.n	8000632 <update7SEGFirstSet+0x2a>
		display7SEGFirstSet(first);
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f7ff fd92 	bl	800014c <display7SEGFirstSet>
		break ;
 8000628:	e003      	b.n	8000632 <update7SEGFirstSet+0x2a>
		display7SEGFirstSet(second);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff fd8e 	bl	800014c <display7SEGFirstSet>
		break ;
 8000630:	bf00      	nop
	}
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <update7SEGSecondSet>:

void update7SEGSecondSet ( int index,int first,int second) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b084      	sub	sp, #16
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
switch ( index ) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <update7SEGSecondSet+0x1a>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d004      	beq.n	800065c <update7SEGSecondSet+0x22>
	case 1:
// Display the second 7 SEG with led_buffer [1]
		display7SEGSecondSet(second);
		break ;
	default :
		break ;
 8000652:	e007      	b.n	8000664 <update7SEGSecondSet+0x2a>
		display7SEGSecondSet(first);
 8000654:	68b8      	ldr	r0, [r7, #8]
 8000656:	f7ff feb3 	bl	80003c0 <display7SEGSecondSet>
		break ;
 800065a:	e003      	b.n	8000664 <update7SEGSecondSet+0x2a>
		display7SEGSecondSet(second);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff feaf 	bl	80003c0 <display7SEGSecondSet>
		break ;
 8000662:	bf00      	nop
	}
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <fsm_for_input_processing>:

enum ButtonState { BUTTON_RELEASED,BUTTON_PRESSED,BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
static enum ButtonState buttonState = BUTTON_RELEASED ;
static enum ButtonState buttonState1 = BUTTON_RELEASED ;
static enum ButtonState buttonState2 = BUTTON_RELEASED ;
void fsm_for_input_processing ( void ) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
switch ( buttonState ){
 8000670:	4b6f      	ldr	r3, [pc, #444]	; (8000830 <fsm_for_input_processing+0x1c4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d030      	beq.n	80006da <fsm_for_input_processing+0x6e>
 8000678:	2b02      	cmp	r3, #2
 800067a:	dc43      	bgt.n	8000704 <fsm_for_input_processing+0x98>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <fsm_for_input_processing+0x1a>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d010      	beq.n	80006a6 <fsm_for_input_processing+0x3a>
 8000684:	e03e      	b.n	8000704 <fsm_for_input_processing+0x98>
	case BUTTON_RELEASED :
		if( is_button_pressed (0) ) {
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f8da 	bl	8000840 <is_button_pressed>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d033      	beq.n	80006fa <fsm_for_input_processing+0x8e>
			buttonState = BUTTON_PRESSED ;
 8000692:	4b67      	ldr	r3, [pc, #412]	; (8000830 <fsm_for_input_processing+0x1c4>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin ( OUT13_GPIO_Port , OUT13_Pin ,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4865      	ldr	r0, [pc, #404]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80006a0:	f001 fdb5 	bl	800220e <HAL_GPIO_WritePin>
		// INCREASE VALUE OF PORT A BY ONE UNIT
		}
	break ;
 80006a4:	e029      	b.n	80006fa <fsm_for_input_processing+0x8e>
	case BUTTON_PRESSED :
		if (! is_button_pressed (0) ) {
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8ca 	bl	8000840 <is_button_pressed>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d109      	bne.n	80006c6 <fsm_for_input_processing+0x5a>
			HAL_GPIO_WritePin ( OUT13_GPIO_Port , OUT13_Pin ,GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	485e      	ldr	r0, [pc, #376]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80006ba:	f001 fda8 	bl	800220e <HAL_GPIO_WritePin>
			buttonState = BUTTON_RELEASED ;
 80006be:	4b5c      	ldr	r3, [pc, #368]	; (8000830 <fsm_for_input_processing+0x1c4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
			if( is_button_pressed_1s(0)) {

				buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
			}
		}
	break ;
 80006c4:	e01b      	b.n	80006fe <fsm_for_input_processing+0x92>
			if( is_button_pressed_1s(0)) {
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f8d4 	bl	8000874 <is_button_pressed_1s>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d015      	beq.n	80006fe <fsm_for_input_processing+0x92>
				buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 80006d2:	4b57      	ldr	r3, [pc, #348]	; (8000830 <fsm_for_input_processing+0x1c4>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	701a      	strb	r2, [r3, #0]
	break ;
 80006d8:	e011      	b.n	80006fe <fsm_for_input_processing+0x92>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND :
		if (! is_button_pressed (0) ) {
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f8b0 	bl	8000840 <is_button_pressed>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10d      	bne.n	8000702 <fsm_for_input_processing+0x96>
			HAL_GPIO_WritePin ( OUT13_GPIO_Port , OUT13_Pin ,GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ec:	4851      	ldr	r0, [pc, #324]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80006ee:	f001 fd8e 	bl	800220e <HAL_GPIO_WritePin>
			buttonState = BUTTON_RELEASED ;
 80006f2:	4b4f      	ldr	r3, [pc, #316]	; (8000830 <fsm_for_input_processing+0x1c4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
		}
	break ;
 80006f8:	e003      	b.n	8000702 <fsm_for_input_processing+0x96>
	break ;
 80006fa:	bf00      	nop
 80006fc:	e002      	b.n	8000704 <fsm_for_input_processing+0x98>
	break ;
 80006fe:	bf00      	nop
 8000700:	e000      	b.n	8000704 <fsm_for_input_processing+0x98>
	break ;
 8000702:	bf00      	nop
	}


switch ( buttonState1 ){
 8000704:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d030      	beq.n	800076e <fsm_for_input_processing+0x102>
 800070c:	2b02      	cmp	r3, #2
 800070e:	dc43      	bgt.n	8000798 <fsm_for_input_processing+0x12c>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <fsm_for_input_processing+0xae>
 8000714:	2b01      	cmp	r3, #1
 8000716:	d010      	beq.n	800073a <fsm_for_input_processing+0xce>
 8000718:	e03e      	b.n	8000798 <fsm_for_input_processing+0x12c>
	case BUTTON_RELEASED :
		if( is_button_pressed (1) ) {
 800071a:	2001      	movs	r0, #1
 800071c:	f000 f890 	bl	8000840 <is_button_pressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d033      	beq.n	800078e <fsm_for_input_processing+0x122>
			buttonState1 = BUTTON_PRESSED ;
 8000726:	4b44      	ldr	r3, [pc, #272]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin ( OUT14_GPIO_Port , OUT14_Pin ,GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000732:	4840      	ldr	r0, [pc, #256]	; (8000834 <fsm_for_input_processing+0x1c8>)
 8000734:	f001 fd6b 	bl	800220e <HAL_GPIO_WritePin>
		// INCREASE VALUE OF PORT A BY ONE UNIT
		}
	break ;
 8000738:	e029      	b.n	800078e <fsm_for_input_processing+0x122>
	case BUTTON_PRESSED :
		if (! is_button_pressed (1) ) {
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f880 	bl	8000840 <is_button_pressed>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d109      	bne.n	800075a <fsm_for_input_processing+0xee>
			HAL_GPIO_WritePin ( OUT14_GPIO_Port , OUT14_Pin ,GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074c:	4839      	ldr	r0, [pc, #228]	; (8000834 <fsm_for_input_processing+0x1c8>)
 800074e:	f001 fd5e 	bl	800220e <HAL_GPIO_WritePin>
			buttonState1 = BUTTON_RELEASED ;
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
			if( is_button_pressed_1s (1) ) {

				buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
			}
		}
	break ;
 8000758:	e01b      	b.n	8000792 <fsm_for_input_processing+0x126>
			if( is_button_pressed_1s (1) ) {
 800075a:	2001      	movs	r0, #1
 800075c:	f000 f88a 	bl	8000874 <is_button_pressed_1s>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d015      	beq.n	8000792 <fsm_for_input_processing+0x126>
				buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000768:	2202      	movs	r2, #2
 800076a:	701a      	strb	r2, [r3, #0]
	break ;
 800076c:	e011      	b.n	8000792 <fsm_for_input_processing+0x126>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND :
		if (! is_button_pressed (1) ) {
 800076e:	2001      	movs	r0, #1
 8000770:	f000 f866 	bl	8000840 <is_button_pressed>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10d      	bne.n	8000796 <fsm_for_input_processing+0x12a>
			HAL_GPIO_WritePin ( OUT14_GPIO_Port , OUT14_Pin ,GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000780:	482c      	ldr	r0, [pc, #176]	; (8000834 <fsm_for_input_processing+0x1c8>)
 8000782:	f001 fd44 	bl	800220e <HAL_GPIO_WritePin>
			buttonState1 = BUTTON_RELEASED ;
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		}
	break ;
 800078c:	e003      	b.n	8000796 <fsm_for_input_processing+0x12a>
	break ;
 800078e:	bf00      	nop
 8000790:	e002      	b.n	8000798 <fsm_for_input_processing+0x12c>
	break ;
 8000792:	bf00      	nop
 8000794:	e000      	b.n	8000798 <fsm_for_input_processing+0x12c>
	break ;
 8000796:	bf00      	nop
	}



switch ( buttonState2 ){
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <fsm_for_input_processing+0x1d0>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d030      	beq.n	8000802 <fsm_for_input_processing+0x196>
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	dc43      	bgt.n	800082c <fsm_for_input_processing+0x1c0>
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <fsm_for_input_processing+0x142>
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d010      	beq.n	80007ce <fsm_for_input_processing+0x162>
		}
	break ;
	}


}
 80007ac:	e03e      	b.n	800082c <fsm_for_input_processing+0x1c0>
		if( is_button_pressed (2) ) {
 80007ae:	2002      	movs	r0, #2
 80007b0:	f000 f846 	bl	8000840 <is_button_pressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d033      	beq.n	8000822 <fsm_for_input_processing+0x1b6>
			buttonState2 = BUTTON_PRESSED ;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <fsm_for_input_processing+0x1d0>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin ( OUT15_GPIO_Port , OUT15_Pin ,GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c6:	481b      	ldr	r0, [pc, #108]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80007c8:	f001 fd21 	bl	800220e <HAL_GPIO_WritePin>
	break ;
 80007cc:	e029      	b.n	8000822 <fsm_for_input_processing+0x1b6>
		if (! is_button_pressed (2) ) {
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 f836 	bl	8000840 <is_button_pressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d109      	bne.n	80007ee <fsm_for_input_processing+0x182>
			HAL_GPIO_WritePin ( OUT15_GPIO_Port , OUT15_Pin ,GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80007e2:	f001 fd14 	bl	800220e <HAL_GPIO_WritePin>
			buttonState2 = BUTTON_RELEASED ;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <fsm_for_input_processing+0x1d0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	break ;
 80007ec:	e01b      	b.n	8000826 <fsm_for_input_processing+0x1ba>
			if( is_button_pressed_1s (2) ) {
 80007ee:	2002      	movs	r0, #2
 80007f0:	f000 f840 	bl	8000874 <is_button_pressed_1s>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d015      	beq.n	8000826 <fsm_for_input_processing+0x1ba>
				buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <fsm_for_input_processing+0x1d0>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	701a      	strb	r2, [r3, #0]
	break ;
 8000800:	e011      	b.n	8000826 <fsm_for_input_processing+0x1ba>
		if (! is_button_pressed (2) ) {
 8000802:	2002      	movs	r0, #2
 8000804:	f000 f81c 	bl	8000840 <is_button_pressed>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10d      	bne.n	800082a <fsm_for_input_processing+0x1be>
			HAL_GPIO_WritePin ( OUT15_GPIO_Port , OUT15_Pin ,GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <fsm_for_input_processing+0x1c8>)
 8000816:	f001 fcfa 	bl	800220e <HAL_GPIO_WritePin>
			buttonState2 = BUTTON_RELEASED ;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <fsm_for_input_processing+0x1d0>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	break ;
 8000820:	e003      	b.n	800082a <fsm_for_input_processing+0x1be>
	break ;
 8000822:	bf00      	nop
 8000824:	e002      	b.n	800082c <fsm_for_input_processing+0x1c0>
	break ;
 8000826:	bf00      	nop
 8000828:	e000      	b.n	800082c <fsm_for_input_processing+0x1c0>
	break ;
 800082a:	bf00      	nop
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000048 	.word	0x20000048
 8000834:	40010800 	.word	0x40010800
 8000838:	20000049 	.word	0x20000049
 800083c:	2000004a 	.word	0x2000004a

08000840 <is_button_pressed>:
static uint8_t flagForButtonPress1s [ N0_OF_BUTTONS ];
static uint16_t counterForButtonPress1s [ N0_OF_BUTTONS ];



unsigned char is_button_pressed ( uint8_t index ) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d901      	bls.n	8000854 <is_button_pressed+0x14>
 8000850:	2300      	movs	r3, #0
 8000852:	e007      	b.n	8000864 <is_button_pressed+0x24>
	return ( buttonBuffer [index] == BUTTON_IS_PRESSED ) ;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a06      	ldr	r2, [pc, #24]	; (8000870 <is_button_pressed+0x30>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	2000004c 	.word	0x2000004c

08000874 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s ( unsigned char index ) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff ;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d901      	bls.n	8000888 <is_button_pressed_1s+0x14>
 8000884:	23ff      	movs	r3, #255	; 0xff
 8000886:	e007      	b.n	8000898 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s [ index ] == 1) ;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <is_button_pressed_1s+0x30>)
 800088c:	5cd3      	ldrb	r3, [r2, r3]
 800088e:	2b01      	cmp	r3, #1
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000058 	.word	0x20000058

080008a8 <button_reading>:


void button_reading ( void ) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
		debounceButtonBuffer2[0] = debounceButtonBuffer1[0];
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <button_reading+0xcc>)
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <button_reading+0xd0>)
 80008b4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[0] = HAL_GPIO_ReadPin (BUTTON_GPIO_Port , BUTTON_Pin ) ;
 80008b6:	2101      	movs	r1, #1
 80008b8:	4830      	ldr	r0, [pc, #192]	; (800097c <button_reading+0xd4>)
 80008ba:	f001 fc91 	bl	80021e0 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <button_reading+0xcc>)
 80008c4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[1] = debounceButtonBuffer1[1];
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <button_reading+0xcc>)
 80008c8:	785a      	ldrb	r2, [r3, #1]
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <button_reading+0xd0>)
 80008cc:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer1[1] = HAL_GPIO_ReadPin (BUTTON1_GPIO_Port , BUTTON1_Pin ) ;
 80008ce:	2102      	movs	r1, #2
 80008d0:	482a      	ldr	r0, [pc, #168]	; (800097c <button_reading+0xd4>)
 80008d2:	f001 fc85 	bl	80021e0 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <button_reading+0xcc>)
 80008dc:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer2[2] = debounceButtonBuffer1[2];
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <button_reading+0xcc>)
 80008e0:	789a      	ldrb	r2, [r3, #2]
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <button_reading+0xd0>)
 80008e4:	709a      	strb	r2, [r3, #2]
		debounceButtonBuffer1[2] = HAL_GPIO_ReadPin (BUTTON2_GPIO_Port , BUTTON2_Pin ) ;
 80008e6:	2104      	movs	r1, #4
 80008e8:	4824      	ldr	r0, [pc, #144]	; (800097c <button_reading+0xd4>)
 80008ea:	f001 fc79 	bl	80021e0 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <button_reading+0xcc>)
 80008f4:	709a      	strb	r2, [r3, #2]

		for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e033      	b.n	8000964 <button_reading+0xbc>
			if( debounceButtonBuffer1 [i] == debounceButtonBuffer2[i]){
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <button_reading+0xcc>)
 8000900:	5cd2      	ldrb	r2, [r2, r3]
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	491c      	ldr	r1, [pc, #112]	; (8000978 <button_reading+0xd0>)
 8000906:	5ccb      	ldrb	r3, [r1, r3]
 8000908:	429a      	cmp	r2, r3
 800090a:	d128      	bne.n	800095e <button_reading+0xb6>
				buttonBuffer[i] = debounceButtonBuffer1 [i];
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4918      	ldr	r1, [pc, #96]	; (8000974 <button_reading+0xcc>)
 8000912:	5c89      	ldrb	r1, [r1, r2]
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <button_reading+0xd8>)
 8000916:	54d1      	strb	r1, [r2, r3]
				if( buttonBuffer[i] == BUTTON_IS_PRESSED ) {
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <button_reading+0xd8>)
 800091c:	5cd3      	ldrb	r3, [r2, r3]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d114      	bne.n	800094c <button_reading+0xa4>
					if( counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING ) {
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <button_reading+0xdc>)
 8000926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092a:	2b63      	cmp	r3, #99	; 0x63
 800092c:	d809      	bhi.n	8000942 <button_reading+0x9a>
						counterForButtonPress1s[i]++;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <button_reading+0xdc>)
 8000932:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000936:	3201      	adds	r2, #1
 8000938:	b291      	uxth	r1, r2
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <button_reading+0xdc>)
 800093c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000940:	e00d      	b.n	800095e <button_reading+0xb6>
					}
					else {
						flagForButtonPress1s[i] = 1;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a10      	ldr	r2, [pc, #64]	; (8000988 <button_reading+0xe0>)
 8000946:	2101      	movs	r1, #1
 8000948:	54d1      	strb	r1, [r2, r3]
 800094a:	e008      	b.n	800095e <button_reading+0xb6>
					}
				}
				else {
					counterForButtonPress1s[i] = 0;
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <button_reading+0xdc>)
 8000950:	2100      	movs	r1, #0
 8000952:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress1s[i] = 0;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <button_reading+0xe0>)
 800095a:	2100      	movs	r1, #0
 800095c:	54d1      	strb	r1, [r2, r3]
		for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3301      	adds	r3, #1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d9c8      	bls.n	80008fc <button_reading+0x54>
			}
		}



}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000050 	.word	0x20000050
 8000978:	20000054 	.word	0x20000054
 800097c:	40010c00 	.word	0x40010c00
 8000980:	2000004c 	.word	0x2000004c
 8000984:	2000005c 	.word	0x2000005c
 8000988:	20000058 	.word	0x20000058

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b090      	sub	sp, #64	; 0x40
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f001 f93b 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */
  //
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 ff4f 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 ffd5 	bl	8001948 <MX_GPIO_Init>
  MX_TIM2_Init();
 800099e:	f000 ff87 	bl	80018b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	#define GREEN 3
	#define RED 5
	#define YELLOW 2
	#define Tick 10
	int TicktoSecond = 1000/Tick;
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	607b      	str	r3, [r7, #4]
	int TotalTime = GREEN + RED+ YELLOW;
 80009a6:	230a      	movs	r3, #10
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	static int TotalTime2 = GREEN + RED + YELLOW;
	static int Intitalizer = 0;
	int R,G,Y;
	int R1,G1,Y1,R2,G2,Y2;
	int LEDindex = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
	static int LEDindex1 = 0;
	static int LEDfirstSetNum = 0;
	int LEDSecondSetNum = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
	static int YELLOW1 = YELLOW;
	static int TempRED1 = RED;
	static int TempGREEN1 = GREEN;
	static int TempYELLOW1 = YELLOW;
	extern int timer0_flag;
	setTimer0(10);
 80009b2:	200a      	movs	r0, #10
 80009b4:	f001 f8be 	bl	8001b34 <setTimer0>
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80009b8:	4885      	ldr	r0, [pc, #532]	; (8000bd0 <main+0x244>)
 80009ba:	f002 f885 	bl	8002ac8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer0_flag == 1) {
 80009be:	4b85      	ldr	r3, [pc, #532]	; (8000bd4 <main+0x248>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d1fb      	bne.n	80009be <main+0x32>
    /* USER CODE END WHILE */
	  fsm_for_input_processing ();
 80009c6:	f7ff fe51 	bl	800066c <fsm_for_input_processing>
		if (Intitalizer == 0){
 80009ca:	4b83      	ldr	r3, [pc, #524]	; (8000bd8 <main+0x24c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d14f      	bne.n	8000a72 <main+0xe6>
			TotalTime2 = TotalTime2*TicktoSecond;
 80009d2:	4b82      	ldr	r3, [pc, #520]	; (8000bdc <main+0x250>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	fb02 f303 	mul.w	r3, r2, r3
 80009dc:	4a7f      	ldr	r2, [pc, #508]	; (8000bdc <main+0x250>)
 80009de:	6013      	str	r3, [r2, #0]
			TotalTime = TotalTime*TicktoSecond;
 80009e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	fb02 f303 	mul.w	r3, r2, r3
 80009e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			R = RED1*TicktoSecond;
 80009ea:	4b7d      	ldr	r3, [pc, #500]	; (8000be0 <main+0x254>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
			G = GREEN1*TicktoSecond;
 80009f6:	4b7b      	ldr	r3, [pc, #492]	; (8000be4 <main+0x258>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
			Y = YELLOW1*TicktoSecond;
 8000a02:	4b79      	ldr	r3, [pc, #484]	; (8000be8 <main+0x25c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	fb02 f303 	mul.w	r3, r2, r3
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
			R1 = RED1;
 8000a0e:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <main+0x254>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
			G1 = GREEN1;
 8000a14:	4b73      	ldr	r3, [pc, #460]	; (8000be4 <main+0x258>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
			Y1 = YELLOW1;
 8000a1a:	4b73      	ldr	r3, [pc, #460]	; (8000be8 <main+0x25c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
			R2 = RED1;
 8000a20:	4b6f      	ldr	r3, [pc, #444]	; (8000be0 <main+0x254>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	623b      	str	r3, [r7, #32]
			G2 = GREEN1;
 8000a26:	4b6f      	ldr	r3, [pc, #444]	; (8000be4 <main+0x258>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	61fb      	str	r3, [r7, #28]
			Y2 = YELLOW1;
 8000a2c:	4b6e      	ldr	r3, [pc, #440]	; (8000be8 <main+0x25c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	61bb      	str	r3, [r7, #24]
			DisplayCycleTime = TicktoSecond / 2;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	0fda      	lsrs	r2, r3, #31
 8000a36:	4413      	add	r3, r2
 8000a38:	105b      	asrs	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
			DisplayCycleTime1 = DisplayCycleTime;
 8000a3c:	4a6b      	ldr	r2, [pc, #428]	; (8000bec <main+0x260>)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6013      	str	r3, [r2, #0]
			Intitalizer = 1;
 8000a42:	4b65      	ldr	r3, [pc, #404]	; (8000bd8 <main+0x24c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
			debounce = TicktoSecond/2;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	0fda      	lsrs	r2, r3, #31
 8000a4c:	4413      	add	r3, r2
 8000a4e:	105b      	asrs	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
			debounce1 = debounce;
 8000a52:	4a67      	ldr	r2, [pc, #412]	; (8000bf0 <main+0x264>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	6013      	str	r3, [r2, #0]
			debounce2 = debounce;
 8000a58:	4a66      	ldr	r2, [pc, #408]	; (8000bf4 <main+0x268>)
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	6013      	str	r3, [r2, #0]
			debounce3 = debounce;
 8000a5e:	4a66      	ldr	r2, [pc, #408]	; (8000bf8 <main+0x26c>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	6013      	str	r3, [r2, #0]
			SecondCount = TicktoSecond/2;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	0fda      	lsrs	r2, r3, #31
 8000a68:	4413      	add	r3, r2
 8000a6a:	105b      	asrs	r3, r3, #1
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <main+0x270>)
 8000a70:	601a      	str	r2, [r3, #0]
		}

		if ( HAL_GPIO_ReadPin (OUT13_GPIO_Port , OUT13_Pin) == GPIO_PIN_RESET && debounce1>= debounce){
 8000a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a76:	4862      	ldr	r0, [pc, #392]	; (8000c00 <main+0x274>)
 8000a78:	f001 fbb2 	bl	80021e0 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8108 	bne.w	8000c94 <main+0x308>
 8000a84:	4b5a      	ldr	r3, [pc, #360]	; (8000bf0 <main+0x264>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	f300 8102 	bgt.w	8000c94 <main+0x308>
			if (Mode == 0){
 8000a90:	4b5c      	ldr	r3, [pc, #368]	; (8000c04 <main+0x278>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d130      	bne.n	8000afa <main+0x16e>
				HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4858      	ldr	r0, [pc, #352]	; (8000c00 <main+0x274>)
 8000a9e:	f001 fbb6 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4856      	ldr	r0, [pc, #344]	; (8000c00 <main+0x274>)
 8000aa8:	f001 fbb1 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2104      	movs	r1, #4
 8000ab0:	4853      	ldr	r0, [pc, #332]	; (8000c00 <main+0x274>)
 8000ab2:	f001 fbac 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2108      	movs	r1, #8
 8000aba:	4851      	ldr	r0, [pc, #324]	; (8000c00 <main+0x274>)
 8000abc:	f001 fba7 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	484e      	ldr	r0, [pc, #312]	; (8000c00 <main+0x274>)
 8000ac6:	f001 fba2 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	484c      	ldr	r0, [pc, #304]	; (8000c00 <main+0x274>)
 8000ad0:	f001 fb9d 	bl	800220e <HAL_GPIO_WritePin>
				flipflop = 0;
 8000ad4:	4b4c      	ldr	r3, [pc, #304]	; (8000c08 <main+0x27c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
				flipflop1 = 0;
 8000ada:	4b4c      	ldr	r3, [pc, #304]	; (8000c0c <main+0x280>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
				Mode++;
 8000ae0:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <main+0x278>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a47      	ldr	r2, [pc, #284]	; (8000c04 <main+0x278>)
 8000ae8:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = RED1;
 8000aea:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <main+0x254>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <main+0x284>)
 8000af0:	6013      	str	r3, [r2, #0]
				LEDSecondSetNum = Mode;
 8000af2:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <main+0x278>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	e0c9      	b.n	8000c8e <main+0x302>
			}
			else if (Mode == 1){
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <main+0x278>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d130      	bne.n	8000b64 <main+0x1d8>
				HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2101      	movs	r1, #1
 8000b06:	483e      	ldr	r0, [pc, #248]	; (8000c00 <main+0x274>)
 8000b08:	f001 fb81 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2102      	movs	r1, #2
 8000b10:	483b      	ldr	r0, [pc, #236]	; (8000c00 <main+0x274>)
 8000b12:	f001 fb7c 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4839      	ldr	r0, [pc, #228]	; (8000c00 <main+0x274>)
 8000b1c:	f001 fb77 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2108      	movs	r1, #8
 8000b24:	4836      	ldr	r0, [pc, #216]	; (8000c00 <main+0x274>)
 8000b26:	f001 fb72 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4834      	ldr	r0, [pc, #208]	; (8000c00 <main+0x274>)
 8000b30:	f001 fb6d 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2120      	movs	r1, #32
 8000b38:	4831      	ldr	r0, [pc, #196]	; (8000c00 <main+0x274>)
 8000b3a:	f001 fb68 	bl	800220e <HAL_GPIO_WritePin>
				flipflop = 0;
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <main+0x27c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
				flipflop1 = 0;
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <main+0x280>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
				Mode++;
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <main+0x278>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a2c      	ldr	r2, [pc, #176]	; (8000c04 <main+0x278>)
 8000b52:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = YELLOW1;
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <main+0x25c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <main+0x284>)
 8000b5a:	6013      	str	r3, [r2, #0]
				LEDSecondSetNum = Mode;
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <main+0x278>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	e094      	b.n	8000c8e <main+0x302>
			}
			else if (Mode == 2){
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <main+0x278>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d153      	bne.n	8000c14 <main+0x288>
				HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4823      	ldr	r0, [pc, #140]	; (8000c00 <main+0x274>)
 8000b72:	f001 fb4c 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4821      	ldr	r0, [pc, #132]	; (8000c00 <main+0x274>)
 8000b7c:	f001 fb47 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2104      	movs	r1, #4
 8000b84:	481e      	ldr	r0, [pc, #120]	; (8000c00 <main+0x274>)
 8000b86:	f001 fb42 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	481c      	ldr	r0, [pc, #112]	; (8000c00 <main+0x274>)
 8000b90:	f001 fb3d 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2110      	movs	r1, #16
 8000b98:	4819      	ldr	r0, [pc, #100]	; (8000c00 <main+0x274>)
 8000b9a:	f001 fb38 	bl	800220e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4817      	ldr	r0, [pc, #92]	; (8000c00 <main+0x274>)
 8000ba4:	f001 fb33 	bl	800220e <HAL_GPIO_WritePin>
				flipflop = 0;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <main+0x27c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
				flipflop1 = 0;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <main+0x280>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
				Mode++;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <main+0x278>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <main+0x278>)
 8000bbc:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = GREEN1;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <main+0x258>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <main+0x284>)
 8000bc4:	6013      	str	r3, [r2, #0]
				LEDSecondSetNum = Mode;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <main+0x278>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	e05f      	b.n	8000c8e <main+0x302>
 8000bce:	bf00      	nop
 8000bd0:	20000098 	.word	0x20000098
 8000bd4:	20000094 	.word	0x20000094
 8000bd8:	20000064 	.word	0x20000064
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004
 8000be4:	20000008 	.word	0x20000008
 8000be8:	2000000c 	.word	0x2000000c
 8000bec:	20000068 	.word	0x20000068
 8000bf0:	2000006c 	.word	0x2000006c
 8000bf4:	20000070 	.word	0x20000070
 8000bf8:	20000074 	.word	0x20000074
 8000bfc:	20000078 	.word	0x20000078
 8000c00:	40010800 	.word	0x40010800
 8000c04:	2000007c 	.word	0x2000007c
 8000c08:	20000080 	.word	0x20000080
 8000c0c:	20000084 	.word	0x20000084
 8000c10:	20000088 	.word	0x20000088
			}
			else{
				TotalTime = (RED1 + GREEN1 + YELLOW1)*TicktoSecond;
 8000c14:	4b99      	ldr	r3, [pc, #612]	; (8000e7c <main+0x4f0>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b99      	ldr	r3, [pc, #612]	; (8000e80 <main+0x4f4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	4b99      	ldr	r3, [pc, #612]	; (8000e84 <main+0x4f8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	441a      	add	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	fb02 f303 	mul.w	r3, r2, r3
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
				TotalTime2 = TotalTime;
 8000c2c:	4a96      	ldr	r2, [pc, #600]	; (8000e88 <main+0x4fc>)
 8000c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c30:	6013      	str	r3, [r2, #0]
				R1 = RED1;
 8000c32:	4b92      	ldr	r3, [pc, #584]	; (8000e7c <main+0x4f0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
				G1 = GREEN1;
 8000c38:	4b91      	ldr	r3, [pc, #580]	; (8000e80 <main+0x4f4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
				Y1 = YELLOW1;
 8000c3e:	4b91      	ldr	r3, [pc, #580]	; (8000e84 <main+0x4f8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
				R2 = RED1;
 8000c44:	4b8d      	ldr	r3, [pc, #564]	; (8000e7c <main+0x4f0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	623b      	str	r3, [r7, #32]
				G2 = GREEN1;
 8000c4a:	4b8d      	ldr	r3, [pc, #564]	; (8000e80 <main+0x4f4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	61fb      	str	r3, [r7, #28]
				Y2 = YELLOW1;
 8000c50:	4b8c      	ldr	r3, [pc, #560]	; (8000e84 <main+0x4f8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	61bb      	str	r3, [r7, #24]
				LEDindex = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
				LEDindex1 = 0;
 8000c5a:	4b8c      	ldr	r3, [pc, #560]	; (8000e8c <main+0x500>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
				LEDfirstSetNum = 0;
 8000c60:	4b8b      	ldr	r3, [pc, #556]	; (8000e90 <main+0x504>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
				LEDSecondSetNum = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
				DisplayCycleTime1 = DisplayCycleTime;
 8000c6a:	4a8a      	ldr	r2, [pc, #552]	; (8000e94 <main+0x508>)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6013      	str	r3, [r2, #0]
				TempRED1 = RED1;
 8000c70:	4b82      	ldr	r3, [pc, #520]	; (8000e7c <main+0x4f0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a88      	ldr	r2, [pc, #544]	; (8000e98 <main+0x50c>)
 8000c76:	6013      	str	r3, [r2, #0]
				TempYELLOW1 = YELLOW1;
 8000c78:	4b82      	ldr	r3, [pc, #520]	; (8000e84 <main+0x4f8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a87      	ldr	r2, [pc, #540]	; (8000e9c <main+0x510>)
 8000c7e:	6013      	str	r3, [r2, #0]
				TempGREEN1 = GREEN1;
 8000c80:	4b7f      	ldr	r3, [pc, #508]	; (8000e80 <main+0x4f4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a86      	ldr	r2, [pc, #536]	; (8000ea0 <main+0x514>)
 8000c86:	6013      	str	r3, [r2, #0]
				Mode = 0;
 8000c88:	4b86      	ldr	r3, [pc, #536]	; (8000ea4 <main+0x518>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
			}
			debounce1 = 0;
 8000c8e:	4b86      	ldr	r3, [pc, #536]	; (8000ea8 <main+0x51c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
		}
		debounce1++;
 8000c94:	4b84      	ldr	r3, [pc, #528]	; (8000ea8 <main+0x51c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a83      	ldr	r2, [pc, #524]	; (8000ea8 <main+0x51c>)
 8000c9c:	6013      	str	r3, [r2, #0]
		switch(Mode){
 8000c9e:	4b81      	ldr	r3, [pc, #516]	; (8000ea4 <main+0x518>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	f200 85ab 	bhi.w	80017fe <main+0xe72>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <main+0x324>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08001129 	.word	0x08001129
 8000cb8:	08001381 	.word	0x08001381
 8000cbc:	080015d9 	.word	0x080015d9
			case 0:
				if( TotalTime2 <= TotalTime && TotalTime2 > TotalTime - R) {
 8000cc0:	4b71      	ldr	r3, [pc, #452]	; (8000e88 <main+0x4fc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	db16      	blt.n	8000cf8 <main+0x36c>
 8000cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <main+0x4fc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	da0f      	bge.n	8000cf8 <main+0x36c>
					HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4873      	ldr	r0, [pc, #460]	; (8000eac <main+0x520>)
 8000cde:	f001 fa96 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4871      	ldr	r0, [pc, #452]	; (8000eac <main+0x520>)
 8000ce8:	f001 fa91 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2104      	movs	r1, #4
 8000cf0:	486e      	ldr	r0, [pc, #440]	; (8000eac <main+0x520>)
 8000cf2:	f001 fa8c 	bl	800220e <HAL_GPIO_WritePin>
 8000cf6:	e03b      	b.n	8000d70 <main+0x3e4>

				}
				else if (TotalTime2 <= TotalTime - R && TotalTime2 > TotalTime - R - G){
 8000cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cfc:	1ad2      	subs	r2, r2, r3
 8000cfe:	4b62      	ldr	r3, [pc, #392]	; (8000e88 <main+0x4fc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	db18      	blt.n	8000d38 <main+0x3ac>
 8000d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d0a:	1ad2      	subs	r2, r2, r3
 8000d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0e:	1ad2      	subs	r2, r2, r3
 8000d10:	4b5d      	ldr	r3, [pc, #372]	; (8000e88 <main+0x4fc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	da0f      	bge.n	8000d38 <main+0x3ac>
					HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4863      	ldr	r0, [pc, #396]	; (8000eac <main+0x520>)
 8000d1e:	f001 fa76 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2102      	movs	r1, #2
 8000d26:	4861      	ldr	r0, [pc, #388]	; (8000eac <main+0x520>)
 8000d28:	f001 fa71 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2104      	movs	r1, #4
 8000d30:	485e      	ldr	r0, [pc, #376]	; (8000eac <main+0x520>)
 8000d32:	f001 fa6c 	bl	800220e <HAL_GPIO_WritePin>
 8000d36:	e01b      	b.n	8000d70 <main+0x3e4>
				}
				else if (TotalTime2 <= TotalTime - R - G && TotalTime2 > 0){
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d3c:	1ad2      	subs	r2, r2, r3
 8000d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d40:	1ad2      	subs	r2, r2, r3
 8000d42:	4b51      	ldr	r3, [pc, #324]	; (8000e88 <main+0x4fc>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	db12      	blt.n	8000d70 <main+0x3e4>
 8000d4a:	4b4f      	ldr	r3, [pc, #316]	; (8000e88 <main+0x4fc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	dd0e      	ble.n	8000d70 <main+0x3e4>
					HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2101      	movs	r1, #1
 8000d56:	4855      	ldr	r0, [pc, #340]	; (8000eac <main+0x520>)
 8000d58:	f001 fa59 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4852      	ldr	r0, [pc, #328]	; (8000eac <main+0x520>)
 8000d62:	f001 fa54 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4850      	ldr	r0, [pc, #320]	; (8000eac <main+0x520>)
 8000d6c:	f001 fa4f 	bl	800220e <HAL_GPIO_WritePin>
				}
				if (TotalTime2 % TicktoSecond == 0){
 8000d70:	4b45      	ldr	r3, [pc, #276]	; (8000e88 <main+0x4fc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	fb93 f2f2 	sdiv	r2, r3, r2
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	fb01 f202 	mul.w	r2, r1, r2
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d178      	bne.n	8000e78 <main+0x4ec>
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d027      	beq.n	8000ddc <main+0x450>
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	dc33      	bgt.n	8000dfa <main+0x46e>
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <main+0x414>
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d00f      	beq.n	8000dbe <main+0x432>
								LEDindex = 0;
								Y1 = YELLOW1;
							}
							break ;
						default :
							break ;
 8000d9e:	e02c      	b.n	8000dfa <main+0x46e>
							LEDfirstSetNum = R1;
 8000da0:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <main+0x504>)
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	6013      	str	r3, [r2, #0]
							R1--;
 8000da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da8:	3b01      	subs	r3, #1
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
							if (R1 == 0){
 8000dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d125      	bne.n	8000dfe <main+0x472>
								LEDindex = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
								R1 = RED1;
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <main+0x4f0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
							break ;
 8000dbc:	e01f      	b.n	8000dfe <main+0x472>
							LEDfirstSetNum = G1;
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <main+0x504>)
 8000dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc2:	6013      	str	r3, [r2, #0]
							G1--;
 8000dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
							if (G1 == 0){
 8000dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d118      	bne.n	8000e02 <main+0x476>
								LEDindex = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	617b      	str	r3, [r7, #20]
								G1 = GREEN1;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <main+0x4f4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
							break ;
 8000dda:	e012      	b.n	8000e02 <main+0x476>
							LEDfirstSetNum = Y1;
 8000ddc:	4a2c      	ldr	r2, [pc, #176]	; (8000e90 <main+0x504>)
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	6013      	str	r3, [r2, #0]
							Y1--;
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	3b01      	subs	r3, #1
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
							if (Y1 == 0){
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10b      	bne.n	8000e06 <main+0x47a>
								LEDindex = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
								Y1 = YELLOW1;
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <main+0x4f8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
							break ;
 8000df8:	e005      	b.n	8000e06 <main+0x47a>
							break ;
 8000dfa:	bf00      	nop
 8000dfc:	e004      	b.n	8000e08 <main+0x47c>
							break ;
 8000dfe:	bf00      	nop
 8000e00:	e002      	b.n	8000e08 <main+0x47c>
							break ;
 8000e02:	bf00      	nop
 8000e04:	e000      	b.n	8000e08 <main+0x47c>
							break ;
 8000e06:	bf00      	nop
						}
					switch (LEDindex1) {
 8000e08:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <main+0x500>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d024      	beq.n	8000e5a <main+0x4ce>
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	dc4d      	bgt.n	8000eb0 <main+0x524>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <main+0x492>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d00f      	beq.n	8000e3c <main+0x4b0>
								LEDindex1 = 0;
								R2 = RED1;
							}
							break ;
						default :
							break ;
 8000e1c:	e048      	b.n	8000eb0 <main+0x524>
							LEDSecondSetNum = G2;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	613b      	str	r3, [r7, #16]
							G2--;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
							if (G2 == 0){
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d142      	bne.n	8000eb4 <main+0x528>
								LEDindex1 = 1;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <main+0x500>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
								G2 = GREEN1;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <main+0x4f4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61fb      	str	r3, [r7, #28]
							break ;
 8000e3a:	e03b      	b.n	8000eb4 <main+0x528>
							LEDSecondSetNum = Y2;
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	613b      	str	r3, [r7, #16]
							Y2--;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	61bb      	str	r3, [r7, #24]
							if (Y2 == 0){
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d135      	bne.n	8000eb8 <main+0x52c>
								LEDindex1 = 2;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <main+0x500>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	601a      	str	r2, [r3, #0]
								Y2 = YELLOW1;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <main+0x4f8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	61bb      	str	r3, [r7, #24]
							break ;
 8000e58:	e02e      	b.n	8000eb8 <main+0x52c>
							LEDSecondSetNum = R2;
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	613b      	str	r3, [r7, #16]
							R2--;
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
							if (R2 == 0){
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d128      	bne.n	8000ebc <main+0x530>
								LEDindex1 = 0;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <main+0x500>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
								R2 = RED1;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <main+0x4f0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	623b      	str	r3, [r7, #32]
							break ;
 8000e76:	e021      	b.n	8000ebc <main+0x530>
						}

					}
 8000e78:	bf00      	nop
 8000e7a:	e020      	b.n	8000ebe <main+0x532>
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	20000008 	.word	0x20000008
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	2000008c 	.word	0x2000008c
 8000e90:	20000088 	.word	0x20000088
 8000e94:	20000068 	.word	0x20000068
 8000e98:	20000010 	.word	0x20000010
 8000e9c:	20000014 	.word	0x20000014
 8000ea0:	20000018 	.word	0x20000018
 8000ea4:	2000007c 	.word	0x2000007c
 8000ea8:	2000006c 	.word	0x2000006c
 8000eac:	40010800 	.word	0x40010800
							break ;
 8000eb0:	bf00      	nop
 8000eb2:	e004      	b.n	8000ebe <main+0x532>
							break ;
 8000eb4:	bf00      	nop
 8000eb6:	e002      	b.n	8000ebe <main+0x532>
							break ;
 8000eb8:	bf00      	nop
 8000eba:	e000      	b.n	8000ebe <main+0x532>
							break ;
 8000ebc:	bf00      	nop


				if( TotalTime2 <= TotalTime && TotalTime2 > TotalTime - G) {
 8000ebe:	4b92      	ldr	r3, [pc, #584]	; (8001108 <main+0x77c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	db16      	blt.n	8000ef6 <main+0x56a>
 8000ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ecc:	1ad2      	subs	r2, r2, r3
 8000ece:	4b8e      	ldr	r3, [pc, #568]	; (8001108 <main+0x77c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	da0f      	bge.n	8000ef6 <main+0x56a>
					HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2108      	movs	r1, #8
 8000eda:	488c      	ldr	r0, [pc, #560]	; (800110c <main+0x780>)
 8000edc:	f001 f997 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4889      	ldr	r0, [pc, #548]	; (800110c <main+0x780>)
 8000ee6:	f001 f992 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2120      	movs	r1, #32
 8000eee:	4887      	ldr	r0, [pc, #540]	; (800110c <main+0x780>)
 8000ef0:	f001 f98d 	bl	800220e <HAL_GPIO_WritePin>
 8000ef4:	e03b      	b.n	8000f6e <main+0x5e2>
				}
				else if (TotalTime2 <= TotalTime - G && TotalTime2 > TotalTime - Y - G){
 8000ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efa:	1ad2      	subs	r2, r2, r3
 8000efc:	4b82      	ldr	r3, [pc, #520]	; (8001108 <main+0x77c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	db18      	blt.n	8000f36 <main+0x5aa>
 8000f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f08:	1ad2      	subs	r2, r2, r3
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0c:	1ad2      	subs	r2, r2, r3
 8000f0e:	4b7e      	ldr	r3, [pc, #504]	; (8001108 <main+0x77c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	da0f      	bge.n	8000f36 <main+0x5aa>
					HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2108      	movs	r1, #8
 8000f1a:	487c      	ldr	r0, [pc, #496]	; (800110c <main+0x780>)
 8000f1c:	f001 f977 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2110      	movs	r1, #16
 8000f24:	4879      	ldr	r0, [pc, #484]	; (800110c <main+0x780>)
 8000f26:	f001 f972 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	4877      	ldr	r0, [pc, #476]	; (800110c <main+0x780>)
 8000f30:	f001 f96d 	bl	800220e <HAL_GPIO_WritePin>
 8000f34:	e01b      	b.n	8000f6e <main+0x5e2>
				}
				else if (TotalTime2 <= TotalTime - Y - G && TotalTime2 > 0){
 8000f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3e:	1ad2      	subs	r2, r2, r3
 8000f40:	4b71      	ldr	r3, [pc, #452]	; (8001108 <main+0x77c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	db12      	blt.n	8000f6e <main+0x5e2>
 8000f48:	4b6f      	ldr	r3, [pc, #444]	; (8001108 <main+0x77c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	dd0e      	ble.n	8000f6e <main+0x5e2>
					HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2108      	movs	r1, #8
 8000f54:	486d      	ldr	r0, [pc, #436]	; (800110c <main+0x780>)
 8000f56:	f001 f95a 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	486b      	ldr	r0, [pc, #428]	; (800110c <main+0x780>)
 8000f60:	f001 f955 	bl	800220e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2120      	movs	r1, #32
 8000f68:	4868      	ldr	r0, [pc, #416]	; (800110c <main+0x780>)
 8000f6a:	f001 f950 	bl	800220e <HAL_GPIO_WritePin>
				}

				if (DisplayCycleTime1 <= 0){
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <main+0x784>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f300 80b5 	bgt.w	80010e2 <main+0x756>
					switch(flipflop){
 8000f78:	4b66      	ldr	r3, [pc, #408]	; (8001114 <main+0x788>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <main+0x5fa>
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d02a      	beq.n	8000fda <main+0x64e>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
							update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
							flipflop = 0;
							break;
						default :
							break ;
 8000f84:	e053      	b.n	800102e <main+0x6a2>
							HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8c:	4862      	ldr	r0, [pc, #392]	; (8001118 <main+0x78c>)
 8000f8e:	f001 f93e 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f98:	485f      	ldr	r0, [pc, #380]	; (8001118 <main+0x78c>)
 8000f9a:	f001 f938 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGFirstSet(0,LEDfirstSetNum/10,LEDfirstSetNum%10);
 8000f9e:	4b5f      	ldr	r3, [pc, #380]	; (800111c <main+0x790>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a5f      	ldr	r2, [pc, #380]	; (8001120 <main+0x794>)
 8000fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa8:	1092      	asrs	r2, r2, #2
 8000faa:	17db      	asrs	r3, r3, #31
 8000fac:	1ad0      	subs	r0, r2, r3
 8000fae:	4b5b      	ldr	r3, [pc, #364]	; (800111c <main+0x790>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <main+0x794>)
 8000fb4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb8:	1099      	asrs	r1, r3, #2
 8000fba:	17d3      	asrs	r3, r2, #31
 8000fbc:	1ac9      	subs	r1, r1, r3
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	1ad1      	subs	r1, r2, r3
 8000fc8:	460a      	mov	r2, r1
 8000fca:	4601      	mov	r1, r0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fb1b 	bl	8000608 <update7SEGFirstSet>
							flipflop = 1;
 8000fd2:	4b50      	ldr	r3, [pc, #320]	; (8001114 <main+0x788>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
							break;
 8000fd8:	e029      	b.n	800102e <main+0x6a2>
							HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	484d      	ldr	r0, [pc, #308]	; (8001118 <main+0x78c>)
 8000fe2:	f001 f914 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fec:	484a      	ldr	r0, [pc, #296]	; (8001118 <main+0x78c>)
 8000fee:	f001 f90e 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <main+0x790>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a4a      	ldr	r2, [pc, #296]	; (8001120 <main+0x794>)
 8000ff8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffc:	1092      	asrs	r2, r2, #2
 8000ffe:	17db      	asrs	r3, r3, #31
 8001000:	1ad0      	subs	r0, r2, r3
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <main+0x790>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b46      	ldr	r3, [pc, #280]	; (8001120 <main+0x794>)
 8001008:	fb83 1302 	smull	r1, r3, r3, r2
 800100c:	1099      	asrs	r1, r3, #2
 800100e:	17d3      	asrs	r3, r2, #31
 8001010:	1ac9      	subs	r1, r1, r3
 8001012:	460b      	mov	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	1ad1      	subs	r1, r2, r3
 800101c:	460a      	mov	r2, r1
 800101e:	4601      	mov	r1, r0
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff faf1 	bl	8000608 <update7SEGFirstSet>
							flipflop = 0;
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <main+0x788>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
							break;
 800102c:	bf00      	nop

					}
					switch(flipflop1){
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <main+0x798>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <main+0x6b0>
 8001036:	2b01      	cmp	r3, #1
 8001038:	d028      	beq.n	800108c <main+0x700>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
							update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
							flipflop1 = 0;
							break;
						default :
							break ;
 800103a:	e04f      	b.n	80010dc <main+0x750>
							HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001042:	4835      	ldr	r0, [pc, #212]	; (8001118 <main+0x78c>)
 8001044:	f001 f8e3 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104e:	4832      	ldr	r0, [pc, #200]	; (8001118 <main+0x78c>)
 8001050:	f001 f8dd 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGSecondSet(0,LEDSecondSetNum/10,LEDSecondSetNum%10);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4a32      	ldr	r2, [pc, #200]	; (8001120 <main+0x794>)
 8001058:	fb82 1203 	smull	r1, r2, r2, r3
 800105c:	1092      	asrs	r2, r2, #2
 800105e:	17db      	asrs	r3, r3, #31
 8001060:	1ad0      	subs	r0, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <main+0x794>)
 8001066:	fb83 1302 	smull	r1, r3, r3, r2
 800106a:	1099      	asrs	r1, r3, #2
 800106c:	17d3      	asrs	r3, r2, #31
 800106e:	1ac9      	subs	r1, r1, r3
 8001070:	460b      	mov	r3, r1
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	1ad1      	subs	r1, r2, r3
 800107a:	460a      	mov	r2, r1
 800107c:	4601      	mov	r1, r0
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fadb 	bl	800063a <update7SEGSecondSet>
							flipflop1 = 1;
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <main+0x798>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
							break;
 800108a:	e027      	b.n	80010dc <main+0x750>
							HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001092:	4821      	ldr	r0, [pc, #132]	; (8001118 <main+0x78c>)
 8001094:	f001 f8bb 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <main+0x78c>)
 80010a0:	f001 f8b5 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <main+0x794>)
 80010a8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ac:	1092      	asrs	r2, r2, #2
 80010ae:	17db      	asrs	r3, r3, #31
 80010b0:	1ad0      	subs	r0, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <main+0x794>)
 80010b6:	fb83 1302 	smull	r1, r3, r3, r2
 80010ba:	1099      	asrs	r1, r3, #2
 80010bc:	17d3      	asrs	r3, r2, #31
 80010be:	1ac9      	subs	r1, r1, r3
 80010c0:	460b      	mov	r3, r1
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	1ad1      	subs	r1, r2, r3
 80010ca:	460a      	mov	r2, r1
 80010cc:	4601      	mov	r1, r0
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff fab3 	bl	800063a <update7SEGSecondSet>
							flipflop1 = 0;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <main+0x798>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
							break;
 80010da:	bf00      	nop

					}
					DisplayCycleTime1 = DisplayCycleTime;
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <main+0x784>)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6013      	str	r3, [r2, #0]
				}

				if (TotalTime2 <= 0){
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <main+0x77c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dc02      	bgt.n	80010f0 <main+0x764>
					TotalTime2 = TotalTime;
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <main+0x77c>)
 80010ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ee:	6013      	str	r3, [r2, #0]
				}

				DisplayCycleTime1--;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <main+0x784>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a06      	ldr	r2, [pc, #24]	; (8001110 <main+0x784>)
 80010f8:	6013      	str	r3, [r2, #0]
				TotalTime2--;
 80010fa:	4b03      	ldr	r3, [pc, #12]	; (8001108 <main+0x77c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3b01      	subs	r3, #1
 8001100:	4a01      	ldr	r2, [pc, #4]	; (8001108 <main+0x77c>)
 8001102:	6013      	str	r3, [r2, #0]
				break;
 8001104:	e37b      	b.n	80017fe <main+0xe72>
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000
 800110c:	40010800 	.word	0x40010800
 8001110:	20000068 	.word	0x20000068
 8001114:	20000080 	.word	0x20000080
 8001118:	40010c00 	.word	0x40010c00
 800111c:	20000088 	.word	0x20000088
 8001120:	66666667 	.word	0x66666667
 8001124:	20000084 	.word	0x20000084
			case 1:
				SecondCount--;
 8001128:	4b89      	ldr	r3, [pc, #548]	; (8001350 <main+0x9c4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a88      	ldr	r2, [pc, #544]	; (8001350 <main+0x9c4>)
 8001130:	6013      	str	r3, [r2, #0]
				if (SecondCount <= 0){
 8001132:	4b87      	ldr	r3, [pc, #540]	; (8001350 <main+0x9c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dc0e      	bgt.n	8001158 <main+0x7cc>
					HAL_GPIO_TogglePin(OUT0_GPIO_Port,OUT0_Pin);
 800113a:	2101      	movs	r1, #1
 800113c:	4885      	ldr	r0, [pc, #532]	; (8001354 <main+0x9c8>)
 800113e:	f001 f87e 	bl	800223e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(OUT3_GPIO_Port,OUT3_Pin);
 8001142:	2108      	movs	r1, #8
 8001144:	4883      	ldr	r0, [pc, #524]	; (8001354 <main+0x9c8>)
 8001146:	f001 f87a 	bl	800223e <HAL_GPIO_TogglePin>
					SecondCount = TicktoSecond/2;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	0fda      	lsrs	r2, r3, #31
 800114e:	4413      	add	r3, r2
 8001150:	105b      	asrs	r3, r3, #1
 8001152:	461a      	mov	r2, r3
 8001154:	4b7e      	ldr	r3, [pc, #504]	; (8001350 <main+0x9c4>)
 8001156:	601a      	str	r2, [r3, #0]
				}
				if ( HAL_GPIO_ReadPin (OUT14_GPIO_Port , OUT14_Pin) == GPIO_PIN_RESET && debounce2>= debounce){
 8001158:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800115c:	487d      	ldr	r0, [pc, #500]	; (8001354 <main+0x9c8>)
 800115e:	f001 f83f 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d110      	bne.n	800118a <main+0x7fe>
 8001168:	4b7b      	ldr	r3, [pc, #492]	; (8001358 <main+0x9cc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	429a      	cmp	r2, r3
 8001170:	dc0b      	bgt.n	800118a <main+0x7fe>
					TempRED1++;
 8001172:	4b7a      	ldr	r3, [pc, #488]	; (800135c <main+0x9d0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a78      	ldr	r2, [pc, #480]	; (800135c <main+0x9d0>)
 800117a:	6013      	str	r3, [r2, #0]
					LEDfirstSetNum = TempRED1;
 800117c:	4b77      	ldr	r3, [pc, #476]	; (800135c <main+0x9d0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a77      	ldr	r2, [pc, #476]	; (8001360 <main+0x9d4>)
 8001182:	6013      	str	r3, [r2, #0]
					debounce2 = 0;
 8001184:	4b74      	ldr	r3, [pc, #464]	; (8001358 <main+0x9cc>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
				}
				if ( HAL_GPIO_ReadPin (OUT15_GPIO_Port , OUT15_Pin) == GPIO_PIN_RESET && debounce3>= debounce){
 800118a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118e:	4871      	ldr	r0, [pc, #452]	; (8001354 <main+0x9c8>)
 8001190:	f001 f826 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <main+0x82e>
 800119a:	4b72      	ldr	r3, [pc, #456]	; (8001364 <main+0x9d8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dc0a      	bgt.n	80011ba <main+0x82e>
					RED1 = TempRED1;
 80011a4:	4b6d      	ldr	r3, [pc, #436]	; (800135c <main+0x9d0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a6f      	ldr	r2, [pc, #444]	; (8001368 <main+0x9dc>)
 80011aa:	6013      	str	r3, [r2, #0]
					LEDfirstSetNum = RED1;
 80011ac:	4b6e      	ldr	r3, [pc, #440]	; (8001368 <main+0x9dc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a6b      	ldr	r2, [pc, #428]	; (8001360 <main+0x9d4>)
 80011b2:	6013      	str	r3, [r2, #0]
					debounce3 = 0;
 80011b4:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <main+0x9d8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
				}

				if (DisplayCycleTime1 <= 0){
 80011ba:	4b6c      	ldr	r3, [pc, #432]	; (800136c <main+0x9e0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f300 80b5 	bgt.w	800132e <main+0x9a2>
					switch(flipflop){
 80011c4:	4b6a      	ldr	r3, [pc, #424]	; (8001370 <main+0x9e4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <main+0x846>
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d02a      	beq.n	8001226 <main+0x89a>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
							update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
							flipflop = 0;
							break;
						default :
							break ;
 80011d0:	e053      	b.n	800127a <main+0x8ee>
							HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d8:	4866      	ldr	r0, [pc, #408]	; (8001374 <main+0x9e8>)
 80011da:	f001 f818 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e4:	4863      	ldr	r0, [pc, #396]	; (8001374 <main+0x9e8>)
 80011e6:	f001 f812 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGFirstSet(0,LEDfirstSetNum/10,LEDfirstSetNum%10);
 80011ea:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <main+0x9d4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a62      	ldr	r2, [pc, #392]	; (8001378 <main+0x9ec>)
 80011f0:	fb82 1203 	smull	r1, r2, r2, r3
 80011f4:	1092      	asrs	r2, r2, #2
 80011f6:	17db      	asrs	r3, r3, #31
 80011f8:	1ad0      	subs	r0, r2, r3
 80011fa:	4b59      	ldr	r3, [pc, #356]	; (8001360 <main+0x9d4>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <main+0x9ec>)
 8001200:	fb83 1302 	smull	r1, r3, r3, r2
 8001204:	1099      	asrs	r1, r3, #2
 8001206:	17d3      	asrs	r3, r2, #31
 8001208:	1ac9      	subs	r1, r1, r3
 800120a:	460b      	mov	r3, r1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	1ad1      	subs	r1, r2, r3
 8001214:	460a      	mov	r2, r1
 8001216:	4601      	mov	r1, r0
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff f9f5 	bl	8000608 <update7SEGFirstSet>
							flipflop = 1;
 800121e:	4b54      	ldr	r3, [pc, #336]	; (8001370 <main+0x9e4>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
							break;
 8001224:	e029      	b.n	800127a <main+0x8ee>
							HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122c:	4851      	ldr	r0, [pc, #324]	; (8001374 <main+0x9e8>)
 800122e:	f000 ffee 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001238:	484e      	ldr	r0, [pc, #312]	; (8001374 <main+0x9e8>)
 800123a:	f000 ffe8 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <main+0x9d4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <main+0x9ec>)
 8001244:	fb82 1203 	smull	r1, r2, r2, r3
 8001248:	1092      	asrs	r2, r2, #2
 800124a:	17db      	asrs	r3, r3, #31
 800124c:	1ad0      	subs	r0, r2, r3
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <main+0x9d4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b49      	ldr	r3, [pc, #292]	; (8001378 <main+0x9ec>)
 8001254:	fb83 1302 	smull	r1, r3, r3, r2
 8001258:	1099      	asrs	r1, r3, #2
 800125a:	17d3      	asrs	r3, r2, #31
 800125c:	1ac9      	subs	r1, r1, r3
 800125e:	460b      	mov	r3, r1
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	1ad1      	subs	r1, r2, r3
 8001268:	460a      	mov	r2, r1
 800126a:	4601      	mov	r1, r0
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff f9cb 	bl	8000608 <update7SEGFirstSet>
							flipflop = 0;
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <main+0x9e4>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
							break;
 8001278:	bf00      	nop

					}
					switch(flipflop1){
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <main+0x9f0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <main+0x8fc>
 8001282:	2b01      	cmp	r3, #1
 8001284:	d028      	beq.n	80012d8 <main+0x94c>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
							update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
							flipflop1 = 0;
							break;
						default :
							break ;
 8001286:	e04f      	b.n	8001328 <main+0x99c>
							HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	4839      	ldr	r0, [pc, #228]	; (8001374 <main+0x9e8>)
 8001290:	f000 ffbd 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129a:	4836      	ldr	r0, [pc, #216]	; (8001374 <main+0x9e8>)
 800129c:	f000 ffb7 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGSecondSet(0,LEDSecondSetNum/10,LEDSecondSetNum%10);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4a35      	ldr	r2, [pc, #212]	; (8001378 <main+0x9ec>)
 80012a4:	fb82 1203 	smull	r1, r2, r2, r3
 80012a8:	1092      	asrs	r2, r2, #2
 80012aa:	17db      	asrs	r3, r3, #31
 80012ac:	1ad0      	subs	r0, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <main+0x9ec>)
 80012b2:	fb83 1302 	smull	r1, r3, r3, r2
 80012b6:	1099      	asrs	r1, r3, #2
 80012b8:	17d3      	asrs	r3, r2, #31
 80012ba:	1ac9      	subs	r1, r1, r3
 80012bc:	460b      	mov	r3, r1
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	1ad1      	subs	r1, r2, r3
 80012c6:	460a      	mov	r2, r1
 80012c8:	4601      	mov	r1, r0
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff f9b5 	bl	800063a <update7SEGSecondSet>
							flipflop1 = 1;
 80012d0:	4b2a      	ldr	r3, [pc, #168]	; (800137c <main+0x9f0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
							break;
 80012d6:	e027      	b.n	8001328 <main+0x99c>
							HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012de:	4825      	ldr	r0, [pc, #148]	; (8001374 <main+0x9e8>)
 80012e0:	f000 ff95 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ea:	4822      	ldr	r0, [pc, #136]	; (8001374 <main+0x9e8>)
 80012ec:	f000 ff8f 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4a21      	ldr	r2, [pc, #132]	; (8001378 <main+0x9ec>)
 80012f4:	fb82 1203 	smull	r1, r2, r2, r3
 80012f8:	1092      	asrs	r2, r2, #2
 80012fa:	17db      	asrs	r3, r3, #31
 80012fc:	1ad0      	subs	r0, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <main+0x9ec>)
 8001302:	fb83 1302 	smull	r1, r3, r3, r2
 8001306:	1099      	asrs	r1, r3, #2
 8001308:	17d3      	asrs	r3, r2, #31
 800130a:	1ac9      	subs	r1, r1, r3
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	1ad1      	subs	r1, r2, r3
 8001316:	460a      	mov	r2, r1
 8001318:	4601      	mov	r1, r0
 800131a:	2001      	movs	r0, #1
 800131c:	f7ff f98d 	bl	800063a <update7SEGSecondSet>
							flipflop1 = 0;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <main+0x9f0>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
							break;
 8001326:	bf00      	nop

					}
					DisplayCycleTime1 = DisplayCycleTime;
 8001328:	4a10      	ldr	r2, [pc, #64]	; (800136c <main+0x9e0>)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6013      	str	r3, [r2, #0]
				}
				debounce3++;
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <main+0x9d8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <main+0x9d8>)
 8001336:	6013      	str	r3, [r2, #0]
				debounce2++;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <main+0x9cc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a06      	ldr	r2, [pc, #24]	; (8001358 <main+0x9cc>)
 8001340:	6013      	str	r3, [r2, #0]
				DisplayCycleTime1--;
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <main+0x9e0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3b01      	subs	r3, #1
 8001348:	4a08      	ldr	r2, [pc, #32]	; (800136c <main+0x9e0>)
 800134a:	6013      	str	r3, [r2, #0]
				break;
 800134c:	e257      	b.n	80017fe <main+0xe72>
 800134e:	bf00      	nop
 8001350:	20000078 	.word	0x20000078
 8001354:	40010800 	.word	0x40010800
 8001358:	20000070 	.word	0x20000070
 800135c:	20000010 	.word	0x20000010
 8001360:	20000088 	.word	0x20000088
 8001364:	20000074 	.word	0x20000074
 8001368:	20000004 	.word	0x20000004
 800136c:	20000068 	.word	0x20000068
 8001370:	20000080 	.word	0x20000080
 8001374:	40010c00 	.word	0x40010c00
 8001378:	66666667 	.word	0x66666667
 800137c:	20000084 	.word	0x20000084
			case 2:
				SecondCount--;
 8001380:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <main+0xc1c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3b01      	subs	r3, #1
 8001386:	4a88      	ldr	r2, [pc, #544]	; (80015a8 <main+0xc1c>)
 8001388:	6013      	str	r3, [r2, #0]
				if (SecondCount <= 0){
 800138a:	4b87      	ldr	r3, [pc, #540]	; (80015a8 <main+0xc1c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	dc0e      	bgt.n	80013b0 <main+0xa24>
					HAL_GPIO_TogglePin(OUT1_GPIO_Port,OUT1_Pin);
 8001392:	2102      	movs	r1, #2
 8001394:	4885      	ldr	r0, [pc, #532]	; (80015ac <main+0xc20>)
 8001396:	f000 ff52 	bl	800223e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(OUT4_GPIO_Port,OUT4_Pin);
 800139a:	2110      	movs	r1, #16
 800139c:	4883      	ldr	r0, [pc, #524]	; (80015ac <main+0xc20>)
 800139e:	f000 ff4e 	bl	800223e <HAL_GPIO_TogglePin>
					SecondCount = TicktoSecond/2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0fda      	lsrs	r2, r3, #31
 80013a6:	4413      	add	r3, r2
 80013a8:	105b      	asrs	r3, r3, #1
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <main+0xc1c>)
 80013ae:	601a      	str	r2, [r3, #0]
				}

				if ( HAL_GPIO_ReadPin (OUT14_GPIO_Port , OUT14_Pin) == GPIO_PIN_RESET && debounce2>= debounce){
 80013b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b4:	487d      	ldr	r0, [pc, #500]	; (80015ac <main+0xc20>)
 80013b6:	f000 ff13 	bl	80021e0 <HAL_GPIO_ReadPin>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d110      	bne.n	80013e2 <main+0xa56>
 80013c0:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <main+0xc24>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dc0b      	bgt.n	80013e2 <main+0xa56>
					TempYELLOW1++;
 80013ca:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <main+0xc28>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a78      	ldr	r2, [pc, #480]	; (80015b4 <main+0xc28>)
 80013d2:	6013      	str	r3, [r2, #0]
					LEDfirstSetNum = TempYELLOW1;
 80013d4:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <main+0xc28>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a77      	ldr	r2, [pc, #476]	; (80015b8 <main+0xc2c>)
 80013da:	6013      	str	r3, [r2, #0]
					debounce2 = 0;
 80013dc:	4b74      	ldr	r3, [pc, #464]	; (80015b0 <main+0xc24>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
				}
				if ( HAL_GPIO_ReadPin (OUT15_GPIO_Port , OUT15_Pin) == GPIO_PIN_RESET && debounce3>= debounce){
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	4871      	ldr	r0, [pc, #452]	; (80015ac <main+0xc20>)
 80013e8:	f000 fefa 	bl	80021e0 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <main+0xa86>
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <main+0xc30>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dc0a      	bgt.n	8001412 <main+0xa86>
					YELLOW1 = TempYELLOW1;
 80013fc:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <main+0xc28>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6f      	ldr	r2, [pc, #444]	; (80015c0 <main+0xc34>)
 8001402:	6013      	str	r3, [r2, #0]
					LEDfirstSetNum = YELLOW1;
 8001404:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <main+0xc34>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6b      	ldr	r2, [pc, #428]	; (80015b8 <main+0xc2c>)
 800140a:	6013      	str	r3, [r2, #0]
					debounce3 = 0;
 800140c:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <main+0xc30>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
				}

				if (DisplayCycleTime1 <= 0){
 8001412:	4b6c      	ldr	r3, [pc, #432]	; (80015c4 <main+0xc38>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f300 80b5 	bgt.w	8001586 <main+0xbfa>
					switch(flipflop){
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <main+0xc3c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <main+0xa9e>
 8001424:	2b01      	cmp	r3, #1
 8001426:	d02a      	beq.n	800147e <main+0xaf2>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
							update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
							flipflop = 0;
							break;
						default :
							break ;
 8001428:	e053      	b.n	80014d2 <main+0xb46>
							HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001430:	4866      	ldr	r0, [pc, #408]	; (80015cc <main+0xc40>)
 8001432:	f000 feec 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143c:	4863      	ldr	r0, [pc, #396]	; (80015cc <main+0xc40>)
 800143e:	f000 fee6 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGFirstSet(0,LEDfirstSetNum/10,LEDfirstSetNum%10);
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <main+0xc2c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a62      	ldr	r2, [pc, #392]	; (80015d0 <main+0xc44>)
 8001448:	fb82 1203 	smull	r1, r2, r2, r3
 800144c:	1092      	asrs	r2, r2, #2
 800144e:	17db      	asrs	r3, r3, #31
 8001450:	1ad0      	subs	r0, r2, r3
 8001452:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <main+0xc2c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <main+0xc44>)
 8001458:	fb83 1302 	smull	r1, r3, r3, r2
 800145c:	1099      	asrs	r1, r3, #2
 800145e:	17d3      	asrs	r3, r2, #31
 8001460:	1ac9      	subs	r1, r1, r3
 8001462:	460b      	mov	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	1ad1      	subs	r1, r2, r3
 800146c:	460a      	mov	r2, r1
 800146e:	4601      	mov	r1, r0
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff f8c9 	bl	8000608 <update7SEGFirstSet>
							flipflop = 1;
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <main+0xc3c>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
							break;
 800147c:	e029      	b.n	80014d2 <main+0xb46>
							HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_SET);
 800147e:	2201      	movs	r2, #1
 8001480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001484:	4851      	ldr	r0, [pc, #324]	; (80015cc <main+0xc40>)
 8001486:	f000 fec2 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001490:	484e      	ldr	r0, [pc, #312]	; (80015cc <main+0xc40>)
 8001492:	f000 febc 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
 8001496:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <main+0xc2c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <main+0xc44>)
 800149c:	fb82 1203 	smull	r1, r2, r2, r3
 80014a0:	1092      	asrs	r2, r2, #2
 80014a2:	17db      	asrs	r3, r3, #31
 80014a4:	1ad0      	subs	r0, r2, r3
 80014a6:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <main+0xc2c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <main+0xc44>)
 80014ac:	fb83 1302 	smull	r1, r3, r3, r2
 80014b0:	1099      	asrs	r1, r3, #2
 80014b2:	17d3      	asrs	r3, r2, #31
 80014b4:	1ac9      	subs	r1, r1, r3
 80014b6:	460b      	mov	r3, r1
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	1ad1      	subs	r1, r2, r3
 80014c0:	460a      	mov	r2, r1
 80014c2:	4601      	mov	r1, r0
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7ff f89f 	bl	8000608 <update7SEGFirstSet>
							flipflop = 0;
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <main+0xc3c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
							break;
 80014d0:	bf00      	nop

					}
					switch(flipflop1){
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <main+0xc48>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <main+0xb54>
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d028      	beq.n	8001530 <main+0xba4>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
							update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
							flipflop1 = 0;
							break;
						default :
							break ;
 80014de:	e04f      	b.n	8001580 <main+0xbf4>
							HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e6:	4839      	ldr	r0, [pc, #228]	; (80015cc <main+0xc40>)
 80014e8:	f000 fe91 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	4836      	ldr	r0, [pc, #216]	; (80015cc <main+0xc40>)
 80014f4:	f000 fe8b 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGSecondSet(0,LEDSecondSetNum/10,LEDSecondSetNum%10);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4a35      	ldr	r2, [pc, #212]	; (80015d0 <main+0xc44>)
 80014fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001500:	1092      	asrs	r2, r2, #2
 8001502:	17db      	asrs	r3, r3, #31
 8001504:	1ad0      	subs	r0, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <main+0xc44>)
 800150a:	fb83 1302 	smull	r1, r3, r3, r2
 800150e:	1099      	asrs	r1, r3, #2
 8001510:	17d3      	asrs	r3, r2, #31
 8001512:	1ac9      	subs	r1, r1, r3
 8001514:	460b      	mov	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	1ad1      	subs	r1, r2, r3
 800151e:	460a      	mov	r2, r1
 8001520:	4601      	mov	r1, r0
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff f889 	bl	800063a <update7SEGSecondSet>
							flipflop1 = 1;
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <main+0xc48>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]
							break;
 800152e:	e027      	b.n	8001580 <main+0xbf4>
							HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001536:	4825      	ldr	r0, [pc, #148]	; (80015cc <main+0xc40>)
 8001538:	f000 fe69 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001542:	4822      	ldr	r0, [pc, #136]	; (80015cc <main+0xc40>)
 8001544:	f000 fe63 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <main+0xc44>)
 800154c:	fb82 1203 	smull	r1, r2, r2, r3
 8001550:	1092      	asrs	r2, r2, #2
 8001552:	17db      	asrs	r3, r3, #31
 8001554:	1ad0      	subs	r0, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <main+0xc44>)
 800155a:	fb83 1302 	smull	r1, r3, r3, r2
 800155e:	1099      	asrs	r1, r3, #2
 8001560:	17d3      	asrs	r3, r2, #31
 8001562:	1ac9      	subs	r1, r1, r3
 8001564:	460b      	mov	r3, r1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	1ad1      	subs	r1, r2, r3
 800156e:	460a      	mov	r2, r1
 8001570:	4601      	mov	r1, r0
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff f861 	bl	800063a <update7SEGSecondSet>
							flipflop1 = 0;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <main+0xc48>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
							break;
 800157e:	bf00      	nop

					}
					DisplayCycleTime1 = DisplayCycleTime;
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <main+0xc38>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6013      	str	r3, [r2, #0]
				}
				debounce3++;
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <main+0xc30>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <main+0xc30>)
 800158e:	6013      	str	r3, [r2, #0]
				debounce2++;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <main+0xc24>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <main+0xc24>)
 8001598:	6013      	str	r3, [r2, #0]
				DisplayCycleTime1--;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <main+0xc38>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3b01      	subs	r3, #1
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <main+0xc38>)
 80015a2:	6013      	str	r3, [r2, #0]
				break;
 80015a4:	e12b      	b.n	80017fe <main+0xe72>
 80015a6:	bf00      	nop
 80015a8:	20000078 	.word	0x20000078
 80015ac:	40010800 	.word	0x40010800
 80015b0:	20000070 	.word	0x20000070
 80015b4:	20000014 	.word	0x20000014
 80015b8:	20000088 	.word	0x20000088
 80015bc:	20000074 	.word	0x20000074
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000068 	.word	0x20000068
 80015c8:	20000080 	.word	0x20000080
 80015cc:	40010c00 	.word	0x40010c00
 80015d0:	66666667 	.word	0x66666667
 80015d4:	20000084 	.word	0x20000084
			case 3:
				SecondCount--;
 80015d8:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <main+0xe7c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3b01      	subs	r3, #1
 80015de:	4a8a      	ldr	r2, [pc, #552]	; (8001808 <main+0xe7c>)
 80015e0:	6013      	str	r3, [r2, #0]
				if (SecondCount <= 0){
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <main+0xe7c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dc0e      	bgt.n	8001608 <main+0xc7c>
					HAL_GPIO_TogglePin(OUT2_GPIO_Port,OUT2_Pin);
 80015ea:	2104      	movs	r1, #4
 80015ec:	4887      	ldr	r0, [pc, #540]	; (800180c <main+0xe80>)
 80015ee:	f000 fe26 	bl	800223e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(OUT5_GPIO_Port,OUT5_Pin);
 80015f2:	2120      	movs	r1, #32
 80015f4:	4885      	ldr	r0, [pc, #532]	; (800180c <main+0xe80>)
 80015f6:	f000 fe22 	bl	800223e <HAL_GPIO_TogglePin>
					SecondCount = TicktoSecond/2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	0fda      	lsrs	r2, r3, #31
 80015fe:	4413      	add	r3, r2
 8001600:	105b      	asrs	r3, r3, #1
 8001602:	461a      	mov	r2, r3
 8001604:	4b80      	ldr	r3, [pc, #512]	; (8001808 <main+0xe7c>)
 8001606:	601a      	str	r2, [r3, #0]
				}

				if ( HAL_GPIO_ReadPin (OUT14_GPIO_Port , OUT14_Pin) == GPIO_PIN_RESET && debounce2>= debounce){
 8001608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160c:	487f      	ldr	r0, [pc, #508]	; (800180c <main+0xe80>)
 800160e:	f000 fde7 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d110      	bne.n	800163a <main+0xcae>
 8001618:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <main+0xe84>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	429a      	cmp	r2, r3
 8001620:	dc0b      	bgt.n	800163a <main+0xcae>
					TempGREEN1++;
 8001622:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <main+0xe88>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a7a      	ldr	r2, [pc, #488]	; (8001814 <main+0xe88>)
 800162a:	6013      	str	r3, [r2, #0]
					LEDfirstSetNum = TempGREEN1;
 800162c:	4b79      	ldr	r3, [pc, #484]	; (8001814 <main+0xe88>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a79      	ldr	r2, [pc, #484]	; (8001818 <main+0xe8c>)
 8001632:	6013      	str	r3, [r2, #0]
					debounce2 = 0;
 8001634:	4b76      	ldr	r3, [pc, #472]	; (8001810 <main+0xe84>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
				}
				if ( HAL_GPIO_ReadPin (OUT15_GPIO_Port , OUT15_Pin) == GPIO_PIN_RESET && debounce3>= debounce){
 800163a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163e:	4873      	ldr	r0, [pc, #460]	; (800180c <main+0xe80>)
 8001640:	f000 fdce 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10f      	bne.n	800166a <main+0xcde>
 800164a:	4b74      	ldr	r3, [pc, #464]	; (800181c <main+0xe90>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	429a      	cmp	r2, r3
 8001652:	dc0a      	bgt.n	800166a <main+0xcde>
					GREEN1 = TempGREEN1;
 8001654:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <main+0xe88>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a71      	ldr	r2, [pc, #452]	; (8001820 <main+0xe94>)
 800165a:	6013      	str	r3, [r2, #0]
					LEDfirstSetNum = GREEN1;
 800165c:	4b70      	ldr	r3, [pc, #448]	; (8001820 <main+0xe94>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6d      	ldr	r2, [pc, #436]	; (8001818 <main+0xe8c>)
 8001662:	6013      	str	r3, [r2, #0]
					debounce3 = 0;
 8001664:	4b6d      	ldr	r3, [pc, #436]	; (800181c <main+0xe90>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
				}

				if (DisplayCycleTime1 <= 0){
 800166a:	4b6e      	ldr	r3, [pc, #440]	; (8001824 <main+0xe98>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f300 80b5 	bgt.w	80017de <main+0xe52>
					switch(flipflop){
 8001674:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <main+0xe9c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <main+0xcf6>
 800167c:	2b01      	cmp	r3, #1
 800167e:	d02a      	beq.n	80016d6 <main+0xd4a>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
							update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
							flipflop = 0;
							break;
						default :
							break ;
 8001680:	e053      	b.n	800172a <main+0xd9e>
							HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001688:	4868      	ldr	r0, [pc, #416]	; (800182c <main+0xea0>)
 800168a:	f000 fdc0 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001694:	4865      	ldr	r0, [pc, #404]	; (800182c <main+0xea0>)
 8001696:	f000 fdba 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGFirstSet(0,LEDfirstSetNum/10,LEDfirstSetNum%10);
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <main+0xe8c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a64      	ldr	r2, [pc, #400]	; (8001830 <main+0xea4>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	1092      	asrs	r2, r2, #2
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad0      	subs	r0, r2, r3
 80016aa:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <main+0xe8c>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b60      	ldr	r3, [pc, #384]	; (8001830 <main+0xea4>)
 80016b0:	fb83 1302 	smull	r1, r3, r3, r2
 80016b4:	1099      	asrs	r1, r3, #2
 80016b6:	17d3      	asrs	r3, r2, #31
 80016b8:	1ac9      	subs	r1, r1, r3
 80016ba:	460b      	mov	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	1ad1      	subs	r1, r2, r3
 80016c4:	460a      	mov	r2, r1
 80016c6:	4601      	mov	r1, r0
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7fe ff9d 	bl	8000608 <update7SEGFirstSet>
							flipflop = 1;
 80016ce:	4b56      	ldr	r3, [pc, #344]	; (8001828 <main+0xe9c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
							break;
 80016d4:	e029      	b.n	800172a <main+0xd9e>
							HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016dc:	4853      	ldr	r0, [pc, #332]	; (800182c <main+0xea0>)
 80016de:	f000 fd96 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e8:	4850      	ldr	r0, [pc, #320]	; (800182c <main+0xea0>)
 80016ea:	f000 fd90 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <main+0xe8c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a4f      	ldr	r2, [pc, #316]	; (8001830 <main+0xea4>)
 80016f4:	fb82 1203 	smull	r1, r2, r2, r3
 80016f8:	1092      	asrs	r2, r2, #2
 80016fa:	17db      	asrs	r3, r3, #31
 80016fc:	1ad0      	subs	r0, r2, r3
 80016fe:	4b46      	ldr	r3, [pc, #280]	; (8001818 <main+0xe8c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <main+0xea4>)
 8001704:	fb83 1302 	smull	r1, r3, r3, r2
 8001708:	1099      	asrs	r1, r3, #2
 800170a:	17d3      	asrs	r3, r2, #31
 800170c:	1ac9      	subs	r1, r1, r3
 800170e:	460b      	mov	r3, r1
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	1ad1      	subs	r1, r2, r3
 8001718:	460a      	mov	r2, r1
 800171a:	4601      	mov	r1, r0
 800171c:	2001      	movs	r0, #1
 800171e:	f7fe ff73 	bl	8000608 <update7SEGFirstSet>
							flipflop = 0;
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <main+0xe9c>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
							break;
 8001728:	bf00      	nop

					}
					switch(flipflop1){
 800172a:	4b42      	ldr	r3, [pc, #264]	; (8001834 <main+0xea8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <main+0xdac>
 8001732:	2b01      	cmp	r3, #1
 8001734:	d028      	beq.n	8001788 <main+0xdfc>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
							update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
							flipflop1 = 0;
							break;
						default :
							break ;
 8001736:	e04f      	b.n	80017d8 <main+0xe4c>
							HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173e:	483b      	ldr	r0, [pc, #236]	; (800182c <main+0xea0>)
 8001740:	f000 fd65 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174a:	4838      	ldr	r0, [pc, #224]	; (800182c <main+0xea0>)
 800174c:	f000 fd5f 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGSecondSet(0,LEDSecondSetNum/10,LEDSecondSetNum%10);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4a37      	ldr	r2, [pc, #220]	; (8001830 <main+0xea4>)
 8001754:	fb82 1203 	smull	r1, r2, r2, r3
 8001758:	1092      	asrs	r2, r2, #2
 800175a:	17db      	asrs	r3, r3, #31
 800175c:	1ad0      	subs	r0, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <main+0xea4>)
 8001762:	fb83 1302 	smull	r1, r3, r3, r2
 8001766:	1099      	asrs	r1, r3, #2
 8001768:	17d3      	asrs	r3, r2, #31
 800176a:	1ac9      	subs	r1, r1, r3
 800176c:	460b      	mov	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	1ad1      	subs	r1, r2, r3
 8001776:	460a      	mov	r2, r1
 8001778:	4601      	mov	r1, r0
 800177a:	2000      	movs	r0, #0
 800177c:	f7fe ff5d 	bl	800063a <update7SEGSecondSet>
							flipflop1 = 1;
 8001780:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <main+0xea8>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
							break;
 8001786:	e027      	b.n	80017d8 <main+0xe4c>
							HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178e:	4827      	ldr	r0, [pc, #156]	; (800182c <main+0xea0>)
 8001790:	f000 fd3d 	bl	800220e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	4824      	ldr	r0, [pc, #144]	; (800182c <main+0xea0>)
 800179c:	f000 fd37 	bl	800220e <HAL_GPIO_WritePin>
							update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <main+0xea4>)
 80017a4:	fb82 1203 	smull	r1, r2, r2, r3
 80017a8:	1092      	asrs	r2, r2, #2
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	1ad0      	subs	r0, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <main+0xea4>)
 80017b2:	fb83 1302 	smull	r1, r3, r3, r2
 80017b6:	1099      	asrs	r1, r3, #2
 80017b8:	17d3      	asrs	r3, r2, #31
 80017ba:	1ac9      	subs	r1, r1, r3
 80017bc:	460b      	mov	r3, r1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	1ad1      	subs	r1, r2, r3
 80017c6:	460a      	mov	r2, r1
 80017c8:	4601      	mov	r1, r0
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7fe ff35 	bl	800063a <update7SEGSecondSet>
							flipflop1 = 0;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <main+0xea8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
							break;
 80017d6:	bf00      	nop

					}
					DisplayCycleTime1 = DisplayCycleTime;
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <main+0xe98>)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6013      	str	r3, [r2, #0]
				}
				debounce3++;
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <main+0xe90>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <main+0xe90>)
 80017e6:	6013      	str	r3, [r2, #0]
				debounce2++;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <main+0xe84>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <main+0xe84>)
 80017f0:	6013      	str	r3, [r2, #0]
				DisplayCycleTime1--;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <main+0xe98>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <main+0xe98>)
 80017fa:	6013      	str	r3, [r2, #0]
				break;
 80017fc:	bf00      	nop

		}
		setTimer0(10);
 80017fe:	200a      	movs	r0, #10
 8001800:	f000 f998 	bl	8001b34 <setTimer0>
	  if(timer0_flag == 1) {
 8001804:	f7ff b8db 	b.w	80009be <main+0x32>
 8001808:	20000078 	.word	0x20000078
 800180c:	40010800 	.word	0x40010800
 8001810:	20000070 	.word	0x20000070
 8001814:	20000018 	.word	0x20000018
 8001818:	20000088 	.word	0x20000088
 800181c:	20000074 	.word	0x20000074
 8001820:	20000008 	.word	0x20000008
 8001824:	20000068 	.word	0x20000068
 8001828:	20000080 	.word	0x20000080
 800182c:	40010c00 	.word	0x40010c00
 8001830:	66666667 	.word	0x66666667
 8001834:	20000084 	.word	0x20000084

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 0318 	add.w	r3, r7, #24
 8001842:	2228      	movs	r2, #40	; 0x28
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fcfa 	bl	8003240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800185a:	2302      	movs	r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800185e:	2301      	movs	r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001862:	2310      	movs	r3, #16
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fcfe 	bl	8002270 <HAL_RCC_OscConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800187a:	f000 f8c7 	bl	8001a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187e:	230f      	movs	r3, #15
 8001880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f000 ff6a 	bl	8002770 <HAL_RCC_ClockConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018a2:	f000 f8b3 	bl	8001a0c <Error_Handler>
  }
}
 80018a6:	bf00      	nop
 80018a8:	3740      	adds	r7, #64	; 0x40
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	463b      	mov	r3, r7
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <MX_TIM2_Init+0x94>)
 80018ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <MX_TIM2_Init+0x94>)
 80018d6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <MX_TIM2_Init+0x94>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_TIM2_Init+0x94>)
 80018e4:	2209      	movs	r2, #9
 80018e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_TIM2_Init+0x94>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_TIM2_Init+0x94>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f4:	4813      	ldr	r0, [pc, #76]	; (8001944 <MX_TIM2_Init+0x94>)
 80018f6:	f001 f897 	bl	8002a28 <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001900:	f000 f884 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_TIM2_Init+0x94>)
 8001912:	f001 fa2d 	bl	8002d70 <HAL_TIM_ConfigClockSource>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800191c:	f000 f876 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001928:	463b      	mov	r3, r7
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_TIM2_Init+0x94>)
 800192e:	f001 fbf9 	bl	8003124 <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001938:	f000 f868 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000098 	.word	0x20000098

08001948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_GPIO_Init+0xb8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <MX_GPIO_Init+0xb8>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <MX_GPIO_Init+0xb8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <MX_GPIO_Init+0xb8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <MX_GPIO_Init+0xb8>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_GPIO_Init+0xb8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin
 800198c:	2200      	movs	r2, #0
 800198e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001992:	481c      	ldr	r0, [pc, #112]	; (8001a04 <MX_GPIO_Init+0xbc>)
 8001994:	f000 fc3b 	bl	800220e <HAL_GPIO_WritePin>
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin|OUT11_Pin
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_12_Pin|OUT2_13_Pin|OUT2_14_Pin|OUT2_15_Pin
 8001998:	2200      	movs	r2, #0
 800199a:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 800199e:	481a      	ldr	r0, [pc, #104]	; (8001a08 <MX_GPIO_Init+0xc0>)
 80019a0:	f000 fc35 	bl	800220e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin
                           OUT4_Pin OUT5_Pin OUT6_Pin OUT7_Pin
                           OUT8_Pin OUT9_Pin OUT10_Pin OUT11_Pin
                           OUT12_Pin OUT13_Pin OUT14_Pin OUT15_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin
 80019a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a8:	60bb      	str	r3, [r7, #8]
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin|OUT11_Pin
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2302      	movs	r3, #2
 80019b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4619      	mov	r1, r3
 80019bc:	4811      	ldr	r0, [pc, #68]	; (8001a04 <MX_GPIO_Init+0xbc>)
 80019be:	f000 fa95 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80019c2:	2307      	movs	r3, #7
 80019c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4619      	mov	r1, r3
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_GPIO_Init+0xc0>)
 80019d6:	f000 fa89 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT2_12_Pin OUT2_13_Pin OUT2_14_Pin OUT2_15_Pin
                           OUT2_3_Pin OUT2_4_Pin OUT2_5_Pin OUT2_6_Pin
                           OUT2_7_Pin OUT2_8_Pin OUT2_9_Pin */
  GPIO_InitStruct.Pin = OUT2_12_Pin|OUT2_13_Pin|OUT2_14_Pin|OUT2_15_Pin
 80019da:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 80019de:	60bb      	str	r3, [r7, #8]
                          |OUT2_3_Pin|OUT2_4_Pin|OUT2_5_Pin|OUT2_6_Pin
                          |OUT2_7_Pin|OUT2_8_Pin|OUT2_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2302      	movs	r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	4619      	mov	r1, r3
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_GPIO_Init+0xc0>)
 80019f4:	f000 fa7a 	bl	8001eec <HAL_GPIO_Init>

}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010800 	.word	0x40010800
 8001a08:	40010c00 	.word	0x40010c00

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <Error_Handler+0x8>
	...

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6193      	str	r3, [r2, #24]
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_MspInit+0x5c>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_MspInit+0x60>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_MspInit+0x60>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000

08001a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8c:	d113      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_TIM_Base_MspInit+0x44>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <HAL_TIM_Base_MspInit+0x44>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_TIM_Base_MspInit+0x44>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	201c      	movs	r0, #28
 8001aac:	f000 f9e7 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab0:	201c      	movs	r0, #28
 8001ab2:	f000 fa00 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <NMI_Handler+0x4>

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0a:	f000 f8c5 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM2_IRQHandler+0x10>)
 8001b1a:	f001 f821 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000098 	.word	0x20000098

08001b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <setTimer0>:
#include "Led.h"

int timer0_counter = 0;
int timer0_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0 ( int duration ) {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <setTimer0+0x28>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b46:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <setTimer0+0x2c>)
 8001b48:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <setTimer0+0x30>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000020 	.word	0x20000020
 8001b60:	20000090 	.word	0x20000090
 8001b64:	20000094 	.word	0x20000094

08001b68 <timer_run>:
void timer_run () {
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	if( timer0_counter > 0) {
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <timer_run+0x2c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	dd0b      	ble.n	8001b8c <timer_run+0x24>
		timer0_counter--;
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <timer_run+0x2c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <timer_run+0x2c>)
 8001b7c:	6013      	str	r3, [r2, #0]
		if( timer0_counter == 0) {
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <timer_run+0x2c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <timer_run+0x24>
			timer0_flag = 1;
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <timer_run+0x30>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	20000090 	.word	0x20000090
 8001b98:	20000094 	.word	0x20000094

08001b9c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

	if( htim -> Instance == TIM2 ) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bac:	d103      	bne.n	8001bb6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8001bae:	f7fe fe7b 	bl	80008a8 <button_reading>
		timer_run();
 8001bb2:	f7ff ffd9 	bl	8001b68 <timer_run>
	}
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff ffb2 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bdc:	4c09      	ldr	r4, [pc, #36]	; (8001c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f001 fb05 	bl	80031f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7fe fecd 	bl	800098c <main>
  bx lr
 8001bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001bfc:	08003294 	.word	0x08003294
  ldr r2, =_sbss
 8001c00:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001c04:	200000e4 	.word	0x200000e4

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f923 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fef6 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f93b 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f903 	bl	8001e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000001c 	.word	0x2000001c
 8001c90:	20000028 	.word	0x20000028
 8001c94:	20000024 	.word	0x20000024

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000028 	.word	0x20000028
 8001cb8:	200000e0 	.word	0x200000e0

08001cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	200000e0 	.word	0x200000e0

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4906      	ldr	r1, [pc, #24]	; (8001d68 <__NVIC_EnableIRQ+0x34>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e34:	d301      	bcc.n	8001e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00f      	b.n	8001e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <SysTick_Config+0x40>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e42:	210f      	movs	r1, #15
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f7ff ff90 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <SysTick_Config+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <SysTick_Config+0x40>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff2d 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff42 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff90 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5f 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff35 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa2 	bl	8001e24 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b08b      	sub	sp, #44	; 0x2c
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efe:	e148      	b.n	8002192 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f00:	2201      	movs	r2, #1
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 8137 	bne.w	800218c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4aa3      	ldr	r2, [pc, #652]	; (80021b0 <HAL_GPIO_Init+0x2c4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d05e      	beq.n	8001fe6 <HAL_GPIO_Init+0xfa>
 8001f28:	4aa1      	ldr	r2, [pc, #644]	; (80021b0 <HAL_GPIO_Init+0x2c4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d875      	bhi.n	800201a <HAL_GPIO_Init+0x12e>
 8001f2e:	4aa1      	ldr	r2, [pc, #644]	; (80021b4 <HAL_GPIO_Init+0x2c8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d058      	beq.n	8001fe6 <HAL_GPIO_Init+0xfa>
 8001f34:	4a9f      	ldr	r2, [pc, #636]	; (80021b4 <HAL_GPIO_Init+0x2c8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d86f      	bhi.n	800201a <HAL_GPIO_Init+0x12e>
 8001f3a:	4a9f      	ldr	r2, [pc, #636]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d052      	beq.n	8001fe6 <HAL_GPIO_Init+0xfa>
 8001f40:	4a9d      	ldr	r2, [pc, #628]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d869      	bhi.n	800201a <HAL_GPIO_Init+0x12e>
 8001f46:	4a9d      	ldr	r2, [pc, #628]	; (80021bc <HAL_GPIO_Init+0x2d0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d04c      	beq.n	8001fe6 <HAL_GPIO_Init+0xfa>
 8001f4c:	4a9b      	ldr	r2, [pc, #620]	; (80021bc <HAL_GPIO_Init+0x2d0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d863      	bhi.n	800201a <HAL_GPIO_Init+0x12e>
 8001f52:	4a9b      	ldr	r2, [pc, #620]	; (80021c0 <HAL_GPIO_Init+0x2d4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d046      	beq.n	8001fe6 <HAL_GPIO_Init+0xfa>
 8001f58:	4a99      	ldr	r2, [pc, #612]	; (80021c0 <HAL_GPIO_Init+0x2d4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d85d      	bhi.n	800201a <HAL_GPIO_Init+0x12e>
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	d82a      	bhi.n	8001fb8 <HAL_GPIO_Init+0xcc>
 8001f62:	2b12      	cmp	r3, #18
 8001f64:	d859      	bhi.n	800201a <HAL_GPIO_Init+0x12e>
 8001f66:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <HAL_GPIO_Init+0x80>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001fe7 	.word	0x08001fe7
 8001f70:	08001fc1 	.word	0x08001fc1
 8001f74:	08001fd3 	.word	0x08001fd3
 8001f78:	08002015 	.word	0x08002015
 8001f7c:	0800201b 	.word	0x0800201b
 8001f80:	0800201b 	.word	0x0800201b
 8001f84:	0800201b 	.word	0x0800201b
 8001f88:	0800201b 	.word	0x0800201b
 8001f8c:	0800201b 	.word	0x0800201b
 8001f90:	0800201b 	.word	0x0800201b
 8001f94:	0800201b 	.word	0x0800201b
 8001f98:	0800201b 	.word	0x0800201b
 8001f9c:	0800201b 	.word	0x0800201b
 8001fa0:	0800201b 	.word	0x0800201b
 8001fa4:	0800201b 	.word	0x0800201b
 8001fa8:	0800201b 	.word	0x0800201b
 8001fac:	0800201b 	.word	0x0800201b
 8001fb0:	08001fc9 	.word	0x08001fc9
 8001fb4:	08001fdd 	.word	0x08001fdd
 8001fb8:	4a82      	ldr	r2, [pc, #520]	; (80021c4 <HAL_GPIO_Init+0x2d8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fbe:	e02c      	b.n	800201a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	623b      	str	r3, [r7, #32]
          break;
 8001fc6:	e029      	b.n	800201c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	e024      	b.n	800201c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	623b      	str	r3, [r7, #32]
          break;
 8001fda:	e01f      	b.n	800201c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	623b      	str	r3, [r7, #32]
          break;
 8001fe4:	e01a      	b.n	800201c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e013      	b.n	800201c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	611a      	str	r2, [r3, #16]
          break;
 8002006:	e009      	b.n	800201c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002008:	2308      	movs	r3, #8
 800200a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	615a      	str	r2, [r3, #20]
          break;
 8002012:	e003      	b.n	800201c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x130>
          break;
 800201a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2bff      	cmp	r3, #255	; 0xff
 8002020:	d801      	bhi.n	8002026 <HAL_GPIO_Init+0x13a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	e001      	b.n	800202a <HAL_GPIO_Init+0x13e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3304      	adds	r3, #4
 800202a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2bff      	cmp	r3, #255	; 0xff
 8002030:	d802      	bhi.n	8002038 <HAL_GPIO_Init+0x14c>
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	e002      	b.n	800203e <HAL_GPIO_Init+0x152>
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	3b08      	subs	r3, #8
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	210f      	movs	r1, #15
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	401a      	ands	r2, r3
 8002050:	6a39      	ldr	r1, [r7, #32]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	431a      	orrs	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8090 	beq.w	800218c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800206c:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <HAL_GPIO_Init+0x2dc>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a55      	ldr	r2, [pc, #340]	; (80021c8 <HAL_GPIO_Init+0x2dc>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_GPIO_Init+0x2dc>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002084:	4a51      	ldr	r2, [pc, #324]	; (80021cc <HAL_GPIO_Init+0x2e0>)
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4013      	ands	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a49      	ldr	r2, [pc, #292]	; (80021d0 <HAL_GPIO_Init+0x2e4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00d      	beq.n	80020cc <HAL_GPIO_Init+0x1e0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a48      	ldr	r2, [pc, #288]	; (80021d4 <HAL_GPIO_Init+0x2e8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <HAL_GPIO_Init+0x1dc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a47      	ldr	r2, [pc, #284]	; (80021d8 <HAL_GPIO_Init+0x2ec>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d101      	bne.n	80020c4 <HAL_GPIO_Init+0x1d8>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e004      	b.n	80020ce <HAL_GPIO_Init+0x1e2>
 80020c4:	2303      	movs	r3, #3
 80020c6:	e002      	b.n	80020ce <HAL_GPIO_Init+0x1e2>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_GPIO_Init+0x1e2>
 80020cc:	2300      	movs	r3, #0
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	0092      	lsls	r2, r2, #2
 80020d6:	4093      	lsls	r3, r2
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020de:	493b      	ldr	r1, [pc, #236]	; (80021cc <HAL_GPIO_Init+0x2e0>)
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020f8:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	4937      	ldr	r1, [pc, #220]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002106:	4b35      	ldr	r3, [pc, #212]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	43db      	mvns	r3, r3
 800210e:	4933      	ldr	r1, [pc, #204]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002110:	4013      	ands	r3, r2
 8002112:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	492d      	ldr	r1, [pc, #180]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002138:	4013      	ands	r3, r2
 800213a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4923      	ldr	r1, [pc, #140]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	43db      	mvns	r3, r3
 800215e:	491f      	ldr	r1, [pc, #124]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002160:	4013      	ands	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4919      	ldr	r1, [pc, #100]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4915      	ldr	r1, [pc, #84]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 8002188:	4013      	ands	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	3301      	adds	r3, #1
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f aeaf 	bne.w	8001f00 <HAL_GPIO_Init+0x14>
  }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	372c      	adds	r7, #44	; 0x2c
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	10320000 	.word	0x10320000
 80021b4:	10310000 	.word	0x10310000
 80021b8:	10220000 	.word	0x10220000
 80021bc:	10210000 	.word	0x10210000
 80021c0:	10120000 	.word	0x10120000
 80021c4:	10110000 	.word	0x10110000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40010800 	.word	0x40010800
 80021d4:	40010c00 	.word	0x40010c00
 80021d8:	40011000 	.word	0x40011000
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e001      	b.n	8002202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	807b      	strh	r3, [r7, #2]
 800221a:	4613      	mov	r3, r2
 800221c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800221e:	787b      	ldrb	r3, [r7, #1]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800222a:	e003      	b.n	8002234 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	041a      	lsls	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	611a      	str	r2, [r3, #16]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43d9      	mvns	r1, r3
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	400b      	ands	r3, r1
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e26c      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8087 	beq.w	800239e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002290:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b04      	cmp	r3, #4
 800229a:	d00c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800229c:	4b8f      	ldr	r3, [pc, #572]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d112      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
 80022a8:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d10b      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d06c      	beq.n	800239c <HAL_RCC_OscConfig+0x12c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d168      	bne.n	800239c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e246      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x76>
 80022d8:	4b80      	ldr	r3, [pc, #512]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a7f      	ldr	r2, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e02e      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x98>
 80022ee:	4b7b      	ldr	r3, [pc, #492]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7a      	ldr	r2, [pc, #488]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b78      	ldr	r3, [pc, #480]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a77      	ldr	r2, [pc, #476]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e01d      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0xbc>
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a71      	ldr	r2, [pc, #452]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 800232c:	4b6b      	ldr	r3, [pc, #428]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6a      	ldr	r2, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a67      	ldr	r2, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fcb6 	bl	8001cbc <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fcb2 	bl	8001cbc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1fa      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0xe4>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fca2 	bl	8001cbc <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fc9e 	bl	8001cbc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1e6      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x10c>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d063      	beq.n	8002472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023aa:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d11c      	bne.n	80023fc <HAL_RCC_OscConfig+0x18c>
 80023c2:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x176>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e1ba      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4939      	ldr	r1, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	e03a      	b.n	8002472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002404:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fc57 	bl	8001cbc <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002412:	f7ff fc53 	bl	8001cbc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e19b      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4927      	ldr	r1, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7ff fc36 	bl	8001cbc <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7ff fc32 	bl	8001cbc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e17a      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03a      	beq.n	80024f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d019      	beq.n	80024ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7ff fc16 	bl	8001cbc <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f7ff fc12 	bl	8001cbc <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e15a      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f000 fa9a 	bl	80029ec <RCC_Delay>
 80024b8:	e01c      	b.n	80024f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fbfc 	bl	8001cbc <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c6:	e00f      	b.n	80024e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff fbf8 	bl	8001cbc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d908      	bls.n	80024e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e140      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	42420000 	.word	0x42420000
 80024e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b9e      	ldr	r3, [pc, #632]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e9      	bne.n	80024c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a6 	beq.w	800264e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b97      	ldr	r3, [pc, #604]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b94      	ldr	r3, [pc, #592]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a93      	ldr	r2, [pc, #588]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b91      	ldr	r3, [pc, #580]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b8e      	ldr	r3, [pc, #568]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b8b      	ldr	r3, [pc, #556]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a8a      	ldr	r2, [pc, #552]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7ff fbb9 	bl	8001cbc <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7ff fbb5 	bl	8001cbc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b64      	cmp	r3, #100	; 0x64
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0fd      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b81      	ldr	r3, [pc, #516]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x312>
 8002574:	4b7b      	ldr	r3, [pc, #492]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a7a      	ldr	r2, [pc, #488]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	e02d      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x334>
 800258a:	4b76      	ldr	r3, [pc, #472]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a75      	ldr	r2, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	e01c      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x356>
 80025ac:	4b6d      	ldr	r3, [pc, #436]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a6c      	ldr	r2, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a69      	ldr	r2, [pc, #420]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	e00b      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a66      	ldr	r2, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	4b64      	ldr	r3, [pc, #400]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a63      	ldr	r2, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7ff fb69 	bl	8001cbc <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7ff fb65 	bl	8001cbc <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0ab      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ee      	beq.n	80025ee <HAL_RCC_OscConfig+0x37e>
 8002610:	e014      	b.n	800263c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fb53 	bl	8001cbc <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7ff fb4f 	bl	8001cbc <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e095      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ee      	bne.n	800261a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d105      	bne.n	800264e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002642:	4b48      	ldr	r3, [pc, #288]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8081 	beq.w	800275a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002658:	4b42      	ldr	r3, [pc, #264]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d061      	beq.n	8002728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d146      	bne.n	80026fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff fb23 	bl	8001cbc <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7ff fb1f 	bl	8001cbc <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e067      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	4b35      	ldr	r3, [pc, #212]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	492d      	ldr	r1, [pc, #180]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a19      	ldr	r1, [r3, #32]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	430b      	orrs	r3, r1
 80026c6:	4927      	ldr	r1, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff faf3 	bl	8001cbc <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026da:	f7ff faef 	bl	8001cbc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e037      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x46a>
 80026f8:	e02f      	b.n	800275a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fadc 	bl	8001cbc <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7ff fad8 	bl	8001cbc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e020      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x498>
 8002726:	e018      	b.n	800275a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e013      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
 800276c:	42420060 	.word	0x42420060

08002770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d0      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d910      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4965      	ldr	r1, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d040      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d115      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e073      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06b      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4936      	ldr	r1, [pc, #216]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7ff fa2c 	bl	8001cbc <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7ff fa28 	bl	8001cbc <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e053      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d210      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4922      	ldr	r1, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490a      	ldr	r1, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1cc>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f98a 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	08003268 	.word	0x08003268
 800293c:	2000001c 	.word	0x2000001c
 8002940:	20000024 	.word	0x20000024

08002944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x30>
 800296e:	2b08      	cmp	r3, #8
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x36>
 8002972:	e027      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	613b      	str	r3, [r7, #16]
      break;
 8002978:	e027      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	0c9b      	lsrs	r3, r3, #18
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d010      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0c5b      	lsrs	r3, r3, #17
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	4a11      	ldr	r2, [pc, #68]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 80029a6:	fb02 f203 	mul.w	r2, r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e004      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	613b      	str	r3, [r7, #16]
      break;
 80029c2:	e002      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 80029c6:	613b      	str	r3, [r7, #16]
      break;
 80029c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ca:	693b      	ldr	r3, [r7, #16]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	007a1200 	.word	0x007a1200
 80029e0:	08003278 	.word	0x08003278
 80029e4:	08003288 	.word	0x08003288
 80029e8:	003d0900 	.word	0x003d0900

080029ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <RCC_Delay+0x34>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <RCC_Delay+0x38>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a08:	bf00      	nop
  }
  while (Delay --);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f9      	bne.n	8002a08 <RCC_Delay+0x1c>
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	2000001c 	.word	0x2000001c
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e041      	b.n	8002abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff f814 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f000 fa6e 	bl	8002f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d001      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e035      	b.n	8002b4c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_TIM_Base_Start_IT+0x90>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x4e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x4e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_TIM_Base_Start_IT+0x94>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d111      	bne.n	8002b3a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d010      	beq.n	8002b4a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	e007      	b.n	8002b4a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0202 	mvn.w	r2, #2
 8002b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9b4 	bl	8002f10 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f9a7 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f9b6 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f98a 	bl	8002f10 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f97d 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f98c 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0208 	mvn.w	r2, #8
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f960 	bl	8002f10 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f953 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f962 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0210 	mvn.w	r2, #16
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f936 	bl	8002f10 <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f929 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f938 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0201 	mvn.w	r2, #1
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe ff5c 	bl	8001b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa6b 	bl	80031e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8fc 	bl	8002f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0220 	mvn.w	r2, #32
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa36 	bl	80031d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_TIM_ConfigClockSource+0x1c>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0b4      	b.n	8002ef6 <HAL_TIM_ConfigClockSource+0x186>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc4:	d03e      	beq.n	8002e44 <HAL_TIM_ConfigClockSource+0xd4>
 8002dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dca:	f200 8087 	bhi.w	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	f000 8086 	beq.w	8002ee2 <HAL_TIM_ConfigClockSource+0x172>
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	d87f      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b70      	cmp	r3, #112	; 0x70
 8002dde:	d01a      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0xa6>
 8002de0:	2b70      	cmp	r3, #112	; 0x70
 8002de2:	d87b      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b60      	cmp	r3, #96	; 0x60
 8002de6:	d050      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x11a>
 8002de8:	2b60      	cmp	r3, #96	; 0x60
 8002dea:	d877      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b50      	cmp	r3, #80	; 0x50
 8002dee:	d03c      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0xfa>
 8002df0:	2b50      	cmp	r3, #80	; 0x50
 8002df2:	d873      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d058      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x13a>
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d86f      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b30      	cmp	r3, #48	; 0x30
 8002dfe:	d064      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x15a>
 8002e00:	2b30      	cmp	r3, #48	; 0x30
 8002e02:	d86b      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d060      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x15a>
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d867      	bhi.n	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d05c      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x15a>
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d05a      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x15a>
 8002e14:	e062      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6899      	ldr	r1, [r3, #8]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f000 f95e 	bl	80030e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	609a      	str	r2, [r3, #8]
      break;
 8002e42:	e04f      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6899      	ldr	r1, [r3, #8]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f000 f947 	bl	80030e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e66:	609a      	str	r2, [r3, #8]
      break;
 8002e68:	e03c      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f000 f8be 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2150      	movs	r1, #80	; 0x50
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f915 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002e88:	e02c      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f000 f8dc 	bl	8003054 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2160      	movs	r1, #96	; 0x60
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f905 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002ea8:	e01c      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f000 f89e 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2140      	movs	r1, #64	; 0x40
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f8f5 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002ec8:	e00c      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f000 f8ec 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002eda:	e003      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee0:	e000      	b.n	8002ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
	...

08002f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_Base_SetConfig+0xa8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <TIM_Base_SetConfig+0x28>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x28>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <TIM_Base_SetConfig+0xac>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d108      	bne.n	8002f82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <TIM_Base_SetConfig+0xa8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <TIM_Base_SetConfig+0x52>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d003      	beq.n	8002f9a <TIM_Base_SetConfig+0x52>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <TIM_Base_SetConfig+0xac>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d108      	bne.n	8002fac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <TIM_Base_SetConfig+0xa8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d103      	bne.n	8002fe0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	615a      	str	r2, [r3, #20]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40000400 	.word	0x40000400

08002ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0201 	bic.w	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f023 030a 	bic.w	r3, r3, #10
 8003034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0210 	bic.w	r2, r3, #16
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	031b      	lsls	r3, r3, #12
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003090:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f043 0307 	orr.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b087      	sub	sp, #28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003100:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	021a      	lsls	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	431a      	orrs	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4313      	orrs	r3, r2
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	609a      	str	r2, [r3, #8]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003138:	2302      	movs	r3, #2
 800313a:	e041      	b.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d004      	beq.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a10      	ldr	r2, [pc, #64]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d10c      	bne.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400

080031d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <__libc_init_array>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	2600      	movs	r6, #0
 80031fc:	4d0c      	ldr	r5, [pc, #48]	; (8003230 <__libc_init_array+0x38>)
 80031fe:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <__libc_init_array+0x3c>)
 8003200:	1b64      	subs	r4, r4, r5
 8003202:	10a4      	asrs	r4, r4, #2
 8003204:	42a6      	cmp	r6, r4
 8003206:	d109      	bne.n	800321c <__libc_init_array+0x24>
 8003208:	f000 f822 	bl	8003250 <_init>
 800320c:	2600      	movs	r6, #0
 800320e:	4d0a      	ldr	r5, [pc, #40]	; (8003238 <__libc_init_array+0x40>)
 8003210:	4c0a      	ldr	r4, [pc, #40]	; (800323c <__libc_init_array+0x44>)
 8003212:	1b64      	subs	r4, r4, r5
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	42a6      	cmp	r6, r4
 8003218:	d105      	bne.n	8003226 <__libc_init_array+0x2e>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003220:	4798      	blx	r3
 8003222:	3601      	adds	r6, #1
 8003224:	e7ee      	b.n	8003204 <__libc_init_array+0xc>
 8003226:	f855 3b04 	ldr.w	r3, [r5], #4
 800322a:	4798      	blx	r3
 800322c:	3601      	adds	r6, #1
 800322e:	e7f2      	b.n	8003216 <__libc_init_array+0x1e>
 8003230:	0800328c 	.word	0x0800328c
 8003234:	0800328c 	.word	0x0800328c
 8003238:	0800328c 	.word	0x0800328c
 800323c:	08003290 	.word	0x08003290

08003240 <memset>:
 8003240:	4603      	mov	r3, r0
 8003242:	4402      	add	r2, r0
 8003244:	4293      	cmp	r3, r2
 8003246:	d100      	bne.n	800324a <memset+0xa>
 8003248:	4770      	bx	lr
 800324a:	f803 1b01 	strb.w	r1, [r3], #1
 800324e:	e7f9      	b.n	8003244 <memset+0x4>

08003250 <_init>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	bf00      	nop
 8003254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003256:	bc08      	pop	{r3}
 8003258:	469e      	mov	lr, r3
 800325a:	4770      	bx	lr

0800325c <_fini>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr
