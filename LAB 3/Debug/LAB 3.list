
LAB 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033c4  080033c4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080033c4  080033c4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033c4  080033c4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080033cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000030  080033fc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080033fc  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000972e  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a31  00000000  00000000  00029787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002bb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a4f  00000000  00000000  0002c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b467  00000000  00000000  00042ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008251e  00000000  00000000  0004e326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  000d0898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08003388 	.word	0x08003388

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08003388 	.word	0x08003388

0800014c <display7SEGFirstSet>:
#include "main.h"




void display7SEGFirstSet(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( OUT6_GPIO_Port , OUT6_Pin,GPIO_PIN_SET ) ;
 8000154:	2201      	movs	r2, #1
 8000156:	2140      	movs	r1, #64	; 0x40
 8000158:	4898      	ldr	r0, [pc, #608]	; (80003bc <display7SEGFirstSet+0x270>)
 800015a:	f002 f8f4 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT7_GPIO_Port , OUT7_Pin,GPIO_PIN_SET ) ;
 800015e:	2201      	movs	r2, #1
 8000160:	2180      	movs	r1, #128	; 0x80
 8000162:	4896      	ldr	r0, [pc, #600]	; (80003bc <display7SEGFirstSet+0x270>)
 8000164:	f002 f8ef 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT8_GPIO_Port , OUT8_Pin,GPIO_PIN_SET ) ;
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016e:	4893      	ldr	r0, [pc, #588]	; (80003bc <display7SEGFirstSet+0x270>)
 8000170:	f002 f8e9 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT9_GPIO_Port , OUT9_Pin,GPIO_PIN_SET ) ;
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800017a:	4890      	ldr	r0, [pc, #576]	; (80003bc <display7SEGFirstSet+0x270>)
 800017c:	f002 f8e3 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT10_GPIO_Port , OUT10_Pin,GPIO_PIN_SET ) ;
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000186:	488d      	ldr	r0, [pc, #564]	; (80003bc <display7SEGFirstSet+0x270>)
 8000188:	f002 f8dd 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT11_GPIO_Port , OUT11_Pin,GPIO_PIN_SET )  ;
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000192:	488a      	ldr	r0, [pc, #552]	; (80003bc <display7SEGFirstSet+0x270>)
 8000194:	f002 f8d7 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT12_GPIO_Port , OUT12_Pin,GPIO_PIN_SET ) ;
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800019e:	4887      	ldr	r0, [pc, #540]	; (80003bc <display7SEGFirstSet+0x270>)
 80001a0:	f002 f8d1 	bl	8002346 <HAL_GPIO_WritePin>

	if(num == 0){
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d11c      	bne.n	80001e4 <display7SEGFirstSet+0x98>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 80001aa:	2140      	movs	r1, #64	; 0x40
 80001ac:	4883      	ldr	r0, [pc, #524]	; (80003bc <display7SEGFirstSet+0x270>)
 80001ae:	f002 f8e2 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 80001b2:	2180      	movs	r1, #128	; 0x80
 80001b4:	4881      	ldr	r0, [pc, #516]	; (80003bc <display7SEGFirstSet+0x270>)
 80001b6:	f002 f8de 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 80001ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001be:	487f      	ldr	r0, [pc, #508]	; (80003bc <display7SEGFirstSet+0x270>)
 80001c0:	f002 f8d9 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 80001c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c8:	487c      	ldr	r0, [pc, #496]	; (80003bc <display7SEGFirstSet+0x270>)
 80001ca:	f002 f8d4 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
 80001ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d2:	487a      	ldr	r0, [pc, #488]	; (80003bc <display7SEGFirstSet+0x270>)
 80001d4:	f002 f8cf 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 80001d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001dc:	4877      	ldr	r0, [pc, #476]	; (80003bc <display7SEGFirstSet+0x270>)
 80001de:	f002 f8ca 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
		//HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
	}
}
 80001e2:	e0e6      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 1){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d109      	bne.n	80001fe <display7SEGFirstSet+0xb2>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	4873      	ldr	r0, [pc, #460]	; (80003bc <display7SEGFirstSet+0x270>)
 80001ee:	f002 f8c2 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 80001f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f6:	4871      	ldr	r0, [pc, #452]	; (80003bc <display7SEGFirstSet+0x270>)
 80001f8:	f002 f8bd 	bl	8002376 <HAL_GPIO_TogglePin>
}
 80001fc:	e0d9      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 2){
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b02      	cmp	r3, #2
 8000202:	d117      	bne.n	8000234 <display7SEGFirstSet+0xe8>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	486d      	ldr	r0, [pc, #436]	; (80003bc <display7SEGFirstSet+0x270>)
 8000208:	f002 f8b5 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 800020c:	2180      	movs	r1, #128	; 0x80
 800020e:	486b      	ldr	r0, [pc, #428]	; (80003bc <display7SEGFirstSet+0x270>)
 8000210:	f002 f8b1 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 8000214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000218:	4868      	ldr	r0, [pc, #416]	; (80003bc <display7SEGFirstSet+0x270>)
 800021a:	f002 f8ac 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
 800021e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000222:	4866      	ldr	r0, [pc, #408]	; (80003bc <display7SEGFirstSet+0x270>)
 8000224:	f002 f8a7 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 8000228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022c:	4863      	ldr	r0, [pc, #396]	; (80003bc <display7SEGFirstSet+0x270>)
 800022e:	f002 f8a2 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000232:	e0be      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 3){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b03      	cmp	r3, #3
 8000238:	d117      	bne.n	800026a <display7SEGFirstSet+0x11e>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	485f      	ldr	r0, [pc, #380]	; (80003bc <display7SEGFirstSet+0x270>)
 800023e:	f002 f89a 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 8000242:	2180      	movs	r1, #128	; 0x80
 8000244:	485d      	ldr	r0, [pc, #372]	; (80003bc <display7SEGFirstSet+0x270>)
 8000246:	f002 f896 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 800024a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024e:	485b      	ldr	r0, [pc, #364]	; (80003bc <display7SEGFirstSet+0x270>)
 8000250:	f002 f891 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 8000254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000258:	4858      	ldr	r0, [pc, #352]	; (80003bc <display7SEGFirstSet+0x270>)
 800025a:	f002 f88c 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 800025e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000262:	4856      	ldr	r0, [pc, #344]	; (80003bc <display7SEGFirstSet+0x270>)
 8000264:	f002 f887 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000268:	e0a3      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 4){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d113      	bne.n	8000298 <display7SEGFirstSet+0x14c>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	4852      	ldr	r0, [pc, #328]	; (80003bc <display7SEGFirstSet+0x270>)
 8000274:	f002 f87f 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 8000278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027c:	484f      	ldr	r0, [pc, #316]	; (80003bc <display7SEGFirstSet+0x270>)
 800027e:	f002 f87a 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 8000282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000286:	484d      	ldr	r0, [pc, #308]	; (80003bc <display7SEGFirstSet+0x270>)
 8000288:	f002 f875 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 800028c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000290:	484a      	ldr	r0, [pc, #296]	; (80003bc <display7SEGFirstSet+0x270>)
 8000292:	f002 f870 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000296:	e08c      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 5){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b05      	cmp	r3, #5
 800029c:	d118      	bne.n	80002d0 <display7SEGFirstSet+0x184>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 800029e:	2140      	movs	r1, #64	; 0x40
 80002a0:	4846      	ldr	r0, [pc, #280]	; (80003bc <display7SEGFirstSet+0x270>)
 80002a2:	f002 f868 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	4844      	ldr	r0, [pc, #272]	; (80003bc <display7SEGFirstSet+0x270>)
 80002ac:	f002 f863 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 80002b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b4:	4841      	ldr	r0, [pc, #260]	; (80003bc <display7SEGFirstSet+0x270>)
 80002b6:	f002 f85e 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 80002ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002be:	483f      	ldr	r0, [pc, #252]	; (80003bc <display7SEGFirstSet+0x270>)
 80002c0:	f002 f859 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	483c      	ldr	r0, [pc, #240]	; (80003bc <display7SEGFirstSet+0x270>)
 80002ca:	f002 f854 	bl	8002376 <HAL_GPIO_TogglePin>
}
 80002ce:	e070      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 6){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b06      	cmp	r3, #6
 80002d4:	d11d      	bne.n	8000312 <display7SEGFirstSet+0x1c6>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 80002d6:	2140      	movs	r1, #64	; 0x40
 80002d8:	4838      	ldr	r0, [pc, #224]	; (80003bc <display7SEGFirstSet+0x270>)
 80002da:	f002 f84c 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4836      	ldr	r0, [pc, #216]	; (80003bc <display7SEGFirstSet+0x270>)
 80002e4:	f002 f847 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	4833      	ldr	r0, [pc, #204]	; (80003bc <display7SEGFirstSet+0x270>)
 80002ee:	f002 f842 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
 80002f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f6:	4831      	ldr	r0, [pc, #196]	; (80003bc <display7SEGFirstSet+0x270>)
 80002f8:	f002 f83d 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 80002fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000300:	482e      	ldr	r0, [pc, #184]	; (80003bc <display7SEGFirstSet+0x270>)
 8000302:	f002 f838 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 8000306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800030a:	482c      	ldr	r0, [pc, #176]	; (80003bc <display7SEGFirstSet+0x270>)
 800030c:	f002 f833 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000310:	e04f      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 7){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b07      	cmp	r3, #7
 8000316:	d10d      	bne.n	8000334 <display7SEGFirstSet+0x1e8>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 8000318:	2140      	movs	r1, #64	; 0x40
 800031a:	4828      	ldr	r0, [pc, #160]	; (80003bc <display7SEGFirstSet+0x270>)
 800031c:	f002 f82b 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 8000320:	2180      	movs	r1, #128	; 0x80
 8000322:	4826      	ldr	r0, [pc, #152]	; (80003bc <display7SEGFirstSet+0x270>)
 8000324:	f002 f827 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 8000328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032c:	4823      	ldr	r0, [pc, #140]	; (80003bc <display7SEGFirstSet+0x270>)
 800032e:	f002 f822 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000332:	e03e      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 8){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b08      	cmp	r3, #8
 8000338:	d121      	bne.n	800037e <display7SEGFirstSet+0x232>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 800033a:	2140      	movs	r1, #64	; 0x40
 800033c:	481f      	ldr	r0, [pc, #124]	; (80003bc <display7SEGFirstSet+0x270>)
 800033e:	f002 f81a 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	481d      	ldr	r0, [pc, #116]	; (80003bc <display7SEGFirstSet+0x270>)
 8000346:	f002 f816 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 800034a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800034e:	481b      	ldr	r0, [pc, #108]	; (80003bc <display7SEGFirstSet+0x270>)
 8000350:	f002 f811 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT9_GPIO_Port , OUT9_Pin ) ;
 8000354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <display7SEGFirstSet+0x270>)
 800035a:	f002 f80c 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT10_GPIO_Port , OUT10_Pin ) ;
 800035e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000362:	4816      	ldr	r0, [pc, #88]	; (80003bc <display7SEGFirstSet+0x270>)
 8000364:	f002 f807 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 8000368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <display7SEGFirstSet+0x270>)
 800036e:	f002 f802 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 8000372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <display7SEGFirstSet+0x270>)
 8000378:	f001 fffd 	bl	8002376 <HAL_GPIO_TogglePin>
}
 800037c:	e019      	b.n	80003b2 <display7SEGFirstSet+0x266>
	else if (num == 9){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b09      	cmp	r3, #9
 8000382:	d116      	bne.n	80003b2 <display7SEGFirstSet+0x266>
		HAL_GPIO_TogglePin ( OUT6_GPIO_Port , OUT6_Pin ) ;
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	480d      	ldr	r0, [pc, #52]	; (80003bc <display7SEGFirstSet+0x270>)
 8000388:	f001 fff5 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT7_GPIO_Port , OUT7_Pin ) ;
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	480b      	ldr	r0, [pc, #44]	; (80003bc <display7SEGFirstSet+0x270>)
 8000390:	f001 fff1 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT8_GPIO_Port , OUT8_Pin ) ;
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	4808      	ldr	r0, [pc, #32]	; (80003bc <display7SEGFirstSet+0x270>)
 800039a:	f001 ffec 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT11_GPIO_Port , OUT11_Pin ) ;
 800039e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <display7SEGFirstSet+0x270>)
 80003a4:	f001 ffe7 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT12_GPIO_Port , OUT12_Pin ) ;
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4803      	ldr	r0, [pc, #12]	; (80003bc <display7SEGFirstSet+0x270>)
 80003ae:	f001 ffe2 	bl	8002376 <HAL_GPIO_TogglePin>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40010800 	.word	0x40010800

080003c0 <display7SEGSecondSet>:

void display7SEGSecondSet(int num){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( OUT2_3_GPIO_Port , OUT2_3_Pin,GPIO_PIN_SET ) ;
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	488d      	ldr	r0, [pc, #564]	; (8000604 <display7SEGSecondSet+0x244>)
 80003ce:	f001 ffba 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_4_GPIO_Port , OUT2_4_Pin,GPIO_PIN_SET ) ;
 80003d2:	2201      	movs	r2, #1
 80003d4:	2110      	movs	r1, #16
 80003d6:	488b      	ldr	r0, [pc, #556]	; (8000604 <display7SEGSecondSet+0x244>)
 80003d8:	f001 ffb5 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_5_GPIO_Port , OUT2_5_Pin,GPIO_PIN_SET ) ;
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	4888      	ldr	r0, [pc, #544]	; (8000604 <display7SEGSecondSet+0x244>)
 80003e2:	f001 ffb0 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_6_GPIO_Port , OUT2_6_Pin,GPIO_PIN_SET ) ;
 80003e6:	2201      	movs	r2, #1
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	4886      	ldr	r0, [pc, #536]	; (8000604 <display7SEGSecondSet+0x244>)
 80003ec:	f001 ffab 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_7_GPIO_Port , OUT2_7_Pin,GPIO_PIN_SET ) ;
 80003f0:	2201      	movs	r2, #1
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	4883      	ldr	r0, [pc, #524]	; (8000604 <display7SEGSecondSet+0x244>)
 80003f6:	f001 ffa6 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_8_GPIO_Port , OUT2_8_Pin,GPIO_PIN_SET )  ;
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	4880      	ldr	r0, [pc, #512]	; (8000604 <display7SEGSecondSet+0x244>)
 8000402:	f001 ffa0 	bl	8002346 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( OUT2_9_GPIO_Port , OUT2_9_Pin,GPIO_PIN_SET ) ;
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040c:	487d      	ldr	r0, [pc, #500]	; (8000604 <display7SEGSecondSet+0x244>)
 800040e:	f001 ff9a 	bl	8002346 <HAL_GPIO_WritePin>

	if(num == 0){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d119      	bne.n	800044c <display7SEGSecondSet+0x8c>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 8000418:	2108      	movs	r1, #8
 800041a:	487a      	ldr	r0, [pc, #488]	; (8000604 <display7SEGSecondSet+0x244>)
 800041c:	f001 ffab 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000420:	2110      	movs	r1, #16
 8000422:	4878      	ldr	r0, [pc, #480]	; (8000604 <display7SEGSecondSet+0x244>)
 8000424:	f001 ffa7 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 8000428:	2120      	movs	r1, #32
 800042a:	4876      	ldr	r0, [pc, #472]	; (8000604 <display7SEGSecondSet+0x244>)
 800042c:	f001 ffa3 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	4874      	ldr	r0, [pc, #464]	; (8000604 <display7SEGSecondSet+0x244>)
 8000434:	f001 ff9f 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	4872      	ldr	r0, [pc, #456]	; (8000604 <display7SEGSecondSet+0x244>)
 800043c:	f001 ff9b 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 8000440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000444:	486f      	ldr	r0, [pc, #444]	; (8000604 <display7SEGSecondSet+0x244>)
 8000446:	f001 ff96 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
		//HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
	}
}
 800044a:	e0d6      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 1){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d108      	bne.n	8000464 <display7SEGSecondSet+0xa4>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000452:	2110      	movs	r1, #16
 8000454:	486b      	ldr	r0, [pc, #428]	; (8000604 <display7SEGSecondSet+0x244>)
 8000456:	f001 ff8e 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 800045a:	2120      	movs	r1, #32
 800045c:	4869      	ldr	r0, [pc, #420]	; (8000604 <display7SEGSecondSet+0x244>)
 800045e:	f001 ff8a 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000462:	e0ca      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 2){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d115      	bne.n	8000496 <display7SEGSecondSet+0xd6>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800046a:	2108      	movs	r1, #8
 800046c:	4865      	ldr	r0, [pc, #404]	; (8000604 <display7SEGSecondSet+0x244>)
 800046e:	f001 ff82 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000472:	2110      	movs	r1, #16
 8000474:	4863      	ldr	r0, [pc, #396]	; (8000604 <display7SEGSecondSet+0x244>)
 8000476:	f001 ff7e 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	4861      	ldr	r0, [pc, #388]	; (8000604 <display7SEGSecondSet+0x244>)
 800047e:	f001 ff7a 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	485f      	ldr	r0, [pc, #380]	; (8000604 <display7SEGSecondSet+0x244>)
 8000486:	f001 ff76 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 800048a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048e:	485d      	ldr	r0, [pc, #372]	; (8000604 <display7SEGSecondSet+0x244>)
 8000490:	f001 ff71 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000494:	e0b1      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 3){
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2b03      	cmp	r3, #3
 800049a:	d115      	bne.n	80004c8 <display7SEGSecondSet+0x108>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800049c:	2108      	movs	r1, #8
 800049e:	4859      	ldr	r0, [pc, #356]	; (8000604 <display7SEGSecondSet+0x244>)
 80004a0:	f001 ff69 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 80004a4:	2110      	movs	r1, #16
 80004a6:	4857      	ldr	r0, [pc, #348]	; (8000604 <display7SEGSecondSet+0x244>)
 80004a8:	f001 ff65 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 80004ac:	2120      	movs	r1, #32
 80004ae:	4855      	ldr	r0, [pc, #340]	; (8000604 <display7SEGSecondSet+0x244>)
 80004b0:	f001 ff61 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 80004b4:	2140      	movs	r1, #64	; 0x40
 80004b6:	4853      	ldr	r0, [pc, #332]	; (8000604 <display7SEGSecondSet+0x244>)
 80004b8:	f001 ff5d 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 80004bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c0:	4850      	ldr	r0, [pc, #320]	; (8000604 <display7SEGSecondSet+0x244>)
 80004c2:	f001 ff58 	bl	8002376 <HAL_GPIO_TogglePin>
}
 80004c6:	e098      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 4){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d112      	bne.n	80004f4 <display7SEGSecondSet+0x134>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 80004ce:	2110      	movs	r1, #16
 80004d0:	484c      	ldr	r0, [pc, #304]	; (8000604 <display7SEGSecondSet+0x244>)
 80004d2:	f001 ff50 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 80004d6:	2120      	movs	r1, #32
 80004d8:	484a      	ldr	r0, [pc, #296]	; (8000604 <display7SEGSecondSet+0x244>)
 80004da:	f001 ff4c 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 80004de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e2:	4848      	ldr	r0, [pc, #288]	; (8000604 <display7SEGSecondSet+0x244>)
 80004e4:	f001 ff47 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	4845      	ldr	r0, [pc, #276]	; (8000604 <display7SEGSecondSet+0x244>)
 80004ee:	f001 ff42 	bl	8002376 <HAL_GPIO_TogglePin>
}
 80004f2:	e082      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 5){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b05      	cmp	r3, #5
 80004f8:	d116      	bne.n	8000528 <display7SEGSecondSet+0x168>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 80004fa:	2108      	movs	r1, #8
 80004fc:	4841      	ldr	r0, [pc, #260]	; (8000604 <display7SEGSecondSet+0x244>)
 80004fe:	f001 ff3a 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 8000502:	2120      	movs	r1, #32
 8000504:	483f      	ldr	r0, [pc, #252]	; (8000604 <display7SEGSecondSet+0x244>)
 8000506:	f001 ff36 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 800050a:	2140      	movs	r1, #64	; 0x40
 800050c:	483d      	ldr	r0, [pc, #244]	; (8000604 <display7SEGSecondSet+0x244>)
 800050e:	f001 ff32 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	483b      	ldr	r0, [pc, #236]	; (8000604 <display7SEGSecondSet+0x244>)
 8000518:	f001 ff2d 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 800051c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000520:	4838      	ldr	r0, [pc, #224]	; (8000604 <display7SEGSecondSet+0x244>)
 8000522:	f001 ff28 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000526:	e068      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 6){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b06      	cmp	r3, #6
 800052c:	d11a      	bne.n	8000564 <display7SEGSecondSet+0x1a4>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800052e:	2108      	movs	r1, #8
 8000530:	4834      	ldr	r0, [pc, #208]	; (8000604 <display7SEGSecondSet+0x244>)
 8000532:	f001 ff20 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 8000536:	2120      	movs	r1, #32
 8000538:	4832      	ldr	r0, [pc, #200]	; (8000604 <display7SEGSecondSet+0x244>)
 800053a:	f001 ff1c 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4830      	ldr	r0, [pc, #192]	; (8000604 <display7SEGSecondSet+0x244>)
 8000542:	f001 ff18 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	482e      	ldr	r0, [pc, #184]	; (8000604 <display7SEGSecondSet+0x244>)
 800054a:	f001 ff14 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 800054e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000552:	482c      	ldr	r0, [pc, #176]	; (8000604 <display7SEGSecondSet+0x244>)
 8000554:	f001 ff0f 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	4829      	ldr	r0, [pc, #164]	; (8000604 <display7SEGSecondSet+0x244>)
 800055e:	f001 ff0a 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000562:	e04a      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 7){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b07      	cmp	r3, #7
 8000568:	d10c      	bne.n	8000584 <display7SEGSecondSet+0x1c4>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800056a:	2108      	movs	r1, #8
 800056c:	4825      	ldr	r0, [pc, #148]	; (8000604 <display7SEGSecondSet+0x244>)
 800056e:	f001 ff02 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000572:	2110      	movs	r1, #16
 8000574:	4823      	ldr	r0, [pc, #140]	; (8000604 <display7SEGSecondSet+0x244>)
 8000576:	f001 fefe 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 800057a:	2120      	movs	r1, #32
 800057c:	4821      	ldr	r0, [pc, #132]	; (8000604 <display7SEGSecondSet+0x244>)
 800057e:	f001 fefa 	bl	8002376 <HAL_GPIO_TogglePin>
}
 8000582:	e03a      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 8){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b08      	cmp	r3, #8
 8000588:	d11e      	bne.n	80005c8 <display7SEGSecondSet+0x208>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 800058a:	2108      	movs	r1, #8
 800058c:	481d      	ldr	r0, [pc, #116]	; (8000604 <display7SEGSecondSet+0x244>)
 800058e:	f001 fef2 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 8000592:	2110      	movs	r1, #16
 8000594:	481b      	ldr	r0, [pc, #108]	; (8000604 <display7SEGSecondSet+0x244>)
 8000596:	f001 feee 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 800059a:	2120      	movs	r1, #32
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <display7SEGSecondSet+0x244>)
 800059e:	f001 feea 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_6_GPIO_Port , OUT2_6_Pin ) ;
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	4817      	ldr	r0, [pc, #92]	; (8000604 <display7SEGSecondSet+0x244>)
 80005a6:	f001 fee6 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_7_GPIO_Port , OUT2_7_Pin ) ;
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <display7SEGSecondSet+0x244>)
 80005ae:	f001 fee2 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 80005b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <display7SEGSecondSet+0x244>)
 80005b8:	f001 fedd 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 80005bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <display7SEGSecondSet+0x244>)
 80005c2:	f001 fed8 	bl	8002376 <HAL_GPIO_TogglePin>
}
 80005c6:	e018      	b.n	80005fa <display7SEGSecondSet+0x23a>
	else if (num == 9){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	d115      	bne.n	80005fa <display7SEGSecondSet+0x23a>
		HAL_GPIO_TogglePin ( OUT2_3_GPIO_Port , OUT2_3_Pin ) ;
 80005ce:	2108      	movs	r1, #8
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <display7SEGSecondSet+0x244>)
 80005d2:	f001 fed0 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_4_GPIO_Port , OUT2_4_Pin ) ;
 80005d6:	2110      	movs	r1, #16
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <display7SEGSecondSet+0x244>)
 80005da:	f001 fecc 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_5_GPIO_Port , OUT2_5_Pin ) ;
 80005de:	2120      	movs	r1, #32
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <display7SEGSecondSet+0x244>)
 80005e2:	f001 fec8 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_8_GPIO_Port , OUT2_8_Pin ) ;
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <display7SEGSecondSet+0x244>)
 80005ec:	f001 fec3 	bl	8002376 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( OUT2_9_GPIO_Port , OUT2_9_Pin ) ;
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <display7SEGSecondSet+0x244>)
 80005f6:	f001 febe 	bl	8002376 <HAL_GPIO_TogglePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010c00 	.word	0x40010c00

08000608 <update7SEGFirstSet>:

void update7SEGFirstSet ( int index,int first,int second) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
switch ( index ) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <update7SEGFirstSet+0x1a>
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d004      	beq.n	800062a <update7SEGFirstSet+0x22>
	case 1:
// Display the second 7 SEG with led_buffer [1]
		display7SEGFirstSet(second);
		break ;
	default :
		break ;
 8000620:	e007      	b.n	8000632 <update7SEGFirstSet+0x2a>
		display7SEGFirstSet(first);
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f7ff fd92 	bl	800014c <display7SEGFirstSet>
		break ;
 8000628:	e003      	b.n	8000632 <update7SEGFirstSet+0x2a>
		display7SEGFirstSet(second);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff fd8e 	bl	800014c <display7SEGFirstSet>
		break ;
 8000630:	bf00      	nop
	}
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <update7SEGSecondSet>:

void update7SEGSecondSet ( int index,int first,int second) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b084      	sub	sp, #16
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
switch ( index ) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <update7SEGSecondSet+0x1a>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d004      	beq.n	800065c <update7SEGSecondSet+0x22>
	case 1:
// Display the second 7 SEG with led_buffer [1]
		display7SEGSecondSet(second);
		break ;
	default :
		break ;
 8000652:	e007      	b.n	8000664 <update7SEGSecondSet+0x2a>
		display7SEGSecondSet(first);
 8000654:	68b8      	ldr	r0, [r7, #8]
 8000656:	f7ff feb3 	bl	80003c0 <display7SEGSecondSet>
		break ;
 800065a:	e003      	b.n	8000664 <update7SEGSecondSet+0x2a>
		display7SEGSecondSet(second);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff feaf 	bl	80003c0 <display7SEGSecondSet>
		break ;
 8000662:	bf00      	nop
	}
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <fsm_for_input_processing>:

enum ButtonState { BUTTON_RELEASED,BUTTON_PRESSED,BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
static enum ButtonState buttonState = BUTTON_RELEASED ;
static enum ButtonState buttonState1 = BUTTON_RELEASED ;
static enum ButtonState buttonState2 = BUTTON_RELEASED ;
void fsm_for_input_processing ( void ) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
switch ( buttonState ){
 8000670:	4b6f      	ldr	r3, [pc, #444]	; (8000830 <fsm_for_input_processing+0x1c4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d030      	beq.n	80006da <fsm_for_input_processing+0x6e>
 8000678:	2b02      	cmp	r3, #2
 800067a:	dc43      	bgt.n	8000704 <fsm_for_input_processing+0x98>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <fsm_for_input_processing+0x1a>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d010      	beq.n	80006a6 <fsm_for_input_processing+0x3a>
 8000684:	e03e      	b.n	8000704 <fsm_for_input_processing+0x98>
	case BUTTON_RELEASED :
		if( is_button_pressed (0) ) {
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f8da 	bl	8000840 <is_button_pressed>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d033      	beq.n	80006fa <fsm_for_input_processing+0x8e>
			buttonState = BUTTON_PRESSED ;
 8000692:	4b67      	ldr	r3, [pc, #412]	; (8000830 <fsm_for_input_processing+0x1c4>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin ( OUT13_GPIO_Port , OUT13_Pin ,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4865      	ldr	r0, [pc, #404]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80006a0:	f001 fe51 	bl	8002346 <HAL_GPIO_WritePin>
		// INCREASE VALUE OF PORT A BY ONE UNIT
		}
	break ;
 80006a4:	e029      	b.n	80006fa <fsm_for_input_processing+0x8e>
	case BUTTON_PRESSED :
		if (! is_button_pressed (0) ) {
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8ca 	bl	8000840 <is_button_pressed>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d109      	bne.n	80006c6 <fsm_for_input_processing+0x5a>
			HAL_GPIO_WritePin ( OUT13_GPIO_Port , OUT13_Pin ,GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	485e      	ldr	r0, [pc, #376]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80006ba:	f001 fe44 	bl	8002346 <HAL_GPIO_WritePin>
			buttonState = BUTTON_RELEASED ;
 80006be:	4b5c      	ldr	r3, [pc, #368]	; (8000830 <fsm_for_input_processing+0x1c4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
			if( is_button_pressed_1s(0)) {

				buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
			}
		}
	break ;
 80006c4:	e01b      	b.n	80006fe <fsm_for_input_processing+0x92>
			if( is_button_pressed_1s(0)) {
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f8d4 	bl	8000874 <is_button_pressed_1s>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d015      	beq.n	80006fe <fsm_for_input_processing+0x92>
				buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 80006d2:	4b57      	ldr	r3, [pc, #348]	; (8000830 <fsm_for_input_processing+0x1c4>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	701a      	strb	r2, [r3, #0]
	break ;
 80006d8:	e011      	b.n	80006fe <fsm_for_input_processing+0x92>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND :
		if (! is_button_pressed (0) ) {
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f8b0 	bl	8000840 <is_button_pressed>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10d      	bne.n	8000702 <fsm_for_input_processing+0x96>
			HAL_GPIO_WritePin ( OUT13_GPIO_Port , OUT13_Pin ,GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ec:	4851      	ldr	r0, [pc, #324]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80006ee:	f001 fe2a 	bl	8002346 <HAL_GPIO_WritePin>
			buttonState = BUTTON_RELEASED ;
 80006f2:	4b4f      	ldr	r3, [pc, #316]	; (8000830 <fsm_for_input_processing+0x1c4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
		}
	break ;
 80006f8:	e003      	b.n	8000702 <fsm_for_input_processing+0x96>
	break ;
 80006fa:	bf00      	nop
 80006fc:	e002      	b.n	8000704 <fsm_for_input_processing+0x98>
	break ;
 80006fe:	bf00      	nop
 8000700:	e000      	b.n	8000704 <fsm_for_input_processing+0x98>
	break ;
 8000702:	bf00      	nop
	}


switch ( buttonState1 ){
 8000704:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d030      	beq.n	800076e <fsm_for_input_processing+0x102>
 800070c:	2b02      	cmp	r3, #2
 800070e:	dc43      	bgt.n	8000798 <fsm_for_input_processing+0x12c>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <fsm_for_input_processing+0xae>
 8000714:	2b01      	cmp	r3, #1
 8000716:	d010      	beq.n	800073a <fsm_for_input_processing+0xce>
 8000718:	e03e      	b.n	8000798 <fsm_for_input_processing+0x12c>
	case BUTTON_RELEASED :
		if( is_button_pressed (1) ) {
 800071a:	2001      	movs	r0, #1
 800071c:	f000 f890 	bl	8000840 <is_button_pressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d033      	beq.n	800078e <fsm_for_input_processing+0x122>
			buttonState1 = BUTTON_PRESSED ;
 8000726:	4b44      	ldr	r3, [pc, #272]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin ( OUT14_GPIO_Port , OUT14_Pin ,GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000732:	4840      	ldr	r0, [pc, #256]	; (8000834 <fsm_for_input_processing+0x1c8>)
 8000734:	f001 fe07 	bl	8002346 <HAL_GPIO_WritePin>
		// INCREASE VALUE OF PORT A BY ONE UNIT
		}
	break ;
 8000738:	e029      	b.n	800078e <fsm_for_input_processing+0x122>
	case BUTTON_PRESSED :
		if (! is_button_pressed (1) ) {
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f880 	bl	8000840 <is_button_pressed>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d109      	bne.n	800075a <fsm_for_input_processing+0xee>
			HAL_GPIO_WritePin ( OUT14_GPIO_Port , OUT14_Pin ,GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074c:	4839      	ldr	r0, [pc, #228]	; (8000834 <fsm_for_input_processing+0x1c8>)
 800074e:	f001 fdfa 	bl	8002346 <HAL_GPIO_WritePin>
			buttonState1 = BUTTON_RELEASED ;
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
			if( is_button_pressed_1s (1) ) {

				buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
			}
		}
	break ;
 8000758:	e01b      	b.n	8000792 <fsm_for_input_processing+0x126>
			if( is_button_pressed_1s (1) ) {
 800075a:	2001      	movs	r0, #1
 800075c:	f000 f88a 	bl	8000874 <is_button_pressed_1s>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d015      	beq.n	8000792 <fsm_for_input_processing+0x126>
				buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000768:	2202      	movs	r2, #2
 800076a:	701a      	strb	r2, [r3, #0]
	break ;
 800076c:	e011      	b.n	8000792 <fsm_for_input_processing+0x126>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND :
		if (! is_button_pressed (1) ) {
 800076e:	2001      	movs	r0, #1
 8000770:	f000 f866 	bl	8000840 <is_button_pressed>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10d      	bne.n	8000796 <fsm_for_input_processing+0x12a>
			HAL_GPIO_WritePin ( OUT14_GPIO_Port , OUT14_Pin ,GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000780:	482c      	ldr	r0, [pc, #176]	; (8000834 <fsm_for_input_processing+0x1c8>)
 8000782:	f001 fde0 	bl	8002346 <HAL_GPIO_WritePin>
			buttonState1 = BUTTON_RELEASED ;
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <fsm_for_input_processing+0x1cc>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		}
	break ;
 800078c:	e003      	b.n	8000796 <fsm_for_input_processing+0x12a>
	break ;
 800078e:	bf00      	nop
 8000790:	e002      	b.n	8000798 <fsm_for_input_processing+0x12c>
	break ;
 8000792:	bf00      	nop
 8000794:	e000      	b.n	8000798 <fsm_for_input_processing+0x12c>
	break ;
 8000796:	bf00      	nop
	}



switch ( buttonState2 ){
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <fsm_for_input_processing+0x1d0>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d030      	beq.n	8000802 <fsm_for_input_processing+0x196>
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	dc43      	bgt.n	800082c <fsm_for_input_processing+0x1c0>
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <fsm_for_input_processing+0x142>
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d010      	beq.n	80007ce <fsm_for_input_processing+0x162>
		}
	break ;
	}


}
 80007ac:	e03e      	b.n	800082c <fsm_for_input_processing+0x1c0>
		if( is_button_pressed (2) ) {
 80007ae:	2002      	movs	r0, #2
 80007b0:	f000 f846 	bl	8000840 <is_button_pressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d033      	beq.n	8000822 <fsm_for_input_processing+0x1b6>
			buttonState2 = BUTTON_PRESSED ;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <fsm_for_input_processing+0x1d0>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin ( OUT15_GPIO_Port , OUT15_Pin ,GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c6:	481b      	ldr	r0, [pc, #108]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80007c8:	f001 fdbd 	bl	8002346 <HAL_GPIO_WritePin>
	break ;
 80007cc:	e029      	b.n	8000822 <fsm_for_input_processing+0x1b6>
		if (! is_button_pressed (2) ) {
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 f836 	bl	8000840 <is_button_pressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d109      	bne.n	80007ee <fsm_for_input_processing+0x182>
			HAL_GPIO_WritePin ( OUT15_GPIO_Port , OUT15_Pin ,GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <fsm_for_input_processing+0x1c8>)
 80007e2:	f001 fdb0 	bl	8002346 <HAL_GPIO_WritePin>
			buttonState2 = BUTTON_RELEASED ;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <fsm_for_input_processing+0x1d0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	break ;
 80007ec:	e01b      	b.n	8000826 <fsm_for_input_processing+0x1ba>
			if( is_button_pressed_1s (2) ) {
 80007ee:	2002      	movs	r0, #2
 80007f0:	f000 f840 	bl	8000874 <is_button_pressed_1s>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d015      	beq.n	8000826 <fsm_for_input_processing+0x1ba>
				buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <fsm_for_input_processing+0x1d0>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	701a      	strb	r2, [r3, #0]
	break ;
 8000800:	e011      	b.n	8000826 <fsm_for_input_processing+0x1ba>
		if (! is_button_pressed (2) ) {
 8000802:	2002      	movs	r0, #2
 8000804:	f000 f81c 	bl	8000840 <is_button_pressed>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10d      	bne.n	800082a <fsm_for_input_processing+0x1be>
			HAL_GPIO_WritePin ( OUT15_GPIO_Port , OUT15_Pin ,GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <fsm_for_input_processing+0x1c8>)
 8000816:	f001 fd96 	bl	8002346 <HAL_GPIO_WritePin>
			buttonState2 = BUTTON_RELEASED ;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <fsm_for_input_processing+0x1d0>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	break ;
 8000820:	e003      	b.n	800082a <fsm_for_input_processing+0x1be>
	break ;
 8000822:	bf00      	nop
 8000824:	e002      	b.n	800082c <fsm_for_input_processing+0x1c0>
	break ;
 8000826:	bf00      	nop
 8000828:	e000      	b.n	800082c <fsm_for_input_processing+0x1c0>
	break ;
 800082a:	bf00      	nop
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000004c 	.word	0x2000004c
 8000834:	40010800 	.word	0x40010800
 8000838:	2000004d 	.word	0x2000004d
 800083c:	2000004e 	.word	0x2000004e

08000840 <is_button_pressed>:
static uint8_t flagForButtonPress1s [ N0_OF_BUTTONS ];
static uint16_t counterForButtonPress1s [ N0_OF_BUTTONS ];



unsigned char is_button_pressed ( uint8_t index ) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d901      	bls.n	8000854 <is_button_pressed+0x14>
 8000850:	2300      	movs	r3, #0
 8000852:	e007      	b.n	8000864 <is_button_pressed+0x24>
	return ( buttonBuffer [index] == BUTTON_IS_PRESSED ) ;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a06      	ldr	r2, [pc, #24]	; (8000870 <is_button_pressed+0x30>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000050 	.word	0x20000050

08000874 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s ( unsigned char index ) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff ;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d901      	bls.n	8000888 <is_button_pressed_1s+0x14>
 8000884:	23ff      	movs	r3, #255	; 0xff
 8000886:	e007      	b.n	8000898 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s [ index ] == 1) ;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <is_button_pressed_1s+0x30>)
 800088c:	5cd3      	ldrb	r3, [r2, r3]
 800088e:	2b01      	cmp	r3, #1
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	2000005c 	.word	0x2000005c

080008a8 <button_reading>:


void button_reading ( void ) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
		debounceButtonBuffer2[0] = debounceButtonBuffer1[0];
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <button_reading+0xcc>)
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <button_reading+0xd0>)
 80008b4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[0] = HAL_GPIO_ReadPin (BUTTON_GPIO_Port , BUTTON_Pin ) ;
 80008b6:	2101      	movs	r1, #1
 80008b8:	4830      	ldr	r0, [pc, #192]	; (800097c <button_reading+0xd4>)
 80008ba:	f001 fd2d 	bl	8002318 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <button_reading+0xcc>)
 80008c4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[1] = debounceButtonBuffer1[1];
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <button_reading+0xcc>)
 80008c8:	785a      	ldrb	r2, [r3, #1]
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <button_reading+0xd0>)
 80008cc:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer1[1] = HAL_GPIO_ReadPin (BUTTON1_GPIO_Port , BUTTON1_Pin ) ;
 80008ce:	2102      	movs	r1, #2
 80008d0:	482a      	ldr	r0, [pc, #168]	; (800097c <button_reading+0xd4>)
 80008d2:	f001 fd21 	bl	8002318 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <button_reading+0xcc>)
 80008dc:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer2[2] = debounceButtonBuffer1[2];
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <button_reading+0xcc>)
 80008e0:	789a      	ldrb	r2, [r3, #2]
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <button_reading+0xd0>)
 80008e4:	709a      	strb	r2, [r3, #2]
		debounceButtonBuffer1[2] = HAL_GPIO_ReadPin (BUTTON2_GPIO_Port , BUTTON2_Pin ) ;
 80008e6:	2104      	movs	r1, #4
 80008e8:	4824      	ldr	r0, [pc, #144]	; (800097c <button_reading+0xd4>)
 80008ea:	f001 fd15 	bl	8002318 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <button_reading+0xcc>)
 80008f4:	709a      	strb	r2, [r3, #2]

		for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e033      	b.n	8000964 <button_reading+0xbc>
			if( debounceButtonBuffer1 [i] == debounceButtonBuffer2[i]){
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <button_reading+0xcc>)
 8000900:	5cd2      	ldrb	r2, [r2, r3]
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	491c      	ldr	r1, [pc, #112]	; (8000978 <button_reading+0xd0>)
 8000906:	5ccb      	ldrb	r3, [r1, r3]
 8000908:	429a      	cmp	r2, r3
 800090a:	d128      	bne.n	800095e <button_reading+0xb6>
				buttonBuffer[i] = debounceButtonBuffer1 [i];
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4918      	ldr	r1, [pc, #96]	; (8000974 <button_reading+0xcc>)
 8000912:	5c89      	ldrb	r1, [r1, r2]
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <button_reading+0xd8>)
 8000916:	54d1      	strb	r1, [r2, r3]
				if( buttonBuffer[i] == BUTTON_IS_PRESSED ) {
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <button_reading+0xd8>)
 800091c:	5cd3      	ldrb	r3, [r2, r3]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d114      	bne.n	800094c <button_reading+0xa4>
					if( counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING ) {
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <button_reading+0xdc>)
 8000926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092a:	2b63      	cmp	r3, #99	; 0x63
 800092c:	d809      	bhi.n	8000942 <button_reading+0x9a>
						counterForButtonPress1s[i]++;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <button_reading+0xdc>)
 8000932:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000936:	3201      	adds	r2, #1
 8000938:	b291      	uxth	r1, r2
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <button_reading+0xdc>)
 800093c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000940:	e00d      	b.n	800095e <button_reading+0xb6>
					}
					else {
						flagForButtonPress1s[i] = 1;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a10      	ldr	r2, [pc, #64]	; (8000988 <button_reading+0xe0>)
 8000946:	2101      	movs	r1, #1
 8000948:	54d1      	strb	r1, [r2, r3]
 800094a:	e008      	b.n	800095e <button_reading+0xb6>
					}
				}
				else {
					counterForButtonPress1s[i] = 0;
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <button_reading+0xdc>)
 8000950:	2100      	movs	r1, #0
 8000952:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress1s[i] = 0;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <button_reading+0xe0>)
 800095a:	2100      	movs	r1, #0
 800095c:	54d1      	strb	r1, [r2, r3]
		for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3301      	adds	r3, #1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d9c8      	bls.n	80008fc <button_reading+0x54>
			}
		}



}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000054 	.word	0x20000054
 8000978:	20000058 	.word	0x20000058
 800097c:	40010c00 	.word	0x40010c00
 8000980:	20000050 	.word	0x20000050
 8000984:	20000060 	.word	0x20000060
 8000988:	2000005c 	.word	0x2000005c

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f001 f9d8 	bl	8001d44 <HAL_Init>
  /* USER CODE BEGIN Init */
  //
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f80c 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f892 	bl	8000ac0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800099c:	f000 f844 	bl	8000a28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <main+0x20>)
 80009a2:	f002 f92d 	bl	8002c00 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing ();
 80009a6:	f7ff fe61 	bl	800066c <fsm_for_input_processing>
 80009aa:	e7fc      	b.n	80009a6 <main+0x1a>
 80009ac:	2000009c 	.word	0x2000009c

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b090      	sub	sp, #64	; 0x40
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	2228      	movs	r2, #40	; 0x28
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fcda 	bl	8003378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d6:	2301      	movs	r3, #1
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009da:	2310      	movs	r3, #16
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 fcde 	bl	80023a8 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009f2:	f000 f8c7 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 ff4a 	bl	80028a8 <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f8b3 	bl	8000b84 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3740      	adds	r7, #64	; 0x40
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a4e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a5c:	2209      	movs	r2, #9
 8000a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a6e:	f002 f877 	bl	8002b60 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a78:	f000 f884 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a8a:	f002 fa0d 	bl	8002ea8 <HAL_TIM_ConfigClockSource>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a94:	f000 f876 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_TIM2_Init+0x94>)
 8000aa6:	f002 fbd9 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ab0:	f000 f868 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000009c 	.word	0x2000009c

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_GPIO_Init+0xb8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a27      	ldr	r2, [pc, #156]	; (8000b78 <MX_GPIO_Init+0xb8>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_GPIO_Init+0xb8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <MX_GPIO_Init+0xb8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <MX_GPIO_Init+0xb8>)
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_GPIO_Init+0xb8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0308 	and.w	r3, r3, #8
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin
 8000b04:	2200      	movs	r2, #0
 8000b06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b0a:	481c      	ldr	r0, [pc, #112]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000b0c:	f001 fc1b 	bl	8002346 <HAL_GPIO_WritePin>
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin|OUT11_Pin
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_12_Pin|OUT2_13_Pin|OUT2_14_Pin|OUT2_15_Pin
 8000b10:	2200      	movs	r2, #0
 8000b12:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000b18:	f001 fc15 	bl	8002346 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin
                           OUT4_Pin OUT5_Pin OUT6_Pin OUT7_Pin
                           OUT8_Pin OUT9_Pin OUT10_Pin OUT11_Pin
                           OUT12_Pin OUT13_Pin OUT14_Pin OUT15_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin
 8000b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b20:	60bb      	str	r3, [r7, #8]
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin|OUT11_Pin
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	4619      	mov	r1, r3
 8000b34:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000b36:	f001 fa75 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000b4e:	f001 fa69 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT2_12_Pin OUT2_13_Pin OUT2_14_Pin OUT2_15_Pin
                           OUT2_3_Pin OUT2_4_Pin OUT2_5_Pin OUT2_6_Pin
                           OUT2_7_Pin OUT2_8_Pin OUT2_9_Pin */
  GPIO_InitStruct.Pin = OUT2_12_Pin|OUT2_13_Pin|OUT2_14_Pin|OUT2_15_Pin
 8000b52:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 8000b56:	60bb      	str	r3, [r7, #8]
                          |OUT2_3_Pin|OUT2_4_Pin|OUT2_5_Pin|OUT2_6_Pin
                          |OUT2_7_Pin|OUT2_8_Pin|OUT2_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2302      	movs	r3, #2
 8000b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000b6c:	f001 fa5a 	bl	8002024 <HAL_GPIO_Init>

}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_MspInit+0x5c>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_MspInit+0x5c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_MspInit+0x5c>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x5c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d113      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	201c      	movs	r0, #28
 8000c24:	f001 f9c7 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c28:	201c      	movs	r0, #28
 8000c2a:	f001 f9e0 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f001 f8a5 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <TIM2_IRQHandler+0x10>)
 8000c92:	f002 f801 	bl	8002c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000009c 	.word	0x2000009c

08000ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <HAL_TIM_PeriodElapsedCallback>:
static int TempGREEN1 = GREEN;
static int TempYELLOW1 = YELLOW;


void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if (Intitalizer == 0){
 8000cb4:	4b90      	ldr	r3, [pc, #576]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d16a      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0xe6>
		TotalTime2 = TotalTime2*TicktoSecond;
 8000cbc:	4b8f      	ldr	r3, [pc, #572]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a8f      	ldr	r2, [pc, #572]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	4a8c      	ldr	r2, [pc, #560]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000cca:	6013      	str	r3, [r2, #0]
		TotalTime = TotalTime*TicktoSecond;
 8000ccc:	4b8d      	ldr	r3, [pc, #564]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a8b      	ldr	r2, [pc, #556]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	4a8a      	ldr	r2, [pc, #552]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000cda:	6013      	str	r3, [r2, #0]
		R = RED1*TicktoSecond;
 8000cdc:	4b8a      	ldr	r3, [pc, #552]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a87      	ldr	r2, [pc, #540]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	4a88      	ldr	r2, [pc, #544]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000cea:	6013      	str	r3, [r2, #0]
		G = GREEN1*TicktoSecond;
 8000cec:	4b88      	ldr	r3, [pc, #544]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a83      	ldr	r2, [pc, #524]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	4a86      	ldr	r2, [pc, #536]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000cfa:	6013      	str	r3, [r2, #0]
		Y = YELLOW1*TicktoSecond;
 8000cfc:	4b86      	ldr	r3, [pc, #536]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a7f      	ldr	r2, [pc, #508]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	fb02 f303 	mul.w	r3, r2, r3
 8000d08:	4a84      	ldr	r2, [pc, #528]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000d0a:	6013      	str	r3, [r2, #0]
		R1 = RED1;
 8000d0c:	4b7e      	ldr	r3, [pc, #504]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a83      	ldr	r2, [pc, #524]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000d12:	6013      	str	r3, [r2, #0]
		G1 = GREEN1;
 8000d14:	4b7e      	ldr	r3, [pc, #504]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a82      	ldr	r2, [pc, #520]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000d1a:	6013      	str	r3, [r2, #0]
		Y1 = YELLOW1;
 8000d1c:	4b7e      	ldr	r3, [pc, #504]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a81      	ldr	r2, [pc, #516]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000d22:	6013      	str	r3, [r2, #0]
		R2 = RED1;
 8000d24:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a80      	ldr	r2, [pc, #512]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000d2a:	6013      	str	r3, [r2, #0]
		G2 = GREEN1;
 8000d2c:	4b78      	ldr	r3, [pc, #480]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a7f      	ldr	r2, [pc, #508]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000d32:	6013      	str	r3, [r2, #0]
		Y2 = YELLOW1;
 8000d34:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a7e      	ldr	r2, [pc, #504]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000d3a:	6013      	str	r3, [r2, #0]
		DisplayCycleTime = TicktoSecond / 2;
 8000d3c:	4b70      	ldr	r3, [pc, #448]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	0fda      	lsrs	r2, r3, #31
 8000d42:	4413      	add	r3, r2
 8000d44:	105b      	asrs	r3, r3, #1
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b7b      	ldr	r3, [pc, #492]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000d4a:	601a      	str	r2, [r3, #0]
		DisplayCycleTime1 = DisplayCycleTime;
 8000d4c:	4b7a      	ldr	r3, [pc, #488]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a7a      	ldr	r2, [pc, #488]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000d52:	6013      	str	r3, [r2, #0]
		Intitalizer = 1;
 8000d54:	4b68      	ldr	r3, [pc, #416]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
		debounce = TicktoSecond/2;
 8000d5a:	4b69      	ldr	r3, [pc, #420]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	0fda      	lsrs	r2, r3, #31
 8000d60:	4413      	add	r3, r2
 8000d62:	105b      	asrs	r3, r3, #1
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b76      	ldr	r3, [pc, #472]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000d68:	601a      	str	r2, [r3, #0]
		debounce1 = debounce;
 8000d6a:	4b75      	ldr	r3, [pc, #468]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a75      	ldr	r2, [pc, #468]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000d70:	6013      	str	r3, [r2, #0]
		debounce2 = debounce;
 8000d72:	4b73      	ldr	r3, [pc, #460]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a74      	ldr	r2, [pc, #464]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d78:	6013      	str	r3, [r2, #0]
		debounce3 = debounce;
 8000d7a:	4b71      	ldr	r3, [pc, #452]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a73      	ldr	r2, [pc, #460]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d80:	6013      	str	r3, [r2, #0]
		SecondCount = TicktoSecond/2;
 8000d82:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0fda      	lsrs	r2, r3, #31
 8000d88:	4413      	add	r3, r2
 8000d8a:	105b      	asrs	r3, r3, #1
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000d90:	601a      	str	r2, [r3, #0]
	}

	if ( HAL_GPIO_ReadPin (OUT13_GPIO_Port , OUT13_Pin) == GPIO_PIN_RESET && debounce1>= debounce){
 8000d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d96:	486f      	ldr	r0, [pc, #444]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d98:	f001 fabe 	bl	8002318 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8130 	bne.w	8001004 <HAL_TIM_PeriodElapsedCallback+0x358>
 8000da4:	4b67      	ldr	r3, [pc, #412]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f2c0 8129 	blt.w	8001004 <HAL_TIM_PeriodElapsedCallback+0x358>
		if (Mode == 0){
 8000db2:	4b69      	ldr	r3, [pc, #420]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d131      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x172>
			HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4865      	ldr	r0, [pc, #404]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000dc0:	f001 fac1 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4862      	ldr	r0, [pc, #392]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000dca:	f001 fabc 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4860      	ldr	r0, [pc, #384]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000dd4:	f001 fab7 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2108      	movs	r1, #8
 8000ddc:	485d      	ldr	r0, [pc, #372]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000dde:	f001 fab2 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2110      	movs	r1, #16
 8000de6:	485b      	ldr	r0, [pc, #364]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000de8:	f001 faad 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2120      	movs	r1, #32
 8000df0:	4858      	ldr	r0, [pc, #352]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000df2:	f001 faa8 	bl	8002346 <HAL_GPIO_WritePin>
			flipflop = 0;
 8000df6:	4b59      	ldr	r3, [pc, #356]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
			flipflop1 = 0;
 8000dfc:	4b58      	ldr	r3, [pc, #352]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
			Mode++;
 8000e02:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	4a53      	ldr	r2, [pc, #332]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e0a:	6013      	str	r3, [r2, #0]
			LEDfirstSetNum = RED1;
 8000e0c:	4b3e      	ldr	r3, [pc, #248]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a54      	ldr	r2, [pc, #336]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e12:	6013      	str	r3, [r2, #0]
			LEDSecondSetNum = Mode;
 8000e14:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a53      	ldr	r2, [pc, #332]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e0ef      	b.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x352>
		}
		else if (Mode == 1){
 8000e1e:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d131      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x1de>
			HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2101      	movs	r1, #1
 8000e2a:	484a      	ldr	r0, [pc, #296]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e2c:	f001 fa8b 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2102      	movs	r1, #2
 8000e34:	4847      	ldr	r0, [pc, #284]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e36:	f001 fa86 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	4845      	ldr	r0, [pc, #276]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e40:	f001 fa81 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2108      	movs	r1, #8
 8000e48:	4842      	ldr	r0, [pc, #264]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e4a:	f001 fa7c 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2110      	movs	r1, #16
 8000e52:	4840      	ldr	r0, [pc, #256]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e54:	f001 fa77 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	483d      	ldr	r0, [pc, #244]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e5e:	f001 fa72 	bl	8002346 <HAL_GPIO_WritePin>
			flipflop = 0;
 8000e62:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
			flipflop1 = 0;
 8000e68:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
			Mode++;
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	4a38      	ldr	r2, [pc, #224]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e76:	6013      	str	r3, [r2, #0]
			LEDfirstSetNum = YELLOW1;
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a39      	ldr	r2, [pc, #228]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e7e:	6013      	str	r3, [r2, #0]
			LEDSecondSetNum = Mode;
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a38      	ldr	r2, [pc, #224]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e0b9      	b.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x352>
		}
		else if (Mode == 2){
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d16c      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x2c0>
			HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2101      	movs	r1, #1
 8000e96:	482f      	ldr	r0, [pc, #188]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e98:	f001 fa55 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	482c      	ldr	r0, [pc, #176]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ea2:	f001 fa50 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	482a      	ldr	r0, [pc, #168]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000eac:	f001 fa4b 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000eb6:	f001 fa46 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	4825      	ldr	r0, [pc, #148]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ec0:	f001 fa41 	bl	8002346 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4822      	ldr	r0, [pc, #136]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000eca:	f001 fa3c 	bl	8002346 <HAL_GPIO_WritePin>
			flipflop = 0;
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
			flipflop1 = 0;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
			Mode++;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ee2:	6013      	str	r3, [r2, #0]
			LEDfirstSetNum = GREEN1;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000eea:	6013      	str	r3, [r2, #0]
			LEDSecondSetNum = Mode;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e083      	b.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x352>
 8000ef6:	bf00      	nop
 8000ef8:	20000068 	.word	0x20000068
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	20000004 	.word	0x20000004
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	200000fc 	.word	0x200000fc
 8000f10:	20000014 	.word	0x20000014
 8000f14:	200000f4 	.word	0x200000f4
 8000f18:	20000018 	.word	0x20000018
 8000f1c:	200000ec 	.word	0x200000ec
 8000f20:	200000f0 	.word	0x200000f0
 8000f24:	20000108 	.word	0x20000108
 8000f28:	2000010c 	.word	0x2000010c
 8000f2c:	20000100 	.word	0x20000100
 8000f30:	20000104 	.word	0x20000104
 8000f34:	200000e4 	.word	0x200000e4
 8000f38:	200000f8 	.word	0x200000f8
 8000f3c:	2000007c 	.word	0x2000007c
 8000f40:	200000e8 	.word	0x200000e8
 8000f44:	2000008c 	.word	0x2000008c
 8000f48:	20000090 	.word	0x20000090
 8000f4c:	20000094 	.word	0x20000094
 8000f50:	20000098 	.word	0x20000098
 8000f54:	40010800 	.word	0x40010800
 8000f58:	20000088 	.word	0x20000088
 8000f5c:	20000080 	.word	0x20000080
 8000f60:	20000084 	.word	0x20000084
 8000f64:	20000074 	.word	0x20000074
 8000f68:	20000078 	.word	0x20000078
		}
		else{
			TotalTime = (RED1 + GREEN1 + YELLOW1)*TicktoSecond;
 8000f6c:	4b96      	ldr	r3, [pc, #600]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b96      	ldr	r3, [pc, #600]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	441a      	add	r2, r3
 8000f76:	4b96      	ldr	r3, [pc, #600]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a95      	ldr	r2, [pc, #596]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a94      	ldr	r2, [pc, #592]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000f86:	6013      	str	r3, [r2, #0]
			TotalTime2 = TotalTime;
 8000f88:	4b93      	ldr	r3, [pc, #588]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a93      	ldr	r2, [pc, #588]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000f8e:	6013      	str	r3, [r2, #0]
			R1 = RED1;
 8000f90:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a92      	ldr	r2, [pc, #584]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000f96:	6013      	str	r3, [r2, #0]
			G1 = GREEN1;
 8000f98:	4b8c      	ldr	r3, [pc, #560]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a91      	ldr	r2, [pc, #580]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000f9e:	6013      	str	r3, [r2, #0]
			Y1 = YELLOW1;
 8000fa0:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a90      	ldr	r2, [pc, #576]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000fa6:	6013      	str	r3, [r2, #0]
			R2 = RED1;
 8000fa8:	4b87      	ldr	r3, [pc, #540]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a8f      	ldr	r2, [pc, #572]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000fae:	6013      	str	r3, [r2, #0]
			G2 = GREEN1;
 8000fb0:	4b86      	ldr	r3, [pc, #536]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a8e      	ldr	r2, [pc, #568]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000fb6:	6013      	str	r3, [r2, #0]
			Y2 = YELLOW1;
 8000fb8:	4b85      	ldr	r3, [pc, #532]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a8d      	ldr	r2, [pc, #564]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000fbe:	6013      	str	r3, [r2, #0]
			LEDindex = 0;
 8000fc0:	4b8d      	ldr	r3, [pc, #564]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
			LEDindex1 = 0;
 8000fc6:	4b8d      	ldr	r3, [pc, #564]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
			LEDfirstSetNum = 0;
 8000fcc:	4b8c      	ldr	r3, [pc, #560]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
			LEDSecondSetNum = 0;
 8000fd2:	4b8c      	ldr	r3, [pc, #560]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
			DisplayCycleTime1 = DisplayCycleTime;
 8000fd8:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a8b      	ldr	r2, [pc, #556]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000fde:	6013      	str	r3, [r2, #0]
			TempRED1 = RED1;
 8000fe0:	4b79      	ldr	r3, [pc, #484]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a8a      	ldr	r2, [pc, #552]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000fe6:	6013      	str	r3, [r2, #0]
			TempYELLOW1 = YELLOW1;
 8000fe8:	4b79      	ldr	r3, [pc, #484]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a89      	ldr	r2, [pc, #548]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000fee:	6013      	str	r3, [r2, #0]
			TempGREEN1 = GREEN1;
 8000ff0:	4b76      	ldr	r3, [pc, #472]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a88      	ldr	r2, [pc, #544]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000ff6:	6013      	str	r3, [r2, #0]
			Mode = 0;
 8000ff8:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
		}
		debounce1 = 0;
 8000ffe:	4b88      	ldr	r3, [pc, #544]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
	}
	debounce1++;
 8001004:	4b86      	ldr	r3, [pc, #536]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a85      	ldr	r2, [pc, #532]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800100c:	6013      	str	r3, [r2, #0]
	switch(Mode){
 800100e:	4b83      	ldr	r3, [pc, #524]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b03      	cmp	r3, #3
 8001014:	f200 8645 	bhi.w	8001ca2 <HAL_TIM_PeriodElapsedCallback+0xff6>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001031 	.word	0x08001031
 8001024:	08001577 	.word	0x08001577
 8001028:	080017f5 	.word	0x080017f5
 800102c:	08001a6d 	.word	0x08001a6d
		case 0:
			if( TotalTime2 <= TotalTime && TotalTime2 > TotalTime - R) {
 8001030:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b68      	ldr	r3, [pc, #416]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	dc18      	bgt.n	800106e <HAL_TIM_PeriodElapsedCallback+0x3c2>
 800103c:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b78      	ldr	r3, [pc, #480]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	4b65      	ldr	r3, [pc, #404]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	da0f      	bge.n	800106e <HAL_TIM_PeriodElapsedCallback+0x3c2>
				HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	4875      	ldr	r0, [pc, #468]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001054:	f001 f977 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2102      	movs	r1, #2
 800105c:	4872      	ldr	r0, [pc, #456]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800105e:	f001 f972 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2104      	movs	r1, #4
 8001066:	4870      	ldr	r0, [pc, #448]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001068:	f001 f96d 	bl	8002346 <HAL_GPIO_WritePin>
 800106c:	e043      	b.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x44a>

			}
			else if (TotalTime2 <= TotalTime - R && TotalTime2 > TotalTime - R - G){
 800106e:	4b5a      	ldr	r3, [pc, #360]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1ad2      	subs	r2, r2, r3
 8001078:	4b58      	ldr	r3, [pc, #352]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x530>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	db1b      	blt.n	80010b8 <HAL_TIM_PeriodElapsedCallback+0x40c>
 8001080:	4b55      	ldr	r3, [pc, #340]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b67      	ldr	r3, [pc, #412]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	1ad2      	subs	r2, r2, r3
 800108a:	4b68      	ldr	r3, [pc, #416]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x580>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	4b52      	ldr	r3, [pc, #328]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	da0f      	bge.n	80010b8 <HAL_TIM_PeriodElapsedCallback+0x40c>
				HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2101      	movs	r1, #1
 800109c:	4862      	ldr	r0, [pc, #392]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800109e:	f001 f952 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2102      	movs	r1, #2
 80010a6:	4860      	ldr	r0, [pc, #384]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80010a8:	f001 f94d 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2104      	movs	r1, #4
 80010b0:	485d      	ldr	r0, [pc, #372]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80010b2:	f001 f948 	bl	8002346 <HAL_GPIO_WritePin>
 80010b6:	e01e      	b.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x44a>
			}
			else if (TotalTime2 <= TotalTime - R - G && TotalTime2 > 0){
 80010b8:	4b47      	ldr	r3, [pc, #284]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b59      	ldr	r3, [pc, #356]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1ad2      	subs	r2, r2, r3
 80010c2:	4b5a      	ldr	r3, [pc, #360]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x580>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1ad2      	subs	r2, r2, r3
 80010c8:	4b44      	ldr	r3, [pc, #272]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x530>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	db12      	blt.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x44a>
 80010d0:	4b42      	ldr	r3, [pc, #264]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x530>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dd0e      	ble.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x44a>
				HAL_GPIO_WritePin ( OUT0_GPIO_Port , OUT0_Pin ,GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2101      	movs	r1, #1
 80010dc:	4852      	ldr	r0, [pc, #328]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80010de:	f001 f932 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT1_GPIO_Port , OUT1_Pin ,GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2102      	movs	r1, #2
 80010e6:	4850      	ldr	r0, [pc, #320]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80010e8:	f001 f92d 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT2_GPIO_Port , OUT2_Pin ,GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2104      	movs	r1, #4
 80010f0:	484d      	ldr	r0, [pc, #308]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80010f2:	f001 f928 	bl	8002346 <HAL_GPIO_WritePin>
			}
			if (TotalTime2 % TicktoSecond == 0){
 80010f6:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x530>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001102:	fb02 f201 	mul.w	r2, r2, r1
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 80d0 	bne.w	80012ae <HAL_TIM_PeriodElapsedCallback+0x602>

				switch (LEDindex) {
 800110e:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d030      	beq.n	8001178 <HAL_TIM_PeriodElapsedCallback+0x4cc>
 8001116:	2b02      	cmp	r3, #2
 8001118:	dc43      	bgt.n	80011a2 <HAL_TIM_PeriodElapsedCallback+0x4f6>
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x478>
 800111e:	2b01      	cmp	r3, #1
 8001120:	d015      	beq.n	800114e <HAL_TIM_PeriodElapsedCallback+0x4a2>
							LEDindex = 0;
							Y1 = YELLOW1;
						}
						break ;
					default :
						break ;
 8001122:	e03e      	b.n	80011a2 <HAL_TIM_PeriodElapsedCallback+0x4f6>
						LEDfirstSetNum = R1;
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a35      	ldr	r2, [pc, #212]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800112a:	6013      	str	r3, [r2, #0]
						R1--;
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001134:	6013      	str	r3, [r2, #0]
						if (R1 == 0){
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d133      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x4fa>
							LEDindex = 1;
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
							R1 = RED1;
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800114a:	6013      	str	r3, [r2, #0]
						break ;
 800114c:	e02b      	b.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x4fa>
						LEDfirstSetNum = G1;
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001154:	6013      	str	r3, [r2, #0]
						G1--;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800115e:	6013      	str	r3, [r2, #0]
						if (G1 == 0){
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d120      	bne.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x4fe>
							LEDindex = 2;
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800116a:	2202      	movs	r2, #2
 800116c:	601a      	str	r2, [r3, #0]
							G1 = GREEN1;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001174:	6013      	str	r3, [r2, #0]
						break ;
 8001176:	e018      	b.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x4fe>
						LEDfirstSetNum = Y1;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a20      	ldr	r2, [pc, #128]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800117e:	6013      	str	r3, [r2, #0]
						Y1--;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3b01      	subs	r3, #1
 8001186:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001188:	6013      	str	r3, [r2, #0]
						if (Y1 == 0){
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10d      	bne.n	80011ae <HAL_TIM_PeriodElapsedCallback+0x502>
							LEDindex = 0;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
							Y1 = YELLOW1;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x524>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800119e:	6013      	str	r3, [r2, #0]
						break ;
 80011a0:	e005      	b.n	80011ae <HAL_TIM_PeriodElapsedCallback+0x502>
						break ;
 80011a2:	bf00      	nop
 80011a4:	e004      	b.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x504>
						break ;
 80011a6:	bf00      	nop
 80011a8:	e002      	b.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x504>
						break ;
 80011aa:	bf00      	nop
 80011ac:	e000      	b.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x504>
						break ;
 80011ae:	bf00      	nop
					}
				switch (LEDindex1) {
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x550>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d065      	beq.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x5d8>
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	dc7a      	bgt.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x606>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d037      	beq.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x584>
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d04a      	beq.n	800125a <HAL_TIM_PeriodElapsedCallback+0x5ae>
							LEDindex1 = 0;
							R2 = RED1;
						}
						break ;
					default :
						break ;
 80011c4:	e075      	b.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x606>
 80011c6:	bf00      	nop
 80011c8:	20000010 	.word	0x20000010
 80011cc:	20000014 	.word	0x20000014
 80011d0:	20000018 	.word	0x20000018
 80011d4:	20000004 	.word	0x20000004
 80011d8:	20000008 	.word	0x20000008
 80011dc:	2000000c 	.word	0x2000000c
 80011e0:	200000f0 	.word	0x200000f0
 80011e4:	20000108 	.word	0x20000108
 80011e8:	2000010c 	.word	0x2000010c
 80011ec:	20000100 	.word	0x20000100
 80011f0:	20000104 	.word	0x20000104
 80011f4:	200000e4 	.word	0x200000e4
 80011f8:	2000006c 	.word	0x2000006c
 80011fc:	20000070 	.word	0x20000070
 8001200:	20000074 	.word	0x20000074
 8001204:	20000078 	.word	0x20000078
 8001208:	200000f8 	.word	0x200000f8
 800120c:	2000007c 	.word	0x2000007c
 8001210:	2000001c 	.word	0x2000001c
 8001214:	20000024 	.word	0x20000024
 8001218:	20000020 	.word	0x20000020
 800121c:	20000088 	.word	0x20000088
 8001220:	2000008c 	.word	0x2000008c
 8001224:	200000fc 	.word	0x200000fc
 8001228:	40010800 	.word	0x40010800
 800122c:	200000f4 	.word	0x200000f4
						LEDSecondSetNum = G2;
 8001230:	4b9d      	ldr	r3, [pc, #628]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a9d      	ldr	r2, [pc, #628]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001236:	6013      	str	r3, [r2, #0]
						G2--;
 8001238:	4b9b      	ldr	r3, [pc, #620]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	4a9a      	ldr	r2, [pc, #616]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001240:	6013      	str	r3, [r2, #0]
						if (G2 == 0){
 8001242:	4b99      	ldr	r3, [pc, #612]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d135      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x60a>
							LEDindex1 = 1;
 800124a:	4b99      	ldr	r3, [pc, #612]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x804>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
							G2 = GREEN1;
 8001250:	4b98      	ldr	r3, [pc, #608]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a94      	ldr	r2, [pc, #592]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001256:	6013      	str	r3, [r2, #0]
						break ;
 8001258:	e02d      	b.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x60a>
						LEDSecondSetNum = Y2;
 800125a:	4b97      	ldr	r3, [pc, #604]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a93      	ldr	r2, [pc, #588]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001260:	6013      	str	r3, [r2, #0]
						Y2--;
 8001262:	4b95      	ldr	r3, [pc, #596]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3b01      	subs	r3, #1
 8001268:	4a93      	ldr	r2, [pc, #588]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 800126a:	6013      	str	r3, [r2, #0]
						if (Y2 == 0){
 800126c:	4b92      	ldr	r3, [pc, #584]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d122      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x60e>
							LEDindex1 = 2;
 8001274:	4b8e      	ldr	r3, [pc, #568]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x804>)
 8001276:	2202      	movs	r2, #2
 8001278:	601a      	str	r2, [r3, #0]
							Y2 = YELLOW1;
 800127a:	4b90      	ldr	r3, [pc, #576]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x810>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a8e      	ldr	r2, [pc, #568]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8001280:	6013      	str	r3, [r2, #0]
						break ;
 8001282:	e01a      	b.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x60e>
						LEDSecondSetNum = R2;
 8001284:	4b8e      	ldr	r3, [pc, #568]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a88      	ldr	r2, [pc, #544]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x800>)
 800128a:	6013      	str	r3, [r2, #0]
						R2--;
 800128c:	4b8c      	ldr	r3, [pc, #560]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x814>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	4a8b      	ldr	r2, [pc, #556]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001294:	6013      	str	r3, [r2, #0]
						if (R2 == 0){
 8001296:	4b8a      	ldr	r3, [pc, #552]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x612>
							LEDindex1 = 0;
 800129e:	4b84      	ldr	r3, [pc, #528]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x804>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
							R2 = RED1;
 80012a4:	4b87      	ldr	r3, [pc, #540]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a85      	ldr	r2, [pc, #532]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x814>)
 80012aa:	6013      	str	r3, [r2, #0]
						break ;
 80012ac:	e007      	b.n	80012be <HAL_TIM_PeriodElapsedCallback+0x612>
					}

				}
 80012ae:	bf00      	nop
 80012b0:	e006      	b.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x614>
						break ;
 80012b2:	bf00      	nop
 80012b4:	e004      	b.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x614>
						break ;
 80012b6:	bf00      	nop
 80012b8:	e002      	b.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x614>
						break ;
 80012ba:	bf00      	nop
 80012bc:	e000      	b.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0x614>
						break ;
 80012be:	bf00      	nop


			if( TotalTime2 <= TotalTime && TotalTime2 > TotalTime - G) {
 80012c0:	4b81      	ldr	r3, [pc, #516]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dc18      	bgt.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x652>
 80012cc:	4b7f      	ldr	r3, [pc, #508]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b7f      	ldr	r3, [pc, #508]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x824>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	4b7c      	ldr	r3, [pc, #496]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	da0f      	bge.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x652>
				HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2108      	movs	r1, #8
 80012e2:	487c      	ldr	r0, [pc, #496]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80012e4:	f001 f82f 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2110      	movs	r1, #16
 80012ec:	4879      	ldr	r0, [pc, #484]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80012ee:	f001 f82a 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2120      	movs	r1, #32
 80012f6:	4877      	ldr	r0, [pc, #476]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80012f8:	f001 f825 	bl	8002346 <HAL_GPIO_WritePin>
 80012fc:	e043      	b.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x6da>
			}
			else if (TotalTime2 <= TotalTime - G && TotalTime2 > TotalTime - Y - G){
 80012fe:	4b73      	ldr	r3, [pc, #460]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1ad2      	subs	r2, r2, r3
 8001308:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	db1b      	blt.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x69c>
 8001310:	4b6e      	ldr	r3, [pc, #440]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	1ad2      	subs	r2, r2, r3
 800131a:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x824>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	da0f      	bge.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x69c>
				HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2108      	movs	r1, #8
 800132c:	4869      	ldr	r0, [pc, #420]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800132e:	f001 f80a 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2110      	movs	r1, #16
 8001336:	4867      	ldr	r0, [pc, #412]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001338:	f001 f805 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	2120      	movs	r1, #32
 8001340:	4864      	ldr	r0, [pc, #400]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001342:	f001 f800 	bl	8002346 <HAL_GPIO_WritePin>
 8001346:	e01e      	b.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x6da>
			}
			else if (TotalTime2 <= TotalTime - Y - G && TotalTime2 > 0){
 8001348:	4b60      	ldr	r3, [pc, #384]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	1ad2      	subs	r2, r2, r3
 8001352:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	db12      	blt.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x6da>
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd0e      	ble.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x6da>
				HAL_GPIO_WritePin ( OUT3_GPIO_Port , OUT3_Pin ,GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2108      	movs	r1, #8
 800136c:	4859      	ldr	r0, [pc, #356]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800136e:	f000 ffea 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT4_GPIO_Port , OUT4_Pin ,GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2110      	movs	r1, #16
 8001376:	4857      	ldr	r0, [pc, #348]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001378:	f000 ffe5 	bl	8002346 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( OUT5_GPIO_Port , OUT5_Pin ,GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2120      	movs	r1, #32
 8001380:	4854      	ldr	r0, [pc, #336]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001382:	f000 ffe0 	bl	8002346 <HAL_GPIO_WritePin>
			}

			if (DisplayCycleTime1 <= 0){
 8001386:	4b55      	ldr	r3, [pc, #340]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f300 80e0 	bgt.w	8001550 <HAL_TIM_PeriodElapsedCallback+0x8a4>
				switch(flipflop){
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_TIM_PeriodElapsedCallback+0x6f2>
 8001398:	2b01      	cmp	r3, #1
 800139a:	d02a      	beq.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x746>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
						update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
						flipflop = 0;
						break;
					default :
						break ;
 800139c:	e053      	b.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x79a>
						HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a4:	484f      	ldr	r0, [pc, #316]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80013a6:	f000 ffce 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b0:	484c      	ldr	r0, [pc, #304]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80013b2:	f000 ffc8 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGFirstSet(0,LEDfirstSetNum/10,LEDfirstSetNum%10);
 80013b6:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a4c      	ldr	r2, [pc, #304]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x840>)
 80013bc:	fb82 1203 	smull	r1, r2, r2, r3
 80013c0:	1092      	asrs	r2, r2, #2
 80013c2:	17db      	asrs	r3, r3, #31
 80013c4:	1ad0      	subs	r0, r2, r3
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b48      	ldr	r3, [pc, #288]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x840>)
 80013cc:	fb83 1302 	smull	r1, r3, r3, r2
 80013d0:	1099      	asrs	r1, r3, #2
 80013d2:	17d3      	asrs	r3, r2, #31
 80013d4:	1ac9      	subs	r1, r1, r3
 80013d6:	460b      	mov	r3, r1
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	1ad1      	subs	r1, r2, r3
 80013e0:	460a      	mov	r2, r1
 80013e2:	4601      	mov	r1, r0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff f90f 	bl	8000608 <update7SEGFirstSet>
						flipflop = 1;
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x834>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
						break;
 80013f0:	e029      	b.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x79a>
						HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f8:	483a      	ldr	r0, [pc, #232]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80013fa:	f000 ffa4 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001404:	4837      	ldr	r0, [pc, #220]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001406:	f000 ff9e 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a37      	ldr	r2, [pc, #220]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001410:	fb82 1203 	smull	r1, r2, r2, r3
 8001414:	1092      	asrs	r2, r2, #2
 8001416:	17db      	asrs	r3, r3, #31
 8001418:	1ad0      	subs	r0, r2, r3
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001420:	fb83 1302 	smull	r1, r3, r3, r2
 8001424:	1099      	asrs	r1, r3, #2
 8001426:	17d3      	asrs	r3, r2, #31
 8001428:	1ac9      	subs	r1, r1, r3
 800142a:	460b      	mov	r3, r1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	1ad1      	subs	r1, r2, r3
 8001434:	460a      	mov	r2, r1
 8001436:	4601      	mov	r1, r0
 8001438:	2001      	movs	r0, #1
 800143a:	f7ff f8e5 	bl	8000608 <update7SEGFirstSet>
						flipflop = 0;
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
						break;
 8001444:	bf00      	nop

				}
				switch(flipflop1){
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_TIM_PeriodElapsedCallback+0x7a8>
 800144e:	2b01      	cmp	r3, #1
 8001450:	d050      	beq.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x848>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
						update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
						flipflop1 = 0;
						break;
					default :
						break ;
 8001452:	e079      	b.n	8001548 <HAL_TIM_PeriodElapsedCallback+0x89c>
						HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	4822      	ldr	r0, [pc, #136]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x838>)
 800145c:	f000 ff73 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001466:	481f      	ldr	r0, [pc, #124]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001468:	f000 ff6d 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGSecondSet(0,LEDSecondSetNum/10,LEDSecondSetNum%10);
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x800>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001472:	fb82 1203 	smull	r1, r2, r2, r3
 8001476:	1092      	asrs	r2, r2, #2
 8001478:	17db      	asrs	r3, r3, #31
 800147a:	1ad0      	subs	r0, r2, r3
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x800>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001482:	fb83 1302 	smull	r1, r3, r3, r2
 8001486:	1099      	asrs	r1, r3, #2
 8001488:	17d3      	asrs	r3, r2, #31
 800148a:	1ac9      	subs	r1, r1, r3
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	1ad1      	subs	r1, r2, r3
 8001496:	460a      	mov	r2, r1
 8001498:	4601      	mov	r1, r0
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff f8cd 	bl	800063a <update7SEGSecondSet>
						flipflop1 = 1;
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
						break;
 80014a6:	e04f      	b.n	8001548 <HAL_TIM_PeriodElapsedCallback+0x89c>
 80014a8:	20000104 	.word	0x20000104
 80014ac:	20000078 	.word	0x20000078
 80014b0:	20000070 	.word	0x20000070
 80014b4:	20000014 	.word	0x20000014
 80014b8:	200000e4 	.word	0x200000e4
 80014bc:	20000018 	.word	0x20000018
 80014c0:	20000100 	.word	0x20000100
 80014c4:	20000010 	.word	0x20000010
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	20000008 	.word	0x20000008
 80014d0:	200000f4 	.word	0x200000f4
 80014d4:	40010800 	.word	0x40010800
 80014d8:	200000ec 	.word	0x200000ec
 80014dc:	2000007c 	.word	0x2000007c
 80014e0:	20000080 	.word	0x20000080
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	20000074 	.word	0x20000074
 80014ec:	66666667 	.word	0x66666667
 80014f0:	20000084 	.word	0x20000084
						HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fa:	48ac      	ldr	r0, [pc, #688]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 80014fc:	f000 ff23 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001506:	48a9      	ldr	r0, [pc, #676]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8001508:	f000 ff1d 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
 800150c:	4ba8      	ldr	r3, [pc, #672]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4aa8      	ldr	r2, [pc, #672]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1092      	asrs	r2, r2, #2
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad0      	subs	r0, r2, r3
 800151c:	4ba4      	ldr	r3, [pc, #656]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4ba4      	ldr	r3, [pc, #656]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 8001522:	fb83 1302 	smull	r1, r3, r3, r2
 8001526:	1099      	asrs	r1, r3, #2
 8001528:	17d3      	asrs	r3, r2, #31
 800152a:	1ac9      	subs	r1, r1, r3
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	1ad1      	subs	r1, r2, r3
 8001536:	460a      	mov	r2, r1
 8001538:	4601      	mov	r1, r0
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff f87d 	bl	800063a <update7SEGSecondSet>
						flipflop1 = 0;
 8001540:	4b9d      	ldr	r3, [pc, #628]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
						break;
 8001546:	bf00      	nop

				}
				DisplayCycleTime1 = DisplayCycleTime;
 8001548:	4b9c      	ldr	r3, [pc, #624]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0xb10>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a9c      	ldr	r2, [pc, #624]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 800154e:	6013      	str	r3, [r2, #0]
			}

			if (TotalTime2 <= 0){
 8001550:	4b9c      	ldr	r3, [pc, #624]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	dc03      	bgt.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x8b4>
				TotalTime2 = TotalTime;
 8001558:	4b9b      	ldr	r3, [pc, #620]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a99      	ldr	r2, [pc, #612]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 800155e:	6013      	str	r3, [r2, #0]
			}

			DisplayCycleTime1--;
 8001560:	4b97      	ldr	r3, [pc, #604]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a96      	ldr	r2, [pc, #600]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 8001568:	6013      	str	r3, [r2, #0]
			TotalTime2--;
 800156a:	4b96      	ldr	r3, [pc, #600]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a94      	ldr	r2, [pc, #592]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 8001572:	6013      	str	r3, [r2, #0]
			break;
 8001574:	e395      	b.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0xff6>
		case 1:
			SecondCount--;
 8001576:	4b95      	ldr	r3, [pc, #596]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0xb20>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3b01      	subs	r3, #1
 800157c:	4a93      	ldr	r2, [pc, #588]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0xb20>)
 800157e:	6013      	str	r3, [r2, #0]
			if (SecondCount <= 0){
 8001580:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0xb20>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	dc0f      	bgt.n	80015a8 <HAL_TIM_PeriodElapsedCallback+0x8fc>
				HAL_GPIO_TogglePin(OUT0_GPIO_Port,OUT0_Pin);
 8001588:	2101      	movs	r1, #1
 800158a:	4891      	ldr	r0, [pc, #580]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 800158c:	f000 fef3 	bl	8002376 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(OUT3_GPIO_Port,OUT3_Pin);
 8001590:	2108      	movs	r1, #8
 8001592:	488f      	ldr	r0, [pc, #572]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 8001594:	f000 feef 	bl	8002376 <HAL_GPIO_TogglePin>
				SecondCount = TicktoSecond/2;
 8001598:	4b8e      	ldr	r3, [pc, #568]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0fda      	lsrs	r2, r3, #31
 800159e:	4413      	add	r3, r2
 80015a0:	105b      	asrs	r3, r3, #1
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b89      	ldr	r3, [pc, #548]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0xb20>)
 80015a6:	601a      	str	r2, [r3, #0]
			}
			if ( HAL_GPIO_ReadPin (OUT14_GPIO_Port , OUT14_Pin) == GPIO_PIN_RESET && debounce2>= debounce){
 80015a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ac:	4888      	ldr	r0, [pc, #544]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 80015ae:	f000 feb3 	bl	8002318 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d111      	bne.n	80015dc <HAL_TIM_PeriodElapsedCallback+0x930>
 80015b8:	4b87      	ldr	r3, [pc, #540]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b87      	ldr	r3, [pc, #540]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0xb30>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	db0b      	blt.n	80015dc <HAL_TIM_PeriodElapsedCallback+0x930>
				TempRED1++;
 80015c4:	4b86      	ldr	r3, [pc, #536]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a85      	ldr	r2, [pc, #532]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 80015cc:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = TempRED1;
 80015ce:	4b84      	ldr	r3, [pc, #528]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a84      	ldr	r2, [pc, #528]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 80015d4:	6013      	str	r3, [r2, #0]
				debounce2 = 0;
 80015d6:	4b80      	ldr	r3, [pc, #512]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
			}
			if ( HAL_GPIO_ReadPin (OUT15_GPIO_Port , OUT15_Pin) == GPIO_PIN_RESET && debounce3>= debounce){
 80015dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e0:	487b      	ldr	r0, [pc, #492]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 80015e2:	f000 fe99 	bl	8002318 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d110      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x962>
 80015ec:	4b7e      	ldr	r3, [pc, #504]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b7a      	ldr	r3, [pc, #488]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0xb30>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	db0a      	blt.n	800160e <HAL_TIM_PeriodElapsedCallback+0x962>
				RED1 = TempRED1;
 80015f8:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xb34>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a7b      	ldr	r2, [pc, #492]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0xb40>)
 80015fe:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = RED1;
 8001600:	4b7a      	ldr	r3, [pc, #488]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a77      	ldr	r2, [pc, #476]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8001606:	6013      	str	r3, [r2, #0]
				debounce3 = 0;
 8001608:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
			}

			if (DisplayCycleTime1 <= 0){
 800160e:	4b6c      	ldr	r3, [pc, #432]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f300 80ba 	bgt.w	800178c <HAL_TIM_PeriodElapsedCallback+0xae0>
				switch(flipflop){
 8001618:	4b75      	ldr	r3, [pc, #468]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb44>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_TIM_PeriodElapsedCallback+0x97a>
 8001620:	2b01      	cmp	r3, #1
 8001622:	d02a      	beq.n	800167a <HAL_TIM_PeriodElapsedCallback+0x9ce>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
						update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
						flipflop = 0;
						break;
					default :
						break ;
 8001624:	e053      	b.n	80016ce <HAL_TIM_PeriodElapsedCallback+0xa22>
						HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162c:	485f      	ldr	r0, [pc, #380]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 800162e:	f000 fe8a 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001638:	485c      	ldr	r0, [pc, #368]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 800163a:	f000 fe84 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGFirstSet(0,LEDfirstSetNum/10,LEDfirstSetNum%10);
 800163e:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a5c      	ldr	r2, [pc, #368]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 8001644:	fb82 1203 	smull	r1, r2, r2, r3
 8001648:	1092      	asrs	r2, r2, #2
 800164a:	17db      	asrs	r3, r3, #31
 800164c:	1ad0      	subs	r0, r2, r3
 800164e:	4b65      	ldr	r3, [pc, #404]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 8001654:	fb83 1302 	smull	r1, r3, r3, r2
 8001658:	1099      	asrs	r1, r3, #2
 800165a:	17d3      	asrs	r3, r2, #31
 800165c:	1ac9      	subs	r1, r1, r3
 800165e:	460b      	mov	r3, r1
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	1ad1      	subs	r1, r2, r3
 8001668:	460a      	mov	r2, r1
 800166a:	4601      	mov	r1, r0
 800166c:	2000      	movs	r0, #0
 800166e:	f7fe ffcb 	bl	8000608 <update7SEGFirstSet>
						flipflop = 1;
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]
						break;
 8001678:	e029      	b.n	80016ce <HAL_TIM_PeriodElapsedCallback+0xa22>
						HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001680:	484a      	ldr	r0, [pc, #296]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8001682:	f000 fe60 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168c:	4847      	ldr	r0, [pc, #284]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 800168e:	f000 fe5a 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a47      	ldr	r2, [pc, #284]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 8001698:	fb82 1203 	smull	r1, r2, r2, r3
 800169c:	1092      	asrs	r2, r2, #2
 800169e:	17db      	asrs	r3, r3, #31
 80016a0:	1ad0      	subs	r0, r2, r3
 80016a2:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 80016a8:	fb83 1302 	smull	r1, r3, r3, r2
 80016ac:	1099      	asrs	r1, r3, #2
 80016ae:	17d3      	asrs	r3, r2, #31
 80016b0:	1ac9      	subs	r1, r1, r3
 80016b2:	460b      	mov	r3, r1
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	1ad1      	subs	r1, r2, r3
 80016bc:	460a      	mov	r2, r1
 80016be:	4601      	mov	r1, r0
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7fe ffa1 	bl	8000608 <update7SEGFirstSet>
						flipflop = 0;
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb44>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
						break;
 80016cc:	bf00      	nop

				}
				switch(flipflop1){
 80016ce:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa30>
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d02a      	beq.n	8001730 <HAL_TIM_PeriodElapsedCallback+0xa84>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
						update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
						flipflop1 = 0;
						break;
					default :
						break ;
 80016da:	e053      	b.n	8001784 <HAL_TIM_PeriodElapsedCallback+0xad8>
						HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e2:	4832      	ldr	r0, [pc, #200]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 80016e4:	f000 fe2f 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ee:	482f      	ldr	r0, [pc, #188]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 80016f0:	f000 fe29 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGSecondSet(0,LEDSecondSetNum/10,LEDSecondSetNum%10);
 80016f4:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 80016fa:	fb82 1203 	smull	r1, r2, r2, r3
 80016fe:	1092      	asrs	r2, r2, #2
 8001700:	17db      	asrs	r3, r3, #31
 8001702:	1ad0      	subs	r0, r2, r3
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 800170a:	fb83 1302 	smull	r1, r3, r3, r2
 800170e:	1099      	asrs	r1, r3, #2
 8001710:	17d3      	asrs	r3, r2, #31
 8001712:	1ac9      	subs	r1, r1, r3
 8001714:	460b      	mov	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	1ad1      	subs	r1, r2, r3
 800171e:	460a      	mov	r2, r1
 8001720:	4601      	mov	r1, r0
 8001722:	2000      	movs	r0, #0
 8001724:	f7fe ff89 	bl	800063a <update7SEGSecondSet>
						flipflop1 = 1;
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
						break;
 800172e:	e029      	b.n	8001784 <HAL_TIM_PeriodElapsedCallback+0xad8>
						HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001736:	481d      	ldr	r0, [pc, #116]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8001738:	f000 fe05 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001742:	481a      	ldr	r0, [pc, #104]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8001744:	f000 fdff 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 800174e:	fb82 1203 	smull	r1, r2, r2, r3
 8001752:	1092      	asrs	r2, r2, #2
 8001754:	17db      	asrs	r3, r3, #31
 8001756:	1ad0      	subs	r0, r2, r3
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 800175e:	fb83 1302 	smull	r1, r3, r3, r2
 8001762:	1099      	asrs	r1, r3, #2
 8001764:	17d3      	asrs	r3, r2, #31
 8001766:	1ac9      	subs	r1, r1, r3
 8001768:	460b      	mov	r3, r1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	1ad1      	subs	r1, r2, r3
 8001772:	460a      	mov	r2, r1
 8001774:	4601      	mov	r1, r0
 8001776:	2001      	movs	r0, #1
 8001778:	f7fe ff5f 	bl	800063a <update7SEGSecondSet>
						flipflop1 = 0;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
						break;
 8001782:	bf00      	nop

				}
				DisplayCycleTime1 = DisplayCycleTime;
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 800178a:	6013      	str	r3, [r2, #0]
			}
			debounce3++;
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 8001794:	6013      	str	r3, [r2, #0]
			debounce2++;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800179e:	6013      	str	r3, [r2, #0]
			DisplayCycleTime1--;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 80017a8:	6013      	str	r3, [r2, #0]
			break;
 80017aa:	e27a      	b.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0xff6>
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	20000078 	.word	0x20000078
 80017b4:	66666667 	.word	0x66666667
 80017b8:	20000084 	.word	0x20000084
 80017bc:	200000f8 	.word	0x200000f8
 80017c0:	2000007c 	.word	0x2000007c
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000098 	.word	0x20000098
 80017d0:	40010800 	.word	0x40010800
 80017d4:	20000004 	.word	0x20000004
 80017d8:	20000090 	.word	0x20000090
 80017dc:	200000e8 	.word	0x200000e8
 80017e0:	2000001c 	.word	0x2000001c
 80017e4:	20000074 	.word	0x20000074
 80017e8:	20000094 	.word	0x20000094
 80017ec:	20000010 	.word	0x20000010
 80017f0:	20000080 	.word	0x20000080
		case 2:
			SecondCount--;
 80017f4:	4b8d      	ldr	r3, [pc, #564]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xd80>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	4a8c      	ldr	r2, [pc, #560]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xd80>)
 80017fc:	6013      	str	r3, [r2, #0]
			if (SecondCount <= 0){
 80017fe:	4b8b      	ldr	r3, [pc, #556]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	dc0f      	bgt.n	8001826 <HAL_TIM_PeriodElapsedCallback+0xb7a>
				HAL_GPIO_TogglePin(OUT1_GPIO_Port,OUT1_Pin);
 8001806:	2102      	movs	r1, #2
 8001808:	4889      	ldr	r0, [pc, #548]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 800180a:	f000 fdb4 	bl	8002376 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(OUT4_GPIO_Port,OUT4_Pin);
 800180e:	2110      	movs	r1, #16
 8001810:	4887      	ldr	r0, [pc, #540]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8001812:	f000 fdb0 	bl	8002376 <HAL_GPIO_TogglePin>
				SecondCount = TicktoSecond/2;
 8001816:	4b87      	ldr	r3, [pc, #540]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0fda      	lsrs	r2, r3, #31
 800181c:	4413      	add	r3, r2
 800181e:	105b      	asrs	r3, r3, #1
 8001820:	461a      	mov	r2, r3
 8001822:	4b82      	ldr	r3, [pc, #520]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001824:	601a      	str	r2, [r3, #0]
			}

			if ( HAL_GPIO_ReadPin (OUT14_GPIO_Port , OUT14_Pin) == GPIO_PIN_RESET && debounce2>= debounce){
 8001826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182a:	4881      	ldr	r0, [pc, #516]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 800182c:	f000 fd74 	bl	8002318 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d111      	bne.n	800185a <HAL_TIM_PeriodElapsedCallback+0xbae>
 8001836:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b80      	ldr	r3, [pc, #512]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xd90>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	db0b      	blt.n	800185a <HAL_TIM_PeriodElapsedCallback+0xbae>
				TempYELLOW1++;
 8001842:	4b7f      	ldr	r3, [pc, #508]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a7d      	ldr	r2, [pc, #500]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 800184a:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = TempYELLOW1;
 800184c:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a7c      	ldr	r2, [pc, #496]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 8001852:	6013      	str	r3, [r2, #0]
				debounce2 = 0;
 8001854:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
			}
			if ( HAL_GPIO_ReadPin (OUT15_GPIO_Port , OUT15_Pin) == GPIO_PIN_RESET && debounce3>= debounce){
 800185a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185e:	4874      	ldr	r0, [pc, #464]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8001860:	f000 fd5a 	bl	8002318 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d110      	bne.n	800188c <HAL_TIM_PeriodElapsedCallback+0xbe0>
 800186a:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	db0a      	blt.n	800188c <HAL_TIM_PeriodElapsedCallback+0xbe0>
				YELLOW1 = TempYELLOW1;
 8001876:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a74      	ldr	r2, [pc, #464]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xda0>)
 800187c:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = YELLOW1;
 800187e:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xda0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a70      	ldr	r2, [pc, #448]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 8001884:	6013      	str	r3, [r2, #0]
				debounce3 = 0;
 8001886:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
			}

			if (DisplayCycleTime1 <= 0){
 800188c:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f300 80ba 	bgt.w	8001a0a <HAL_TIM_PeriodElapsedCallback+0xd5e>
				switch(flipflop){
 8001896:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_TIM_PeriodElapsedCallback+0xbf8>
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d02a      	beq.n	80018f8 <HAL_TIM_PeriodElapsedCallback+0xc4c>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
						update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
						flipflop = 0;
						break;
					default :
						break ;
 80018a2:	e053      	b.n	800194c <HAL_TIM_PeriodElapsedCallback+0xca0>
						HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018aa:	486b      	ldr	r0, [pc, #428]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 80018ac:	f000 fd4b 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	4868      	ldr	r0, [pc, #416]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 80018b8:	f000 fd45 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGFirstSet(0,LEDfirstSetNum/10,LEDfirstSetNum%10);
 80018bc:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a66      	ldr	r2, [pc, #408]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80018c2:	fb82 1203 	smull	r1, r2, r2, r3
 80018c6:	1092      	asrs	r2, r2, #2
 80018c8:	17db      	asrs	r3, r3, #31
 80018ca:	1ad0      	subs	r0, r2, r3
 80018cc:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80018d2:	fb83 1302 	smull	r1, r3, r3, r2
 80018d6:	1099      	asrs	r1, r3, #2
 80018d8:	17d3      	asrs	r3, r2, #31
 80018da:	1ac9      	subs	r1, r1, r3
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	1ad1      	subs	r1, r2, r3
 80018e6:	460a      	mov	r2, r1
 80018e8:	4601      	mov	r1, r0
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7fe fe8c 	bl	8000608 <update7SEGFirstSet>
						flipflop = 1;
 80018f0:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
						break;
 80018f6:	e029      	b.n	800194c <HAL_TIM_PeriodElapsedCallback+0xca0>
						HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fe:	4856      	ldr	r0, [pc, #344]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8001900:	f000 fd21 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190a:	4853      	ldr	r0, [pc, #332]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 800190c:	f000 fd1b 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001916:	fb82 1203 	smull	r1, r2, r2, r3
 800191a:	1092      	asrs	r2, r2, #2
 800191c:	17db      	asrs	r3, r3, #31
 800191e:	1ad0      	subs	r0, r2, r3
 8001920:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001926:	fb83 1302 	smull	r1, r3, r3, r2
 800192a:	1099      	asrs	r1, r3, #2
 800192c:	17d3      	asrs	r3, r2, #31
 800192e:	1ac9      	subs	r1, r1, r3
 8001930:	460b      	mov	r3, r1
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	1ad1      	subs	r1, r2, r3
 800193a:	460a      	mov	r2, r1
 800193c:	4601      	mov	r1, r0
 800193e:	2001      	movs	r0, #1
 8001940:	f7fe fe62 	bl	8000608 <update7SEGFirstSet>
						flipflop = 0;
 8001944:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
						break;
 800194a:	bf00      	nop

				}
				switch(flipflop1){
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <HAL_TIM_PeriodElapsedCallback+0xcae>
 8001954:	2b01      	cmp	r3, #1
 8001956:	d02a      	beq.n	80019ae <HAL_TIM_PeriodElapsedCallback+0xd02>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
						update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
						flipflop1 = 0;
						break;
					default :
						break ;
 8001958:	e053      	b.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0xd56>
						HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001960:	483d      	ldr	r0, [pc, #244]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8001962:	f000 fcf0 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196c:	483a      	ldr	r0, [pc, #232]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 800196e:	f000 fcea 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGSecondSet(0,LEDSecondSetNum/10,LEDSecondSetNum%10);
 8001972:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a39      	ldr	r2, [pc, #228]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001978:	fb82 1203 	smull	r1, r2, r2, r3
 800197c:	1092      	asrs	r2, r2, #2
 800197e:	17db      	asrs	r3, r3, #31
 8001980:	1ad0      	subs	r0, r2, r3
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001988:	fb83 1302 	smull	r1, r3, r3, r2
 800198c:	1099      	asrs	r1, r3, #2
 800198e:	17d3      	asrs	r3, r2, #31
 8001990:	1ac9      	subs	r1, r1, r3
 8001992:	460b      	mov	r3, r1
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	1ad1      	subs	r1, r2, r3
 800199c:	460a      	mov	r2, r1
 800199e:	4601      	mov	r1, r0
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7fe fe4a 	bl	800063a <update7SEGSecondSet>
						flipflop1 = 1;
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
						break;
 80019ac:	e029      	b.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0xd56>
						HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b4:	4828      	ldr	r0, [pc, #160]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 80019b6:	f000 fcc6 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c0:	4825      	ldr	r0, [pc, #148]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 80019c2:	f000 fcc0 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80019cc:	fb82 1203 	smull	r1, r2, r2, r3
 80019d0:	1092      	asrs	r2, r2, #2
 80019d2:	17db      	asrs	r3, r3, #31
 80019d4:	1ad0      	subs	r0, r2, r3
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80019dc:	fb83 1302 	smull	r1, r3, r3, r2
 80019e0:	1099      	asrs	r1, r3, #2
 80019e2:	17d3      	asrs	r3, r2, #31
 80019e4:	1ac9      	subs	r1, r1, r3
 80019e6:	460b      	mov	r3, r1
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	1ad1      	subs	r1, r2, r3
 80019f0:	460a      	mov	r2, r1
 80019f2:	4601      	mov	r1, r0
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7fe fe20 	bl	800063a <update7SEGSecondSet>
						flipflop1 = 0;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
						break;
 8001a00:	bf00      	nop

				}
				DisplayCycleTime1 = DisplayCycleTime;
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001a08:	6013      	str	r3, [r2, #0]
			}
			debounce3++;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8001a12:	6013      	str	r3, [r2, #0]
			debounce2++;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8001a1c:	6013      	str	r3, [r2, #0]
			DisplayCycleTime1--;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001a26:	6013      	str	r3, [r2, #0]
			break;
 8001a28:	e13b      	b.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0xff6>
 8001a2a:	bf00      	nop
 8001a2c:	20000098 	.word	0x20000098
 8001a30:	40010800 	.word	0x40010800
 8001a34:	20000004 	.word	0x20000004
 8001a38:	20000090 	.word	0x20000090
 8001a3c:	200000e8 	.word	0x200000e8
 8001a40:	20000024 	.word	0x20000024
 8001a44:	20000074 	.word	0x20000074
 8001a48:	20000094 	.word	0x20000094
 8001a4c:	20000018 	.word	0x20000018
 8001a50:	2000007c 	.word	0x2000007c
 8001a54:	20000080 	.word	0x20000080
 8001a58:	40010c00 	.word	0x40010c00
 8001a5c:	66666667 	.word	0x66666667
 8001a60:	20000084 	.word	0x20000084
 8001a64:	20000078 	.word	0x20000078
 8001a68:	200000f8 	.word	0x200000f8
		case 3:
			SecondCount--;
 8001a6c:	4b92      	ldr	r3, [pc, #584]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	4a91      	ldr	r2, [pc, #580]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8001a74:	6013      	str	r3, [r2, #0]
			if (SecondCount <= 0){
 8001a76:	4b90      	ldr	r3, [pc, #576]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	dc0f      	bgt.n	8001a9e <HAL_TIM_PeriodElapsedCallback+0xdf2>
				HAL_GPIO_TogglePin(OUT2_GPIO_Port,OUT2_Pin);
 8001a7e:	2104      	movs	r1, #4
 8001a80:	488e      	ldr	r0, [pc, #568]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8001a82:	f000 fc78 	bl	8002376 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(OUT5_GPIO_Port,OUT5_Pin);
 8001a86:	2120      	movs	r1, #32
 8001a88:	488c      	ldr	r0, [pc, #560]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8001a8a:	f000 fc74 	bl	8002376 <HAL_GPIO_TogglePin>
				SecondCount = TicktoSecond/2;
 8001a8e:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0fda      	lsrs	r2, r3, #31
 8001a94:	4413      	add	r3, r2
 8001a96:	105b      	asrs	r3, r3, #1
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b87      	ldr	r3, [pc, #540]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8001a9c:	601a      	str	r2, [r3, #0]
			}

			if ( HAL_GPIO_ReadPin (OUT14_GPIO_Port , OUT14_Pin) == GPIO_PIN_RESET && debounce2>= debounce){
 8001a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa2:	4886      	ldr	r0, [pc, #536]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8001aa4:	f000 fc38 	bl	8002318 <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d111      	bne.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0xe26>
 8001aae:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x101c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	db0b      	blt.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0xe26>
				TempGREEN1++;
 8001aba:	4b84      	ldr	r3, [pc, #528]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1020>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a82      	ldr	r2, [pc, #520]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1020>)
 8001ac2:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = TempGREEN1;
 8001ac4:	4b81      	ldr	r3, [pc, #516]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1020>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a81      	ldr	r2, [pc, #516]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8001aca:	6013      	str	r3, [r2, #0]
				debounce2 = 0;
 8001acc:	4b7d      	ldr	r3, [pc, #500]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
			}
			if ( HAL_GPIO_ReadPin (OUT15_GPIO_Port , OUT15_Pin) == GPIO_PIN_RESET && debounce3>= debounce){
 8001ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad6:	4879      	ldr	r0, [pc, #484]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8001ad8:	f000 fc1e 	bl	8002318 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d110      	bne.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0xe58>
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x1028>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x101c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	db0a      	blt.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0xe58>
				GREEN1 = TempGREEN1;
 8001aee:	4b77      	ldr	r3, [pc, #476]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1020>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a79      	ldr	r2, [pc, #484]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x102c>)
 8001af4:	6013      	str	r3, [r2, #0]
				LEDfirstSetNum = GREEN1;
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x102c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8001afc:	6013      	str	r3, [r2, #0]
				debounce3 = 0;
 8001afe:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x1028>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
			}

			if (DisplayCycleTime1 <= 0){
 8001b04:	4b75      	ldr	r3, [pc, #468]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1030>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f300 80ba 	bgt.w	8001c82 <HAL_TIM_PeriodElapsedCallback+0xfd6>
				switch(flipflop){
 8001b0e:	4b74      	ldr	r3, [pc, #464]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1034>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0xe70>
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d02a      	beq.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0xec4>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
						update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
						flipflop = 0;
						break;
					default :
						break ;
 8001b1a:	e053      	b.n	8001bc4 <HAL_TIM_PeriodElapsedCallback+0xf18>
						HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b22:	4870      	ldr	r0, [pc, #448]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8001b24:	f000 fc0f 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b2e:	486d      	ldr	r0, [pc, #436]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8001b30:	f000 fc09 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGFirstSet(0,LEDfirstSetNum/10,LEDfirstSetNum%10);
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6b      	ldr	r2, [pc, #428]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1092      	asrs	r2, r2, #2
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad0      	subs	r0, r2, r3
 8001b44:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001b4a:	fb83 1302 	smull	r1, r3, r3, r2
 8001b4e:	1099      	asrs	r1, r3, #2
 8001b50:	17d3      	asrs	r3, r2, #31
 8001b52:	1ac9      	subs	r1, r1, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	1ad1      	subs	r1, r2, r3
 8001b5e:	460a      	mov	r2, r1
 8001b60:	4601      	mov	r1, r0
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7fe fd50 	bl	8000608 <update7SEGFirstSet>
						flipflop = 1;
 8001b68:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1034>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
						break;
 8001b6e:	e029      	b.n	8001bc4 <HAL_TIM_PeriodElapsedCallback+0xf18>
						HAL_GPIO_WritePin ( OUT2_12_GPIO_Port , OUT2_12_Pin ,GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b76:	485b      	ldr	r0, [pc, #364]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8001b78:	f000 fbe5 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_13_GPIO_Port , OUT2_13_Pin ,GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b82:	4858      	ldr	r0, [pc, #352]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8001b84:	f000 fbdf 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGFirstSet(1,LEDfirstSetNum/10,LEDfirstSetNum%10);
 8001b88:	4b51      	ldr	r3, [pc, #324]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a56      	ldr	r2, [pc, #344]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b92:	1092      	asrs	r2, r2, #2
 8001b94:	17db      	asrs	r3, r3, #31
 8001b96:	1ad0      	subs	r0, r2, r3
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001b9e:	fb83 1302 	smull	r1, r3, r3, r2
 8001ba2:	1099      	asrs	r1, r3, #2
 8001ba4:	17d3      	asrs	r3, r2, #31
 8001ba6:	1ac9      	subs	r1, r1, r3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	1ad1      	subs	r1, r2, r3
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7fe fd26 	bl	8000608 <update7SEGFirstSet>
						flipflop = 0;
 8001bbc:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1034>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
						break;
 8001bc2:	bf00      	nop

				}
				switch(flipflop1){
 8001bc4:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x1040>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0xf26>
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d02a      	beq.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0xf7a>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
						update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
						flipflop1 = 0;
						break;
					default :
						break ;
 8001bd0:	e053      	b.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0xfce>
						HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd8:	4842      	ldr	r0, [pc, #264]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8001bda:	f000 fbb4 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be4:	483f      	ldr	r0, [pc, #252]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8001be6:	f000 fbae 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGSecondSet(0,LEDSecondSetNum/10,LEDSecondSetNum%10);
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x1044>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a3e      	ldr	r2, [pc, #248]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf4:	1092      	asrs	r2, r2, #2
 8001bf6:	17db      	asrs	r3, r3, #31
 8001bf8:	1ad0      	subs	r0, r2, r3
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x1044>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001c00:	fb83 1302 	smull	r1, r3, r3, r2
 8001c04:	1099      	asrs	r1, r3, #2
 8001c06:	17d3      	asrs	r3, r2, #31
 8001c08:	1ac9      	subs	r1, r1, r3
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	1ad1      	subs	r1, r2, r3
 8001c14:	460a      	mov	r2, r1
 8001c16:	4601      	mov	r1, r0
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7fe fd0e 	bl	800063a <update7SEGSecondSet>
						flipflop1 = 1;
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x1040>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
						break;
 8001c24:	e029      	b.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0xfce>
						HAL_GPIO_WritePin ( OUT2_14_GPIO_Port , OUT2_14_Pin ,GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2c:	482d      	ldr	r0, [pc, #180]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8001c2e:	f000 fb8a 	bl	8002346 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( OUT2_15_GPIO_Port , OUT2_15_Pin ,GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c38:	482a      	ldr	r0, [pc, #168]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8001c3a:	f000 fb84 	bl	8002346 <HAL_GPIO_WritePin>
						update7SEGSecondSet(1,LEDSecondSetNum/10,LEDSecondSetNum%10);
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x1044>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001c44:	fb82 1203 	smull	r1, r2, r2, r3
 8001c48:	1092      	asrs	r2, r2, #2
 8001c4a:	17db      	asrs	r3, r3, #31
 8001c4c:	1ad0      	subs	r0, r2, r3
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x1044>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8001c54:	fb83 1302 	smull	r1, r3, r3, r2
 8001c58:	1099      	asrs	r1, r3, #2
 8001c5a:	17d3      	asrs	r3, r2, #31
 8001c5c:	1ac9      	subs	r1, r1, r3
 8001c5e:	460b      	mov	r3, r1
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	1ad1      	subs	r1, r2, r3
 8001c68:	460a      	mov	r2, r1
 8001c6a:	4601      	mov	r1, r0
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7fe fce4 	bl	800063a <update7SEGSecondSet>
						flipflop1 = 0;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x1040>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
						break;
 8001c78:	bf00      	nop

				}
				DisplayCycleTime1 = DisplayCycleTime;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x1048>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1030>)
 8001c80:	6013      	str	r3, [r2, #0]
			}
			debounce3++;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x1028>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x1028>)
 8001c8a:	6013      	str	r3, [r2, #0]
			debounce2++;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8001c94:	6013      	str	r3, [r2, #0]
			DisplayCycleTime1--;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1030>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1030>)
 8001c9e:	6013      	str	r3, [r2, #0]
			break;
 8001ca0:	bf00      	nop
	}
	if( htim -> Instance == TIM2 ) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001caa:	d101      	bne.n	8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1004>
		button_reading();
 8001cac:	f7fe fdfc 	bl	80008a8 <button_reading>
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000098 	.word	0x20000098
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	20000004 	.word	0x20000004
 8001cc4:	20000090 	.word	0x20000090
 8001cc8:	200000e8 	.word	0x200000e8
 8001ccc:	20000020 	.word	0x20000020
 8001cd0:	20000074 	.word	0x20000074
 8001cd4:	20000094 	.word	0x20000094
 8001cd8:	20000014 	.word	0x20000014
 8001cdc:	2000007c 	.word	0x2000007c
 8001ce0:	20000080 	.word	0x20000080
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	66666667 	.word	0x66666667
 8001cec:	20000084 	.word	0x20000084
 8001cf0:	20000078 	.word	0x20000078
 8001cf4:	200000f8 	.word	0x200000f8

08001cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf8:	f7fe ffd2 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cfe:	490c      	ldr	r1, [pc, #48]	; (8001d30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d14:	4c09      	ldr	r4, [pc, #36]	; (8001d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f001 fb05 	bl	8003330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d26:	f7fe fe31 	bl	800098c <main>
  bx lr
 8001d2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001d34:	080033cc 	.word	0x080033cc
  ldr r2, =_sbss
 8001d38:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001d3c:	20000114 	.word	0x20000114

08001d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC1_2_IRQHandler>
	...

08001d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_Init+0x28>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_Init+0x28>)
 8001d4e:	f043 0310 	orr.w	r3, r3, #16
 8001d52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 f923 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f000 f808 	bl	8001d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d60:	f7fe ff16 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40022000 	.word	0x40022000

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_InitTick+0x54>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x58>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f93b 	bl	800200a <HAL_SYSTICK_Config>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00e      	b.n	8001dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d80a      	bhi.n	8001dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f000 f903 	bl	8001fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <HAL_InitTick+0x5c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	2000002c 	.word	0x2000002c
 8001dcc:	20000028 	.word	0x20000028

08001dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_IncTick+0x1c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_IncTick+0x20>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <HAL_IncTick+0x20>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	2000002c 	.word	0x2000002c
 8001df0:	20000110 	.word	0x20000110

08001df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <HAL_GetTick+0x10>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	20000110 	.word	0x20000110

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4906      	ldr	r1, [pc, #24]	; (8001ea0 <__NVIC_EnableIRQ+0x34>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6c:	d301      	bcc.n	8001f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00f      	b.n	8001f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <SysTick_Config+0x40>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7ff ff90 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SysTick_Config+0x40>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SysTick_Config+0x40>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff2d 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff42 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff90 	bl	8001ef8 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5f 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff35 	bl	8001e6c <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffa2 	bl	8001f5c <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b08b      	sub	sp, #44	; 0x2c
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002036:	e148      	b.n	80022ca <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002038:	2201      	movs	r2, #1
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8137 	bne.w	80022c4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4aa3      	ldr	r2, [pc, #652]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d05e      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 8002060:	4aa1      	ldr	r2, [pc, #644]	; (80022e8 <HAL_GPIO_Init+0x2c4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d875      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 8002066:	4aa1      	ldr	r2, [pc, #644]	; (80022ec <HAL_GPIO_Init+0x2c8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d058      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 800206c:	4a9f      	ldr	r2, [pc, #636]	; (80022ec <HAL_GPIO_Init+0x2c8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d86f      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 8002072:	4a9f      	ldr	r2, [pc, #636]	; (80022f0 <HAL_GPIO_Init+0x2cc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d052      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 8002078:	4a9d      	ldr	r2, [pc, #628]	; (80022f0 <HAL_GPIO_Init+0x2cc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d869      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 800207e:	4a9d      	ldr	r2, [pc, #628]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d04c      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 8002084:	4a9b      	ldr	r2, [pc, #620]	; (80022f4 <HAL_GPIO_Init+0x2d0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d863      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 800208a:	4a9b      	ldr	r2, [pc, #620]	; (80022f8 <HAL_GPIO_Init+0x2d4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d046      	beq.n	800211e <HAL_GPIO_Init+0xfa>
 8002090:	4a99      	ldr	r2, [pc, #612]	; (80022f8 <HAL_GPIO_Init+0x2d4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d85d      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 8002096:	2b12      	cmp	r3, #18
 8002098:	d82a      	bhi.n	80020f0 <HAL_GPIO_Init+0xcc>
 800209a:	2b12      	cmp	r3, #18
 800209c:	d859      	bhi.n	8002152 <HAL_GPIO_Init+0x12e>
 800209e:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <HAL_GPIO_Init+0x80>)
 80020a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a4:	0800211f 	.word	0x0800211f
 80020a8:	080020f9 	.word	0x080020f9
 80020ac:	0800210b 	.word	0x0800210b
 80020b0:	0800214d 	.word	0x0800214d
 80020b4:	08002153 	.word	0x08002153
 80020b8:	08002153 	.word	0x08002153
 80020bc:	08002153 	.word	0x08002153
 80020c0:	08002153 	.word	0x08002153
 80020c4:	08002153 	.word	0x08002153
 80020c8:	08002153 	.word	0x08002153
 80020cc:	08002153 	.word	0x08002153
 80020d0:	08002153 	.word	0x08002153
 80020d4:	08002153 	.word	0x08002153
 80020d8:	08002153 	.word	0x08002153
 80020dc:	08002153 	.word	0x08002153
 80020e0:	08002153 	.word	0x08002153
 80020e4:	08002153 	.word	0x08002153
 80020e8:	08002101 	.word	0x08002101
 80020ec:	08002115 	.word	0x08002115
 80020f0:	4a82      	ldr	r2, [pc, #520]	; (80022fc <HAL_GPIO_Init+0x2d8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020f6:	e02c      	b.n	8002152 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	623b      	str	r3, [r7, #32]
          break;
 80020fe:	e029      	b.n	8002154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	3304      	adds	r3, #4
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	e024      	b.n	8002154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	3308      	adds	r3, #8
 8002110:	623b      	str	r3, [r7, #32]
          break;
 8002112:	e01f      	b.n	8002154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	330c      	adds	r3, #12
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e01a      	b.n	8002154 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002126:	2304      	movs	r3, #4
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e013      	b.n	8002154 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002134:	2308      	movs	r3, #8
 8002136:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	611a      	str	r2, [r3, #16]
          break;
 800213e:	e009      	b.n	8002154 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002140:	2308      	movs	r3, #8
 8002142:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	615a      	str	r2, [r3, #20]
          break;
 800214a:	e003      	b.n	8002154 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800214c:	2300      	movs	r3, #0
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e000      	b.n	8002154 <HAL_GPIO_Init+0x130>
          break;
 8002152:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2bff      	cmp	r3, #255	; 0xff
 8002158:	d801      	bhi.n	800215e <HAL_GPIO_Init+0x13a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	e001      	b.n	8002162 <HAL_GPIO_Init+0x13e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2bff      	cmp	r3, #255	; 0xff
 8002168:	d802      	bhi.n	8002170 <HAL_GPIO_Init+0x14c>
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	e002      	b.n	8002176 <HAL_GPIO_Init+0x152>
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3b08      	subs	r3, #8
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	210f      	movs	r1, #15
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	6a39      	ldr	r1, [r7, #32]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8090 	beq.w	80022c4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021a4:	4b56      	ldr	r3, [pc, #344]	; (8002300 <HAL_GPIO_Init+0x2dc>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a55      	ldr	r2, [pc, #340]	; (8002300 <HAL_GPIO_Init+0x2dc>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_GPIO_Init+0x2dc>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021bc:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_GPIO_Init+0x2e0>)
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a49      	ldr	r2, [pc, #292]	; (8002308 <HAL_GPIO_Init+0x2e4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1e0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a48      	ldr	r2, [pc, #288]	; (800230c <HAL_GPIO_Init+0x2e8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1dc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_GPIO_Init+0x2ec>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1d8>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e004      	b.n	8002206 <HAL_GPIO_Init+0x1e2>
 80021fc:	2303      	movs	r3, #3
 80021fe:	e002      	b.n	8002206 <HAL_GPIO_Init+0x1e2>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_GPIO_Init+0x1e2>
 8002204:	2300      	movs	r3, #0
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	f002 0203 	and.w	r2, r2, #3
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	4093      	lsls	r3, r2
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002216:	493b      	ldr	r1, [pc, #236]	; (8002304 <HAL_GPIO_Init+0x2e0>)
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	4937      	ldr	r1, [pc, #220]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	608b      	str	r3, [r1, #8]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800223e:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	4933      	ldr	r1, [pc, #204]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002248:	4013      	ands	r3, r2
 800224a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002258:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	492d      	ldr	r1, [pc, #180]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	60cb      	str	r3, [r1, #12]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	4929      	ldr	r1, [pc, #164]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002270:	4013      	ands	r3, r2
 8002272:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4923      	ldr	r1, [pc, #140]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	491f      	ldr	r1, [pc, #124]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 8002298:	4013      	ands	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4919      	ldr	r1, [pc, #100]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	4915      	ldr	r1, [pc, #84]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	3301      	adds	r3, #1
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f47f aeaf 	bne.w	8002038 <HAL_GPIO_Init+0x14>
  }
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	372c      	adds	r7, #44	; 0x2c
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	10320000 	.word	0x10320000
 80022ec:	10310000 	.word	0x10310000
 80022f0:	10220000 	.word	0x10220000
 80022f4:	10210000 	.word	0x10210000
 80022f8:	10120000 	.word	0x10120000
 80022fc:	10110000 	.word	0x10110000
 8002300:	40021000 	.word	0x40021000
 8002304:	40010000 	.word	0x40010000
 8002308:	40010800 	.word	0x40010800
 800230c:	40010c00 	.word	0x40010c00
 8002310:	40011000 	.word	0x40011000
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e001      	b.n	800233a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	807b      	strh	r3, [r7, #2]
 8002352:	4613      	mov	r3, r2
 8002354:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002356:	787b      	ldrb	r3, [r7, #1]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002362:	e003      	b.n	800236c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	041a      	lsls	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	041a      	lsls	r2, r3, #16
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43d9      	mvns	r1, r3
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	400b      	ands	r3, r1
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e26c      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8087 	beq.w	80024d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c8:	4b92      	ldr	r3, [pc, #584]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d00c      	beq.n	80023ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d4:	4b8f      	ldr	r3, [pc, #572]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d112      	bne.n	8002406 <HAL_RCC_OscConfig+0x5e>
 80023e0:	4b8c      	ldr	r3, [pc, #560]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ec:	d10b      	bne.n	8002406 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ee:	4b89      	ldr	r3, [pc, #548]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d06c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x12c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d168      	bne.n	80024d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e246      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x76>
 8002410:	4b80      	ldr	r3, [pc, #512]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a7f      	ldr	r2, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e02e      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x98>
 8002426:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7a      	ldr	r2, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b78      	ldr	r3, [pc, #480]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a77      	ldr	r2, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e01d      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0xbc>
 800244a:	4b72      	ldr	r3, [pc, #456]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a71      	ldr	r2, [pc, #452]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6e      	ldr	r2, [pc, #440]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 8002464:	4b6b      	ldr	r3, [pc, #428]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6a      	ldr	r2, [pc, #424]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a67      	ldr	r2, [pc, #412]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fcb6 	bl	8001df4 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff fcb2 	bl	8001df4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1fa      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b5d      	ldr	r3, [pc, #372]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0xe4>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff fca2 	bl	8001df4 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff fc9e 	bl	8001df4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e1e6      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x10c>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d063      	beq.n	80025aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e2:	4b4c      	ldr	r3, [pc, #304]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ee:	4b49      	ldr	r3, [pc, #292]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d11c      	bne.n	8002534 <HAL_RCC_OscConfig+0x18c>
 80024fa:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d116      	bne.n	8002534 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x176>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e1ba      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4939      	ldr	r1, [pc, #228]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	e03a      	b.n	80025aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d020      	beq.n	800257e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff fc57 	bl	8001df4 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254a:	f7ff fc53 	bl	8001df4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e19b      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4927      	ldr	r1, [pc, #156]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
 800257c:	e015      	b.n	80025aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x270>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fc36 	bl	8001df4 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258c:	f7ff fc32 	bl	8001df4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e17a      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d03a      	beq.n	800262c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d019      	beq.n	80025f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_RCC_OscConfig+0x274>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c4:	f7ff fc16 	bl	8001df4 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025cc:	f7ff fc12 	bl	8001df4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e15a      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ea:	2001      	movs	r0, #1
 80025ec:	f000 fa9a 	bl	8002b24 <RCC_Delay>
 80025f0:	e01c      	b.n	800262c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_OscConfig+0x274>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7ff fbfc 	bl	8001df4 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fe:	e00f      	b.n	8002620 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff fbf8 	bl	8001df4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d908      	bls.n	8002620 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e140      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	42420000 	.word	0x42420000
 800261c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	4b9e      	ldr	r3, [pc, #632]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e9      	bne.n	8002600 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80a6 	beq.w	8002786 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b97      	ldr	r3, [pc, #604]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b94      	ldr	r3, [pc, #592]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a93      	ldr	r2, [pc, #588]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	61d3      	str	r3, [r2, #28]
 8002656:	4b91      	ldr	r3, [pc, #580]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b8e      	ldr	r3, [pc, #568]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b8b      	ldr	r3, [pc, #556]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a8a      	ldr	r2, [pc, #552]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7ff fbb9 	bl	8001df4 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7ff fbb5 	bl	8001df4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b64      	cmp	r3, #100	; 0x64
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0fd      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b81      	ldr	r3, [pc, #516]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x312>
 80026ac:	4b7b      	ldr	r3, [pc, #492]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a7a      	ldr	r2, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6213      	str	r3, [r2, #32]
 80026b8:	e02d      	b.n	8002716 <HAL_RCC_OscConfig+0x36e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x334>
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a75      	ldr	r2, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	4b73      	ldr	r3, [pc, #460]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a72      	ldr	r2, [pc, #456]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6213      	str	r3, [r2, #32]
 80026da:	e01c      	b.n	8002716 <HAL_RCC_OscConfig+0x36e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x356>
 80026e4:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a6c      	ldr	r2, [pc, #432]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4a69      	ldr	r2, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	e00b      	b.n	8002716 <HAL_RCC_OscConfig+0x36e>
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a66      	ldr	r2, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a63      	ldr	r2, [pc, #396]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7ff fb69 	bl	8001df4 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff fb65 	bl	8001df4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0ab      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	4b57      	ldr	r3, [pc, #348]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ee      	beq.n	8002726 <HAL_RCC_OscConfig+0x37e>
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7ff fb53 	bl	8001df4 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7ff fb4f 	bl	8001df4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e095      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	4b4c      	ldr	r3, [pc, #304]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ee      	bne.n	8002752 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4b48      	ldr	r3, [pc, #288]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4a47      	ldr	r2, [pc, #284]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002784:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8081 	beq.w	8002892 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002790:	4b42      	ldr	r3, [pc, #264]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d061      	beq.n	8002860 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d146      	bne.n	8002832 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <HAL_RCC_OscConfig+0x4fc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff fb23 	bl	8001df4 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b2:	f7ff fb1f 	bl	8001df4 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e067      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d108      	bne.n	80027ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027da:	4b30      	ldr	r3, [pc, #192]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	492d      	ldr	r1, [pc, #180]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a19      	ldr	r1, [r3, #32]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	430b      	orrs	r3, r1
 80027fe:	4927      	ldr	r1, [pc, #156]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x4fc>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7ff faf3 	bl	8001df4 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002812:	f7ff faef 	bl	8001df4 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e037      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x46a>
 8002830:	e02f      	b.n	8002892 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <HAL_RCC_OscConfig+0x4fc>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fadc 	bl	8001df4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7ff fad8 	bl	8001df4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e020      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x498>
 800285e:	e018      	b.n	8002892 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e013      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x4f4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	429a      	cmp	r2, r3
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
 80028a4:	42420060 	.word	0x42420060

080028a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0d0      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b6a      	ldr	r3, [pc, #424]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d910      	bls.n	80028ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	4965      	ldr	r1, [pc, #404]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0b8      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002904:	4b59      	ldr	r3, [pc, #356]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800290e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800291c:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a52      	ldr	r2, [pc, #328]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002926:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	494d      	ldr	r1, [pc, #308]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d040      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d115      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e07f      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e073      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06b      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002986:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4936      	ldr	r1, [pc, #216]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002998:	f7ff fa2c 	bl	8001df4 <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7ff fa28 	bl	8001df4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e053      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 020c 	and.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1eb      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d210      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 0207 	bic.w	r2, r3, #7
 80029de:	4922      	ldr	r1, [pc, #136]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e032      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4916      	ldr	r1, [pc, #88]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	490e      	ldr	r1, [pc, #56]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a36:	f000 f821 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	490a      	ldr	r1, [pc, #40]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a48:	5ccb      	ldrb	r3, [r1, r3]
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <HAL_RCC_ClockConfig+0x1cc>)
 8002a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1d0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f98a 	bl	8001d70 <HAL_InitTick>

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	080033a0 	.word	0x080033a0
 8002a74:	20000000 	.word	0x20000000
 8002a78:	20000028 	.word	0x20000028

08002a7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d002      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x30>
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aaa:	e027      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aae:	613b      	str	r3, [r7, #16]
      break;
 8002ab0:	e027      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	0c9b      	lsrs	r3, r3, #18
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d010      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x94>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	0c5b      	lsrs	r3, r3, #17
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ad6:	5cd3      	ldrb	r3, [r2, r3]
 8002ad8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ade:	fb02 f203 	mul.w	r2, r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e004      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	613b      	str	r3, [r7, #16]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afe:	613b      	str	r3, [r7, #16]
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	693b      	ldr	r3, [r7, #16]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	007a1200 	.word	0x007a1200
 8002b18:	080033b0 	.word	0x080033b0
 8002b1c:	080033c0 	.word	0x080033c0
 8002b20:	003d0900 	.word	0x003d0900

08002b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <RCC_Delay+0x34>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <RCC_Delay+0x38>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0a5b      	lsrs	r3, r3, #9
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b40:	bf00      	nop
  }
  while (Delay --);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	60fa      	str	r2, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f9      	bne.n	8002b40 <RCC_Delay+0x1c>
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	10624dd3 	.word	0x10624dd3

08002b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e041      	b.n	8002bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe f834 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 fa6e 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d001      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e035      	b.n	8002c84 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_TIM_Base_Start_IT+0x90>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_TIM_Base_Start_IT+0x4e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d004      	beq.n	8002c4e <HAL_TIM_Base_Start_IT+0x4e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <HAL_TIM_Base_Start_IT+0x94>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d010      	beq.n	8002c82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c70:	e007      	b.n	8002c82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400

08002c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0202 	mvn.w	r2, #2
 8002cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9b4 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9a7 	bl	8003036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f9b6 	bl	800305a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0204 	mvn.w	r2, #4
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f98a 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f97d 	bl	8003036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f98c 	bl	800305a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0208 	mvn.w	r2, #8
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f960 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f953 	bl	8003036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f962 	bl	800305a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d122      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d11b      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0210 	mvn.w	r2, #16
 8002dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f936 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f929 	bl	8003036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f938 	bl	800305a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10e      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0201 	mvn.w	r2, #1
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd ff48 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa6b 	bl	800331e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8fc 	bl	800306c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0220 	mvn.w	r2, #32
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa36 	bl	800330c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e0b4      	b.n	800302e <HAL_TIM_ConfigClockSource+0x186>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efc:	d03e      	beq.n	8002f7c <HAL_TIM_ConfigClockSource+0xd4>
 8002efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f02:	f200 8087 	bhi.w	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	f000 8086 	beq.w	800301a <HAL_TIM_ConfigClockSource+0x172>
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d87f      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b70      	cmp	r3, #112	; 0x70
 8002f16:	d01a      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0xa6>
 8002f18:	2b70      	cmp	r3, #112	; 0x70
 8002f1a:	d87b      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	2b60      	cmp	r3, #96	; 0x60
 8002f1e:	d050      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8002f20:	2b60      	cmp	r3, #96	; 0x60
 8002f22:	d877      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f24:	2b50      	cmp	r3, #80	; 0x50
 8002f26:	d03c      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8002f28:	2b50      	cmp	r3, #80	; 0x50
 8002f2a:	d873      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d058      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d86f      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b30      	cmp	r3, #48	; 0x30
 8002f36:	d064      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	2b30      	cmp	r3, #48	; 0x30
 8002f3a:	d86b      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d060      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x15a>
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d867      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05c      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x15a>
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d05a      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x15a>
 8002f4c:	e062      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6899      	ldr	r1, [r3, #8]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f000 f95e 	bl	800321e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	609a      	str	r2, [r3, #8]
      break;
 8002f7a:	e04f      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6899      	ldr	r1, [r3, #8]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f000 f947 	bl	800321e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9e:	609a      	str	r2, [r3, #8]
      break;
 8002fa0:	e03c      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f000 f8be 	bl	8003130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2150      	movs	r1, #80	; 0x50
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f915 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002fc0:	e02c      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f000 f8dc 	bl	800318c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2160      	movs	r1, #96	; 0x60
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f905 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8002fe0:	e01c      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f000 f89e 	bl	8003130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2140      	movs	r1, #64	; 0x40
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f8f5 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8003000:	e00c      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f000 f8ec 	bl	80031ea <TIM_ITRx_SetConfig>
      break;
 8003012:	e003      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e000      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800301a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a25      	ldr	r2, [pc, #148]	; (8003128 <TIM_Base_SetConfig+0xa8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <TIM_Base_SetConfig+0x28>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d003      	beq.n	80030a8 <TIM_Base_SetConfig+0x28>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a22      	ldr	r2, [pc, #136]	; (800312c <TIM_Base_SetConfig+0xac>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d108      	bne.n	80030ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <TIM_Base_SetConfig+0xa8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <TIM_Base_SetConfig+0x52>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0x52>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a17      	ldr	r2, [pc, #92]	; (800312c <TIM_Base_SetConfig+0xac>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <TIM_Base_SetConfig+0xa8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d103      	bne.n	8003118 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	615a      	str	r2, [r3, #20]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40000400 	.word	0x40000400

08003130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0201 	bic.w	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800315a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 030a 	bic.w	r3, r3, #10
 800316c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f023 0210 	bic.w	r2, r3, #16
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	031b      	lsls	r3, r3, #12
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	f043 0307 	orr.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800321e:	b480      	push	{r7}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003238:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	021a      	lsls	r2, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	431a      	orrs	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003270:	2302      	movs	r3, #2
 8003272:	e041      	b.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a14      	ldr	r2, [pc, #80]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d004      	beq.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40000400 	.word	0x40000400

0800330c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <__libc_init_array>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	2600      	movs	r6, #0
 8003334:	4d0c      	ldr	r5, [pc, #48]	; (8003368 <__libc_init_array+0x38>)
 8003336:	4c0d      	ldr	r4, [pc, #52]	; (800336c <__libc_init_array+0x3c>)
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	42a6      	cmp	r6, r4
 800333e:	d109      	bne.n	8003354 <__libc_init_array+0x24>
 8003340:	f000 f822 	bl	8003388 <_init>
 8003344:	2600      	movs	r6, #0
 8003346:	4d0a      	ldr	r5, [pc, #40]	; (8003370 <__libc_init_array+0x40>)
 8003348:	4c0a      	ldr	r4, [pc, #40]	; (8003374 <__libc_init_array+0x44>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	42a6      	cmp	r6, r4
 8003350:	d105      	bne.n	800335e <__libc_init_array+0x2e>
 8003352:	bd70      	pop	{r4, r5, r6, pc}
 8003354:	f855 3b04 	ldr.w	r3, [r5], #4
 8003358:	4798      	blx	r3
 800335a:	3601      	adds	r6, #1
 800335c:	e7ee      	b.n	800333c <__libc_init_array+0xc>
 800335e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003362:	4798      	blx	r3
 8003364:	3601      	adds	r6, #1
 8003366:	e7f2      	b.n	800334e <__libc_init_array+0x1e>
 8003368:	080033c4 	.word	0x080033c4
 800336c:	080033c4 	.word	0x080033c4
 8003370:	080033c4 	.word	0x080033c4
 8003374:	080033c8 	.word	0x080033c8

08003378 <memset>:
 8003378:	4603      	mov	r3, r0
 800337a:	4402      	add	r2, r0
 800337c:	4293      	cmp	r3, r2
 800337e:	d100      	bne.n	8003382 <memset+0xa>
 8003380:	4770      	bx	lr
 8003382:	f803 1b01 	strb.w	r1, [r3], #1
 8003386:	e7f9      	b.n	800337c <memset+0x4>

08003388 <_init>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr

08003394 <_fini>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr
